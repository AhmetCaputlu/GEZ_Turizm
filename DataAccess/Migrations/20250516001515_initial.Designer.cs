// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GezTurizmContext))]
    [Migration("20250516001515_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 940, DateTimeKind.Local).AddTicks(3026));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("6405741c-3afb-4584-8aa6-2808de4dd51e");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("6f3ac5db-30e3-497c-8173-e87ab56f8559");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityCategory = "Unknown",
                            ActivityName = "voluptatem",
                            CreatedDate = new DateTime(2010, 10, 26, 18, 18, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "2bae8c4f-0354-47e7-a87d-74c7ee57591c",
                            CreatedIPAddress = "51.44.131.126",
                            Description = "Internal Station system-worthy Officer Program solid state Legacy Realigned",
                            EndDate = new DateTime(2014, 6, 26, 22, 57, 50, 0, DateTimeKind.Unspecified),
                            Guid = "a5e53470-3cac-479e-a71f-97c074339b59",
                            IsUpdated = "No",
                            RegionId = 3,
                            StartDate = new DateTime(2014, 6, 26, 14, 57, 50, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 2,
                            ActivityCategory = "Diving",
                            ActivityName = "quasi",
                            CreatedDate = new DateTime(2006, 1, 23, 3, 50, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "f75115fa-6739-460b-bc0d-7711737092e9",
                            CreatedIPAddress = "142.133.40.28",
                            Description = "Total Fantastic Fresh Computer generating strategize SDD Coordinator payment e-business",
                            EndDate = new DateTime(2014, 11, 2, 19, 21, 16, 0, DateTimeKind.Unspecified),
                            Guid = "50d22213-2836-41b1-bb6b-71c75f2716b2",
                            IsUpdated = "No",
                            RegionId = 2,
                            StartDate = new DateTime(2014, 11, 2, 10, 21, 16, 0, DateTimeKind.Unspecified),
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            ActivityCategory = "AncientCity",
                            ActivityName = "maxime",
                            CreatedDate = new DateTime(2012, 1, 25, 2, 9, 23, 0, DateTimeKind.Unspecified),
                            CreatedID = "08f0f73e-e4f4-4613-a8be-d786de1a4070",
                            CreatedIPAddress = "218.153.165.73",
                            Description = "compelling Buckinghamshire Wallis and Futuna Borders back-end Personal Loan Account Louisiana cultivate",
                            EndDate = new DateTime(2014, 2, 16, 11, 57, 20, 0, DateTimeKind.Unspecified),
                            Guid = "41a8876b-c9b3-452b-b02e-797aac8d2255",
                            IsUpdated = "No",
                            RegionId = 1,
                            StartDate = new DateTime(2014, 2, 16, 3, 57, 20, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            ActivityCategory = "BBQ_Camping",
                            ActivityName = "dolor",
                            CreatedDate = new DateTime(2001, 8, 15, 17, 57, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "a6c9c307-33e9-46d8-a5a7-03af23f10b01",
                            CreatedIPAddress = "146.126.118.103",
                            Description = "magenta Accounts parsing Dam Web purple Uzbekistan Sum India",
                            EndDate = new DateTime(2001, 9, 12, 13, 48, 24, 0, DateTimeKind.Unspecified),
                            Guid = "70c5bc44-bae9-49ab-879f-11969458fee6",
                            IsUpdated = "No",
                            RegionId = 5,
                            StartDate = new DateTime(2001, 9, 12, 5, 48, 24, 0, DateTimeKind.Unspecified),
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            ActivityCategory = "Museum",
                            ActivityName = "dolorem",
                            CreatedDate = new DateTime(2007, 7, 13, 7, 56, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "66ffdebf-23f0-47ad-bf2a-32670165bb01",
                            CreatedIPAddress = "215.247.135.115",
                            Description = "deposit Fantastic Fresh Shirt Borders Russian Ruble Focused calculating Burundi Franc invoice",
                            EndDate = new DateTime(2005, 5, 12, 1, 21, 15, 0, DateTimeKind.Unspecified),
                            Guid = "d0e2aa1c-63f8-487f-986b-60a4dcf97f70",
                            IsUpdated = "No",
                            RegionId = 5,
                            StartDate = new DateTime(2005, 5, 11, 13, 21, 15, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcceptTickets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 941, DateTimeKind.Local).AddTicks(7717));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8ddc1671-90fc-431c-9da0-118f8403d514");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("54598841-3538-4539-89d7-ad3ecff1c764");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PartnerCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptTickets = "No",
                            Address = "812 Julianne Mill, East Merl, Uganda",
                            Balance = -11991.937041239220000m,
                            CompanyName = "Morissette, Schuppe and Considine LLC",
                            ContactName = "Sim Littel",
                            ContactTitle = "Customer Assurance Officer",
                            CreatedDate = new DateTime(2011, 4, 8, 15, 48, 9, 0, DateTimeKind.Unspecified),
                            CreatedID = "f5245790-d448-4ffe-b360-0d27326aff38",
                            CreatedIPAddress = "149.219.52.59",
                            Credit = 69130.412868960640000m,
                            Debit = 57138.475827721420000m,
                            Email = "Katlynn64@hotmail.com",
                            Guid = "a9b89e63-e19a-4589-9e25-ded22f4a6727",
                            IsUpdated = "Yes",
                            PhoneNumber = "02175582811",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            AcceptTickets = "No",
                            Address = "8239 Simone Plains, New Ebba, Qatar",
                            Balance = 48409.380021702060000m,
                            CompanyName = "Reichert, Predovic and Treutel Group",
                            ContactName = "Emanuel Bechtelar",
                            ContactTitle = "Global Program Liaison",
                            CreatedDate = new DateTime(2009, 8, 9, 5, 39, 53, 0, DateTimeKind.Unspecified),
                            CreatedID = "a6181260-5602-4178-b089-9427189a1b1b",
                            CreatedIPAddress = "68.109.171.136",
                            Credit = 20655.367191023680000m,
                            Debit = 69064.747212725740000m,
                            Email = "Sterling_McGlynn@gmail.com",
                            Guid = "86983d3d-1c23-416e-b7d9-dcff4ec10bef",
                            IsUpdated = "No",
                            PhoneNumber = "02191901008",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            AcceptTickets = "Yes",
                            Address = "869 Hand Throughway, New Mollieport, Cook Islands",
                            Balance = 10492.7587343530740000m,
                            CompanyName = "Torp, Hudson and Cummerata Inc",
                            ContactName = "Leopoldo Ullrich",
                            ContactTitle = "Forward Integration Director",
                            CreatedDate = new DateTime(2002, 2, 26, 21, 32, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "f1959cc8-662f-4299-9b4c-bab22ce00707",
                            CreatedIPAddress = "152.153.252.62",
                            Credit = 17744.6421170955460000m,
                            Debit = 28237.400851448620000m,
                            Email = "Jedidiah.Walsh82@gmail.com",
                            Guid = "bcd6d9fd-069c-4f2d-ba5d-9a16bcdd0a91",
                            IsUpdated = "No",
                            PhoneNumber = "02121794285",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            AcceptTickets = "Yes",
                            Address = "170 Randy Landing, Hackettton, Guinea",
                            Balance = -36213.413909772780000m,
                            CompanyName = "Williamson, Zemlak and Parker LLC",
                            ContactName = "Hanna Hegmann",
                            ContactTitle = "Future Interactions Associate",
                            CreatedDate = new DateTime(2015, 9, 13, 1, 50, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "13c62166-9600-48b3-a565-a0ad92eb9b84",
                            CreatedIPAddress = "38.64.36.93",
                            Credit = 72828.639651628090000m,
                            Debit = 36615.225741855310000m,
                            Email = "Flavio_Green55@gmail.com",
                            Guid = "9904cc6d-7240-49e1-a52c-198b28c3409c",
                            IsUpdated = "No",
                            PhoneNumber = "02172782394",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            AcceptTickets = "No",
                            Address = "0309 Keebler Loaf, Nealfurt, Spain",
                            Balance = -15900.722905958280000m,
                            CompanyName = "Strosin, Langworth and Gutmann Group",
                            ContactName = "Rodger Upton",
                            ContactTitle = "Principal Tactics Architect",
                            CreatedDate = new DateTime(2011, 9, 9, 8, 10, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "92a3e21c-1f8e-4a42-b355-8b2c9d95ff53",
                            CreatedIPAddress = "168.104.70.93",
                            Credit = 81916.226584519240000m,
                            Debit = 66015.503678560960000m,
                            Email = "Thea.Daniel0@hotmail.com",
                            Guid = "17d74f12-5bd3-4646-b56b-f98635d1ca41",
                            IsUpdated = "No",
                            PhoneNumber = "02176828220",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 943, DateTimeKind.Local).AddTicks(2650));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0fa7f551-077e-40a1-8f08-c04580f30ba1");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("faa89186-8e1d-4e0d-984d-d1c1c28a6cd8");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyId");

                    b.ToTable("PartnerCompanyTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2003, 7, 17, 16, 15, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "2b11a78c-3247-46fb-93a5-48f35f121c06",
                            CreatedIPAddress = "249.22.163.17",
                            Guid = "2f12a044-46ed-423b-867e-001b2b541588",
                            IsUpdated = "No",
                            PartnerCompanyId = 3,
                            Status = "Unknown",
                            TotalCost = 13427.556303740732000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 6, 19, 15, 20, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "2fa50815-0300-4b6a-af20-4a496e057517",
                            CreatedIPAddress = "106.183.68.37",
                            Guid = "5522f58c-96d6-47e1-92ef-59eb1baa8ec2",
                            IsUpdated = "No",
                            PartnerCompanyId = 3,
                            Status = "Passive",
                            TotalCost = 2857.918206247824000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2013, 6, 14, 20, 16, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "a1f74c11-e6fd-4dcf-87c8-ba89bdfd3326",
                            CreatedIPAddress = "34.197.117.250",
                            Guid = "dbb52404-4947-49c6-a6e7-d8f203245335",
                            IsUpdated = "No",
                            PartnerCompanyId = 1,
                            Status = "Active",
                            TotalCost = 13398.857030857024000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2003, 4, 5, 6, 21, 15, 0, DateTimeKind.Unspecified),
                            CreatedID = "217020f9-27fa-405c-9c36-e6192c3c77b1",
                            CreatedIPAddress = "97.15.23.31",
                            Guid = "f0fb805a-bf15-4f89-ba1c-9229487f221a",
                            IsUpdated = "No",
                            PartnerCompanyId = 2,
                            Status = "Active",
                            TotalCost = 12270.261896396832000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2014, 8, 2, 1, 12, 17, 0, DateTimeKind.Unspecified),
                            CreatedID = "36179a48-e8ad-4f20-991f-0514b4bc0839",
                            CreatedIPAddress = "59.49.176.150",
                            Guid = "720bb6de-7c16-430e-a12c-636104c608ea",
                            IsUpdated = "No",
                            PartnerCompanyId = 4,
                            Status = "Unknown",
                            TotalCost = 9319.765671217490000m,
                            Type = "Sale"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 947, DateTimeKind.Local).AddTicks(1784));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3a385473-9a07-4fb4-904f-1906c959c5e1");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c09d4a16-5fd7-44c7-9c32-4b1a42923814");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RentalVehicleSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "872 Trudie Heights, Erdmanburgh, Jersey",
                            CompanyName = "Balistreri - Will Group",
                            ContactName = "Elinore Lesch",
                            ContactTitle = "District Infrastructure Associate",
                            CreatedDate = new DateTime(2013, 5, 25, 8, 39, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "cf0d41da-1085-4fbc-a50d-47129fdb96e8",
                            CreatedIPAddress = "207.16.147.234",
                            Email = "Ron.Gibson@gmail.com",
                            Guid = "eb058fd4-45f8-4007-956a-dd5cb80b139a",
                            IsUpdated = "No",
                            PhoneNumber = "02158118592",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Address = "54603 Aryanna Branch, Mervinview, Northern Mariana Islands",
                            CompanyName = "Rodriguez, Fahey and Kshlerin Group",
                            ContactName = "Maxine Swift",
                            ContactTitle = "Chief Research Developer",
                            CreatedDate = new DateTime(2001, 5, 7, 21, 59, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "ffae9207-936a-4d96-b12f-336a98093c96",
                            CreatedIPAddress = "149.46.4.192",
                            Email = "Clinton31@gmail.com",
                            Guid = "3348966e-527e-4d6a-9874-86a0d11c9c11",
                            IsUpdated = "No",
                            PhoneNumber = "02170072054",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Address = "109 Carroll Landing, Rodolfoborough, Turks and Caicos Islands",
                            CompanyName = "Emmerich and Sons Inc",
                            ContactName = "Dean Stehr",
                            ContactTitle = "Dynamic Brand Assistant",
                            CreatedDate = new DateTime(2020, 5, 1, 12, 24, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "1ade3610-a5c3-40b7-9b1e-05846456cd0b",
                            CreatedIPAddress = "151.247.174.216",
                            Email = "Hilda.Kohler@hotmail.com",
                            Guid = "8cf28e07-a097-4f50-b9a4-8af8f8a6cc03",
                            IsUpdated = "No",
                            PhoneNumber = "02197907379",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Address = "71088 Adrienne Station, North Velvaside, Antarctica (the territory South of 60 deg S)",
                            CompanyName = "Block - Mante and Sons",
                            ContactName = "Eudora Johnson",
                            ContactTitle = "Customer Implementation Manager",
                            CreatedDate = new DateTime(2005, 4, 2, 21, 36, 43, 0, DateTimeKind.Unspecified),
                            CreatedID = "9b850f93-78bc-49bf-ad84-ef2190d4a40d",
                            CreatedIPAddress = "130.73.53.204",
                            Email = "Vickie.McCullough@yahoo.com",
                            Guid = "d86028e7-3716-49ba-be49-331354b130ab",
                            IsUpdated = "No",
                            PhoneNumber = "02151701012",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            Address = "84382 Lind Club, West Bria, Greece",
                            CompanyName = "Prohaska LLC Group",
                            ContactName = "Joyce Barrows",
                            ContactTitle = "Investor Program Officer",
                            CreatedDate = new DateTime(2003, 3, 8, 9, 24, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "1de8d9ad-3ece-46d7-a63b-6a9b70abee2d",
                            CreatedIPAddress = "71.228.57.138",
                            Email = "Clinton_Parker@hotmail.com",
                            Guid = "4527116e-73f6-4bc9-8cbb-ca73bd987700",
                            IsUpdated = "No",
                            PhoneNumber = "02133372717",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 948, DateTimeKind.Local).AddTicks(6633));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("016b2f1a-f4b5-4dfe-b71e-7d342c12687f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b1552cf8-26c7-4e44-9bdf-f52eb27950ad");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SubContractWorkerSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "8118 Hahn Circles, Raybury, Iceland",
                            CompanyName = "Jenkins, Glover and Conroy Group",
                            ContactName = "Ewell Christiansen",
                            ContactTitle = "Chief Quality Technician",
                            CreatedDate = new DateTime(2015, 8, 3, 5, 12, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "cfc0e29a-2105-421d-955b-795e201b5bc5",
                            CreatedIPAddress = "22.210.60.242",
                            Email = "Dino_McKenzie@yahoo.com",
                            Guid = "5c747b3a-5cb7-48b5-8faf-66f7dbc3fa80",
                            IsUpdated = "No",
                            PhoneNumber = "02119437411",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Address = "75092 Kacey Key, South Raphaelle, Pitcairn Islands",
                            CompanyName = "Bergstrom, Bashirian and Gusikowski LLC",
                            ContactName = "Tia Gleichner",
                            ContactTitle = "Future Group Architect",
                            CreatedDate = new DateTime(2012, 10, 9, 15, 58, 44, 0, DateTimeKind.Unspecified),
                            CreatedID = "4dfc18e2-09e2-475d-8143-6b31eeb59242",
                            CreatedIPAddress = "53.238.141.19",
                            Email = "Abel_Von98@yahoo.com",
                            Guid = "a2030525-a55b-44a4-81c2-419115b899ce",
                            IsUpdated = "No",
                            PhoneNumber = "02165580836",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0077 Dare Dam, Kesslertown, Tuvalu",
                            CompanyName = "Cartwright - Larson Inc",
                            ContactName = "Lyda Lowe",
                            ContactTitle = "Dynamic Solutions Producer",
                            CreatedDate = new DateTime(2004, 6, 26, 2, 53, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "56a803b8-141a-47db-a808-e5c142cb8f67",
                            CreatedIPAddress = "93.225.8.3",
                            Email = "Christophe_Funk16@yahoo.com",
                            Guid = "52a427ea-df8f-48c9-a3e5-bed6e819a3d2",
                            IsUpdated = "Yes",
                            PhoneNumber = "02126049614",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            Address = "266 Liam Forge, Isacshire, Guam",
                            CompanyName = "Cummerata - Lueilwitz LLC",
                            ContactName = "Gaylord Towne",
                            ContactTitle = "Internal Creative Representative",
                            CreatedDate = new DateTime(2014, 10, 6, 13, 45, 43, 0, DateTimeKind.Unspecified),
                            CreatedID = "ba1f1d1f-da20-4f65-8707-14dcac3c301f",
                            CreatedIPAddress = "95.255.25.42",
                            Email = "Alba_Williamson15@hotmail.com",
                            Guid = "e42d61aa-af03-451b-9982-a1aea0a8f149",
                            IsUpdated = "No",
                            PhoneNumber = "02192357526",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "10804 Mike Centers, New Shanieberg, Namibia",
                            CompanyName = "Stracke and Sons Group",
                            ContactName = "Jeffrey Runolfsdottir",
                            ContactTitle = "Legacy Mobility Developer",
                            CreatedDate = new DateTime(2016, 1, 9, 2, 14, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "3a7daa33-0df1-4049-a3a5-b0768159e178",
                            CreatedIPAddress = "134.37.155.239",
                            Email = "Will_Weimann@hotmail.com",
                            Guid = "aa89caa0-4cd6-475c-8413-4509521da2d7",
                            IsUpdated = "No",
                            PhoneNumber = "02147802341",
                            Status = "Unknown"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 950, DateTimeKind.Local).AddTicks(1781));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0c49896d-ae04-4b61-a70c-c8cdebff95ac");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("fba8120b-fd74-4d81-b58f-07c68d007968");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = "SouthAmerica",
                            CountryCode = "TR",
                            CountryDescription = "Excepturi fugiat molestiae voluptas ut perferendis.",
                            CountryName = "Turkey",
                            CountryPhone = "+90",
                            CreatedDate = new DateTime(2014, 9, 26, 10, 16, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "01a48e92-48eb-42c4-8754-1227b2b5359d",
                            CreatedIPAddress = "230.121.200.170",
                            Guid = "14a5d4a0-807d-40f8-9c90-395f48b8203f",
                            IsUpdated = "No",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 2,
                            Continent = "Australia",
                            CountryCode = "RU",
                            CountryDescription = "Rerum placeat sint odit et voluptatem.",
                            CountryName = "Russia",
                            CountryPhone = "+7",
                            CreatedDate = new DateTime(2005, 7, 2, 12, 36, 52, 0, DateTimeKind.Unspecified),
                            CreatedID = "5ac423f0-c458-4cbc-9a66-06109ccffafe",
                            CreatedIPAddress = "240.173.15.150",
                            Guid = "dcae8653-4ece-42ea-b621-a0935b8e44ad",
                            IsUpdated = "No",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Continent = "None",
                            CountryCode = "USA",
                            CountryDescription = "Sunt aut non est enim est.",
                            CountryName = "United States of America",
                            CountryPhone = "+1",
                            CreatedDate = new DateTime(2011, 5, 10, 21, 26, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "f7725082-59e3-45e8-9544-6c2ae7379a02",
                            CreatedIPAddress = "144.140.233.46",
                            Guid = "ae4b7f2c-5c9f-4c4a-b9b5-6e0241f85246",
                            IsUpdated = "No",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Continent = "Australia",
                            CountryCode = "SA",
                            CountryDescription = "Reiciendis velit occaecati aliquam molestiae ea.",
                            CountryName = "Kingdom of Saudi Arabia",
                            CountryPhone = "+966",
                            CreatedDate = new DateTime(2016, 11, 6, 11, 38, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "18cfd02e-2ed3-419a-bb6a-4e26c4d34d9d",
                            CreatedIPAddress = "101.198.125.25",
                            Guid = "fb06dc59-6194-40e5-b730-2b0ba8b70160",
                            IsUpdated = "No",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Continent = "Europe",
                            CountryCode = "GER",
                            CountryDescription = "Ratione aut voluptate qui quos suscipit.",
                            CountryName = "Germany",
                            CountryPhone = "+49",
                            CreatedDate = new DateTime(2014, 1, 4, 10, 25, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "1356f891-d508-47f2-a76f-d15327abb17c",
                            CreatedIPAddress = "150.25.226.29",
                            Guid = "71ebf0f5-d825-4f69-b584-7b6f04e2e1cd",
                            IsUpdated = "No",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 951, DateTimeKind.Local).AddTicks(4402));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e32aff2e-28a6-4625-bdf9-dfb02a78ae3d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverLicense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("53afeadd-a546-4088-87a2-0e906c061e3e");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("ContractEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Wales",
                            Age = (byte)49,
                            BirthDate = new DateTime(1976, 1, 16, 13, 19, 20, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2019, 7, 11, 3, 23, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "069e20b9-2f52-4e7d-8dc1-2746a6293786",
                            CreatedIPAddress = "44.20.212.244",
                            DriverLicense = "ADB",
                            Email = "Lynn58@gmail.com",
                            EndContract = new DateTime(2019, 10, 26, 17, 17, 33, 0, DateTimeKind.Unspecified),
                            Experience = 1,
                            FirstName = "Louie",
                            FullName = "LouieMcDermott",
                            Gender = 0,
                            Guid = "60489144-e57f-4eb4-a600-569ac2bf6429",
                            HireDate = new DateTime(2018, 10, 26, 17, 17, 33, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Arabic",
                            LastName = "McDermott",
                            PhoneNumber = "05714504514",
                            PhotoPath = "http://ashton.info/ergonomic-steel-shoes",
                            Status = "Active",
                            SupplierId = 1,
                            TCN_Passport = "80347125796"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Northern Ireland",
                            Age = (byte)48,
                            BirthDate = new DateTime(1976, 12, 12, 22, 54, 4, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2015, 7, 19, 1, 13, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "22cdb561-576c-4424-8bbb-33a8042f1244",
                            CreatedIPAddress = "45.119.170.212",
                            DriverLicense = "B",
                            Email = "Irving_Nader@yahoo.com",
                            EndContract = new DateTime(2013, 2, 26, 13, 21, 7, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Marquis",
                            FullName = "MarquisSwaniawski",
                            Gender = 1,
                            Guid = "d178fffb-278e-42c9-a5a0-c30b34647d6c",
                            HireDate = new DateTime(2012, 2, 26, 13, 21, 7, 0, DateTimeKind.Unspecified),
                            IsUpdated = "Yes",
                            Language = "Italian",
                            LastName = "Swaniawski",
                            PhoneNumber = "05054266615",
                            PhotoPath = "https://leonard.net/small-cotton-soap",
                            Status = "Active",
                            SupplierId = 2,
                            TCN_Passport = "24059709462"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Wales",
                            Age = (byte)56,
                            BirthDate = new DateTime(1968, 9, 20, 18, 15, 14, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2007, 10, 23, 12, 37, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "bacce67e-39ad-43c3-b3da-917a0f5ed5b5",
                            CreatedIPAddress = "157.106.92.189",
                            DriverLicense = "B",
                            Email = "Thad_Hyatt@gmail.com",
                            EndContract = new DateTime(2001, 8, 20, 15, 16, 11, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Cristian",
                            FullName = "CristianMaggio",
                            Gender = 1,
                            Guid = "0505dfdc-ab7f-4057-b99a-dcff576dfcbe",
                            HireDate = new DateTime(2000, 8, 20, 15, 16, 11, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Russian",
                            LastName = "Maggio",
                            PhoneNumber = "05090716707",
                            PhotoPath = "http://rodger.biz/bypassing",
                            Status = "Unknown",
                            SupplierId = 1,
                            TCN_Passport = "61549493137"
                        },
                        new
                        {
                            Id = 4,
                            Address = "England",
                            Age = (byte)44,
                            BirthDate = new DateTime(1980, 8, 26, 9, 53, 50, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2000, 12, 3, 3, 8, 41, 0, DateTimeKind.Unspecified),
                            CreatedID = "e5b33bd2-df50-4100-a715-622f199db594",
                            CreatedIPAddress = "16.174.250.140",
                            DriverLicense = "None",
                            Email = "Garfield21@gmail.com",
                            EndContract = new DateTime(2004, 9, 7, 11, 23, 38, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Grover",
                            FullName = "GroverMarks",
                            Gender = 2,
                            Guid = "c1ac4746-54d4-473e-a6d9-ef5ed320c644",
                            HireDate = new DateTime(2003, 9, 7, 11, 23, 38, 0, DateTimeKind.Unspecified),
                            IsUpdated = "Yes",
                            Language = "Russian",
                            LastName = "Marks",
                            PhoneNumber = "05266872239",
                            PhotoPath = "http://clint.net/deliver/guatemala/grey",
                            Status = "Passive",
                            SupplierId = 3,
                            TCN_Passport = "59720158012"
                        },
                        new
                        {
                            Id = 5,
                            Address = "England",
                            Age = (byte)58,
                            BirthDate = new DateTime(1966, 11, 14, 3, 26, 33, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2008, 6, 20, 3, 27, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "3bfd0ac2-082e-4375-85b5-664f9c5449b7",
                            CreatedIPAddress = "230.224.165.206",
                            DriverLicense = "ADB",
                            Email = "Giovani_Borer71@hotmail.com",
                            EndContract = new DateTime(2007, 11, 2, 22, 28, 21, 0, DateTimeKind.Unspecified),
                            Experience = 1,
                            FirstName = "Rogelio",
                            FullName = "RogelioDeckow",
                            Gender = 1,
                            Guid = "0da7784f-0537-42ac-b510-108f0a72c831",
                            HireDate = new DateTime(2006, 11, 2, 22, 28, 21, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Arabic",
                            LastName = "Deckow",
                            PhoneNumber = "05972298346",
                            PhotoPath = "http://marianna.org/benchmark",
                            Status = "Passive",
                            SupplierId = 2,
                            TCN_Passport = "20594778668"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("ContractCount")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 952, DateTimeKind.Local).AddTicks(6995));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("def3233b-3d49-43e2-b030-5fd61b0d360f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("DaysWorked")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("92e8f0b9-105a-432f-ae37-0514f76ece4f");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Northern Ireland",
                            Age = (byte)49,
                            BirthDate = new DateTime(1975, 11, 26, 21, 49, 27, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 4,
                            CreatedDate = new DateTime(2007, 5, 18, 2, 21, 7, 0, DateTimeKind.Unspecified),
                            CreatedID = "f172f055-7b22-4bc3-b1b7-dba302404b6f",
                            CreatedIPAddress = "175.41.176.88",
                            CurrentPosition = "Consulting",
                            DaysWorked = 3366,
                            Email = "Sienna_Crona82@gmail.com",
                            EndContract = new DateTime(2028, 2, 26, 14, 44, 21, 0, DateTimeKind.Unspecified),
                            Experience = 16,
                            FirstName = "Eleonore",
                            FullName = "EleonoreMarks",
                            Gender = "Unknown",
                            Guid = "3a909c5b-0b72-48b1-b98b-1b46229fc94a",
                            HireDate = new DateTime(2016, 2, 26, 14, 44, 21, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Marks",
                            PhoneNumber = "05638321243",
                            PhotoPath = "http://lonie.org/internet-solution/salmon",
                            Status = "Passive",
                            TCN_Passport = "56417732072"
                        },
                        new
                        {
                            Id = 2,
                            Address = "England",
                            Age = (byte)61,
                            BirthDate = new DateTime(1964, 3, 5, 10, 34, 39, 0, DateTimeKind.Unspecified),
                            ContractCount = 8,
                            CountryId = 1,
                            CreatedDate = new DateTime(2010, 12, 12, 12, 59, 14, 0, DateTimeKind.Unspecified),
                            CreatedID = "8a45b8c7-3318-4fb7-bf92-609a6c9d1cad",
                            CreatedIPAddress = "114.20.179.249",
                            CurrentPosition = "IT",
                            DaysWorked = 8002,
                            Email = "Marianna_Upton@gmail.com",
                            EndContract = new DateTime(2027, 6, 18, 9, 23, 43, 0, DateTimeKind.Unspecified),
                            Experience = 17,
                            FirstName = "Nya",
                            FullName = "NyaMurray",
                            Gender = "Unknown",
                            Guid = "f5e07b0a-cd5c-42d4-b4be-847fce24d8da",
                            HireDate = new DateTime(2003, 6, 18, 9, 23, 43, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Murray",
                            PhoneNumber = "05952191828",
                            PhotoPath = "http://helga.net/metrics/intuitive",
                            Status = "Unknown",
                            TCN_Passport = "05661491366"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Wales",
                            Age = (byte)53,
                            BirthDate = new DateTime(1971, 9, 20, 17, 8, 29, 0, DateTimeKind.Unspecified),
                            ContractCount = 3,
                            CountryId = 5,
                            CreatedDate = new DateTime(2010, 1, 16, 17, 37, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "7e8d8135-8286-4e19-87e8-3ec47d47dd27",
                            CreatedIPAddress = "92.58.114.145",
                            CurrentPosition = "Marketing",
                            DaysWorked = 2100,
                            Email = "Dillon.Lindgren47@gmail.com",
                            EndContract = new DateTime(2028, 8, 15, 17, 26, 47, 0, DateTimeKind.Unspecified),
                            Experience = 14,
                            FirstName = "Mose",
                            FullName = "MoseKlein",
                            Gender = "Female",
                            Guid = "e715e276-3114-4b18-8f2c-3800479b246c",
                            HireDate = new DateTime(2019, 8, 15, 17, 26, 47, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Klein",
                            PhoneNumber = "05132900767",
                            PhotoPath = "http://grady.name/florida/track",
                            Status = "Passive",
                            TCN_Passport = "00896199908"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Northern Ireland",
                            Age = (byte)46,
                            BirthDate = new DateTime(1978, 6, 11, 7, 44, 20, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 2,
                            CreatedDate = new DateTime(2008, 2, 26, 21, 14, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "f89f3419-6792-46c9-b2e3-df718bc89ed4",
                            CreatedIPAddress = "230.190.203.161",
                            CurrentPosition = "IT",
                            DaysWorked = 3098,
                            Email = "Mose90@yahoo.com",
                            EndContract = new DateTime(2028, 11, 20, 5, 25, 32, 0, DateTimeKind.Unspecified),
                            Experience = 7,
                            FirstName = "Katrina",
                            FullName = "KatrinaSchowalter",
                            Gender = "Female",
                            Guid = "24b171aa-f614-4cb9-b504-0cf4620d7513",
                            HireDate = new DateTime(2016, 11, 20, 5, 25, 32, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Schowalter",
                            PhoneNumber = "05245276329",
                            PhotoPath = "https://lily.biz/open-system/michigan",
                            Status = "Active",
                            TCN_Passport = "54930211866"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Wales",
                            Age = (byte)51,
                            BirthDate = new DateTime(1974, 3, 2, 19, 17, 24, 0, DateTimeKind.Unspecified),
                            ContractCount = 8,
                            CountryId = 1,
                            CreatedDate = new DateTime(2001, 4, 14, 9, 38, 4, 0, DateTimeKind.Unspecified),
                            CreatedID = "5c1b9e97-0373-4726-ae98-b9cbdfdbf07d",
                            CreatedIPAddress = "219.104.197.131",
                            CurrentPosition = "Operations",
                            DaysWorked = 8055,
                            Email = "Jesus32@yahoo.com",
                            EndContract = new DateTime(2027, 4, 26, 22, 36, 21, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Ava",
                            FullName = "AvaOrtiz",
                            Gender = "Female",
                            Guid = "b3f8b2cc-386d-4ae1-b9f1-1735069c35e3",
                            HireDate = new DateTime(2003, 4, 26, 22, 36, 21, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Ortiz",
                            PhoneNumber = "05695798515",
                            PhotoPath = "https://deangelo.net/movies-movies--clothing/hawaii/producer",
                            Status = "Active",
                            TCN_Passport = "78695256137"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ActivityTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityTicketOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 957, DateTimeKind.Local).AddTicks(2095));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("be0cf1f5-baac-4882-86b7-240066c08c3e");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("aff252dd-95eb-43b6-b9be-5ca98e22ec77");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTicketId");

                    b.HasIndex("ActivityTicketOrderId");

                    b.ToTable("ActivityTicketOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTicketId = 1,
                            ActivityTicketOrderId = 1,
                            CreatedDate = new DateTime(2011, 3, 9, 22, 52, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "6ab9bb76-6df9-40b3-8758-46a13d529f4e",
                            CreatedIPAddress = "65.42.104.97",
                            Discount = 0.4739123568124565m,
                            Guid = "d33aaf36-bb9d-4deb-9974-216a70d86370",
                            IsUpdated = "Yes",
                            Quantity = 2,
                            Status = "Unknown",
                            TotalCost = 388.74025414899908675690512479m,
                            UnitPrice = 369.463395674566500m
                        },
                        new
                        {
                            Id = 2,
                            ActivityTicketId = 5,
                            ActivityTicketOrderId = 1,
                            CreatedDate = new DateTime(2001, 12, 24, 16, 9, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "6c9bcc59-2cc2-4e09-9030-edad103b8be5",
                            CreatedIPAddress = "200.72.35.79",
                            Discount = 0.3620037562933360m,
                            Guid = "9fd59f4e-11eb-4312-986c-5074e02054ac",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Active",
                            TotalCost = 736.94098527119732550649210151m,
                            UnitPrice = 1155.086714914932700m
                        },
                        new
                        {
                            Id = 3,
                            ActivityTicketId = 3,
                            ActivityTicketOrderId = 3,
                            CreatedDate = new DateTime(2013, 4, 9, 2, 59, 2, 0, DateTimeKind.Unspecified),
                            CreatedID = "96eeb627-28c3-48b8-b0e3-750fe81d6210",
                            CreatedIPAddress = "15.206.30.139",
                            Discount = 0.01487695176009890m,
                            Guid = "b645abab-52b6-426c-ac14-be41c5bd7d4a",
                            IsUpdated = "No",
                            Quantity = 4,
                            Status = "Active",
                            TotalCost = 2644.6521371431787376486117185m,
                            UnitPrice = 671.147665732804600m
                        },
                        new
                        {
                            Id = 4,
                            ActivityTicketId = 1,
                            ActivityTicketOrderId = 2,
                            CreatedDate = new DateTime(2016, 12, 23, 20, 33, 9, 0, DateTimeKind.Unspecified),
                            CreatedID = "0fc2a3dd-a146-444e-b692-46f05dfa0347",
                            CreatedIPAddress = "54.25.135.121",
                            Discount = 0.292987187736360m,
                            Guid = "5b54ac6b-8676-45ff-8805-35b393e5baab",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Passive",
                            TotalCost = 724.37815419229124163802340987m,
                            UnitPrice = 1024.561566109463700m
                        },
                        new
                        {
                            Id = 5,
                            ActivityTicketId = 1,
                            ActivityTicketOrderId = 1,
                            CreatedDate = new DateTime(2016, 8, 15, 14, 8, 17, 0, DateTimeKind.Unspecified),
                            CreatedID = "5f6c9729-35b7-49ec-b609-3263f4bbcf1b",
                            CreatedIPAddress = "96.153.16.2",
                            Discount = 0.3251739613777990m,
                            Guid = "57fae033-5dbd-4d40-a552-c7150e1414a3",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Unknown",
                            TotalCost = 504.19002002696754103666290545m,
                            UnitPrice = 747.140731345188300m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 958, DateTimeKind.Local).AddTicks(6219));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("96239f8a-0dac-4c6d-8aca-3aa4181a4c57");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("db619b49-c1c2-457f-a1ad-a32bb3c9da32");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("ActivityTicketOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2017, 6, 20, 23, 14, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "de8fcb41-d040-48e7-a0e5-b7e9edbea8a0",
                            CreatedIPAddress = "37.45.235.37",
                            EmployeeId = 3,
                            Guid = "941838b7-89b6-4eb9-a0c8-2f26bc19f3bc",
                            IsUpdated = "Yes",
                            Note = "backing up RSS Gorgeous Rubber Towels Utah",
                            Status = "Passive",
                            WebUserAccountId = 2,
                            WebUserEmail = "Lizeth.Wuckert77@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2017, 6, 2, 3, 41, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "ab4688a6-61a3-49bd-b5d1-cbd41aa7d6a9",
                            CreatedIPAddress = "70.1.193.244",
                            EmployeeId = 5,
                            Guid = "a7b5fc59-8f3b-4406-a3cd-c7dd4f42e3df",
                            IsUpdated = "Yes",
                            Note = "unleash Horizontal Cambridgeshire web-enabled",
                            Status = "Active",
                            WebUserAccountId = 1,
                            WebUserEmail = "Stewart22@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2004, 3, 22, 15, 18, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "59547d1e-e1d5-43de-bd27-88d77a1fc470",
                            CreatedIPAddress = "78.80.153.13",
                            EmployeeId = 5,
                            Guid = "7dc12de3-7c41-4bd6-ac95-4fbaa39e9708",
                            IsUpdated = "Yes",
                            Note = "online Refined Frozen Sausages Northern Mariana Islands Tools & Sports",
                            Status = "Unknown",
                            WebUserAccountId = 5,
                            WebUserEmail = "Trey.Haley@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2001, 5, 19, 2, 45, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "88179b4e-1dd1-4e74-a371-4c6427764b86",
                            CreatedIPAddress = "114.42.74.9",
                            EmployeeId = 4,
                            Guid = "87fac73d-492d-4682-a161-75311dfbb799",
                            IsUpdated = "No",
                            Note = "Facilitator Fort SMTP array",
                            Status = "Unknown",
                            WebUserAccountId = 4,
                            WebUserEmail = "David_West97@hotmail.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2001, 12, 6, 22, 27, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "bbd39932-bdc1-4854-b35d-38ed81b188c4",
                            CreatedIPAddress = "152.81.169.247",
                            EmployeeId = 5,
                            Guid = "296358bb-6295-4a2e-9a99-24888a0ab455",
                            IsUpdated = "No",
                            Note = "Orchestrator Michigan Intelligent Plastic Pants Berkshire",
                            Status = "Unknown",
                            WebUserAccountId = 4,
                            WebUserEmail = "Lelah14@hotmail.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.ActivityPassTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 960, DateTimeKind.Local).AddTicks(69));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1720b87f-a77f-4063-bdb6-268fe43c1862");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0893f6b4-300a-42d5-bff9-1c74be26353f");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("ActivityPassTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionRate = (byte)20,
                            CreatedDate = new DateTime(2020, 8, 17, 6, 24, 41, 0, DateTimeKind.Unspecified),
                            CreatedID = "c02da8cc-7e95-4dc8-bb70-b5ae1cdfeebc",
                            CreatedIPAddress = "170.44.47.1",
                            Guid = "ef8af093-a413-4a54-b2fb-ecc69d8d3d48",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 3,
                            Price = 199.713728099778880m,
                            Status = "Passive",
                            TotalCostwithCommission = 239.656473719734656m
                        },
                        new
                        {
                            Id = 2,
                            CommissionRate = (byte)9,
                            CreatedDate = new DateTime(2018, 8, 10, 23, 47, 2, 0, DateTimeKind.Unspecified),
                            CreatedID = "92b4e568-1a91-4266-90de-4bd08d4379b9",
                            CreatedIPAddress = "216.249.7.61",
                            Guid = "48af16a5-1c02-41c5-94d8-4f92770b8820",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 2,
                            Price = 293.858518437168960m,
                            Status = "Unknown",
                            TotalCostwithCommission = 320.3057850965141664m
                        },
                        new
                        {
                            Id = 3,
                            CommissionRate = (byte)13,
                            CreatedDate = new DateTime(2011, 11, 23, 19, 19, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "ed951c27-6f54-4d74-8c5e-d4a3355347b9",
                            CreatedIPAddress = "131.18.10.118",
                            Guid = "fd0dbc8d-11cb-4b86-8124-abc6492bd019",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 5,
                            Price = 209.520969039443840m,
                            Status = "Unknown",
                            TotalCostwithCommission = 236.7586950145715392m
                        },
                        new
                        {
                            Id = 4,
                            CommissionRate = (byte)17,
                            CreatedDate = new DateTime(2006, 3, 7, 23, 39, 53, 0, DateTimeKind.Unspecified),
                            CreatedID = "80491ee7-d592-472d-a67e-581a845ad60a",
                            CreatedIPAddress = "130.28.77.3",
                            Guid = "afa8e85c-ec9b-469c-9582-48e202fd9ea0",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 4,
                            Price = 315.615016446602240m,
                            Status = "Passive",
                            TotalCostwithCommission = 369.2695692425246208m
                        },
                        new
                        {
                            Id = 5,
                            CommissionRate = (byte)10,
                            CreatedDate = new DateTime(2016, 1, 13, 3, 54, 2, 0, DateTimeKind.Unspecified),
                            CreatedID = "852285ba-075d-4488-a423-8e773a0bee7a",
                            CreatedIPAddress = "183.245.243.22",
                            Guid = "c349aff3-802a-4707-bb7e-911c5a8870a6",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 3,
                            Price = 204.130700889027520m,
                            Status = "Passive",
                            TotalCostwithCommission = 224.543770977930272m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 961, DateTimeKind.Local).AddTicks(6525));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4aaadc2d-58e3-40cb-96ad-8e931e8f9147");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a19be872-ee98-42ba-9697-6c89caf97e35");

                    b.Property<string>("HasAirport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasHotelFacility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TouristPopulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportVehicle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new TimeSpan(0, 2, 24, 0, 0),
                            CreatedDate = new DateTime(2004, 12, 17, 22, 30, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "c3f3f0d1-e050-4e20-8088-35162c7a13ab",
                            CreatedIPAddress = "152.79.191.215",
                            DistrictName = "aut",
                            Guid = "60ba21dc-de83-4f4d-b21e-9c3ecf8dd392",
                            HasAirport = "No",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "Yes",
                            TransportVehicle = 2
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new TimeSpan(0, 0, 55, 0, 0),
                            CreatedDate = new DateTime(2019, 8, 8, 22, 31, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "d6194ac1-2c09-4e01-9b45-13527b6d2051",
                            CreatedIPAddress = "32.112.16.131",
                            DistrictName = "cumque",
                            Guid = "5fe208f4-7d15-44ee-9730-c73d20e662fb",
                            HasAirport = "Yes",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "No",
                            TransportVehicle = 3
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new TimeSpan(0, 2, 25, 0, 0),
                            CreatedDate = new DateTime(2006, 9, 23, 13, 34, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "5eebede7-1bde-4365-b102-e0cd081b0d14",
                            CreatedIPAddress = "150.143.211.189",
                            DistrictName = "illum",
                            Guid = "f9b75f1a-6e78-41c5-b9dd-157a76fb9e5a",
                            HasAirport = "No",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "No",
                            TransportVehicle = 5
                        },
                        new
                        {
                            Id = 4,
                            ArrivalTime = new TimeSpan(0, 0, 57, 0, 0),
                            CreatedDate = new DateTime(2014, 10, 16, 5, 59, 19, 0, DateTimeKind.Unspecified),
                            CreatedID = "3e4839ea-39ff-48a7-a593-759a0d41bb87",
                            CreatedIPAddress = "77.164.162.196",
                            DistrictName = "consequatur",
                            Guid = "08ae4f8d-2e1e-4b4c-a8f4-33746296b434",
                            HasAirport = "Yes",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "Yes",
                            TransportVehicle = 0
                        },
                        new
                        {
                            Id = 5,
                            ArrivalTime = new TimeSpan(0, 2, 48, 0, 0),
                            CreatedDate = new DateTime(2000, 10, 5, 3, 18, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "e49a53c5-bbca-4b88-9585-e69105cf3859",
                            CreatedIPAddress = "254.254.80.20",
                            DistrictName = "atque",
                            Guid = "90140862-399e-49be-9d9a-049799b51fd8",
                            HasAirport = "No",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "No",
                            TransportVehicle = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 963, DateTimeKind.Local).AddTicks(1092));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("32182389-93ce-47aa-81a4-c7881da2eedc");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte?>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b9e8d76c-e598-4222-810a-dbf3bb6ca513");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2012, 6, 19, 4, 32, 44, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2013, 3, 10, 20, 34, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "9264a515-fd65-46ba-a287-7cea1a1d1603",
                            CreatedIPAddress = "61.213.65.177",
                            Currency = "USD",
                            DepartureAdress = "Granite Incredible Plastic Cheese",
                            DepartureDate = new DateTime(2012, 6, 19, 1, 32, 44, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Borders British Indian Ocean Territory (Chagos Archipelago)",
                            DiscountRate = (byte)19,
                            Guid = "942d7033-78e4-44a8-9135-b31e2bb28c8e",
                            IsUpdated = "No",
                            NetCost = 232.915415593872240m,
                            PaymentStatus = "PartialPaid",
                            Price = 287.549895794904000m,
                            SeatNumber = "C245",
                            Status = "Unknown",
                            TicketHolderName = "Emilia Franecki"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2011, 2, 4, 2, 48, 23, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2002, 10, 2, 20, 26, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "d346ca82-bf89-4190-862b-2a3994d43a00",
                            CreatedIPAddress = "188.102.67.242",
                            Currency = "GBP",
                            DepartureAdress = "Sports & Outdoors Shoes, Tools & Baby",
                            DepartureDate = new DateTime(2011, 2, 3, 23, 48, 23, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "deliver Personal Loan Account",
                            DiscountRate = (byte)12,
                            Guid = "abae6ff1-9dff-4ed4-8baa-aeb327b36c58",
                            IsUpdated = "Yes",
                            NetCost = 297.269530306122880m,
                            PaymentStatus = "FullyPaid",
                            Price = 337.806284438776000m,
                            SeatNumber = "C228",
                            Status = "Active",
                            TicketHolderName = "Jude Breitenberg"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 1,
                            ArrivalDate = new DateTime(2018, 6, 27, 1, 19, 42, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2017, 1, 11, 8, 38, 27, 0, DateTimeKind.Unspecified),
                            CreatedID = "9f84c730-b833-4921-bb93-8bc1fdd701d8",
                            CreatedIPAddress = "68.163.130.173",
                            Currency = "CNY",
                            DepartureAdress = "Technician invoice",
                            DepartureDate = new DateTime(2018, 6, 26, 22, 19, 42, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Kazakhstan Intuitive",
                            DiscountRate = (byte)19,
                            Guid = "ddb825c1-6f7b-47b2-bcbf-71914897db27",
                            IsUpdated = "No",
                            NetCost = 193.2865147502542656m,
                            PaymentStatus = "PartialPaid",
                            Price = 238.625326852165760m,
                            SeatNumber = "C142",
                            Status = "Active",
                            TicketHolderName = "Amari VonRueden"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            ArrivalDate = new DateTime(2008, 11, 13, 4, 51, 44, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2016, 6, 8, 15, 30, 42, 0, DateTimeKind.Unspecified),
                            CreatedID = "c83019d3-6534-49f3-9627-6715b3184081",
                            CreatedIPAddress = "192.74.228.35",
                            Currency = "TRY",
                            DepartureAdress = "best-of-breed content-based",
                            DepartureDate = new DateTime(2008, 11, 13, 1, 51, 44, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Guinea Franc portals",
                            DiscountRate = (byte)14,
                            Guid = "dd28045b-929f-47eb-a0f0-cfc4fc4585c9",
                            IsUpdated = "No",
                            NetCost = 324.1571110089928192m,
                            PaymentStatus = "Pending",
                            Price = 376.926873266270720m,
                            SeatNumber = "A24",
                            Status = "Passive",
                            TicketHolderName = "Cristobal Schaefer"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 1,
                            ArrivalDate = new DateTime(2009, 4, 17, 19, 19, 3, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2007, 7, 13, 23, 49, 30, 0, DateTimeKind.Unspecified),
                            CreatedID = "26196a13-e743-4937-bd71-0e8ccf2b68d4",
                            CreatedIPAddress = "148.204.120.92",
                            Currency = "JPY",
                            DepartureAdress = "Village Small Fresh Mouse",
                            DepartureDate = new DateTime(2009, 4, 17, 16, 19, 3, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "bypassing Corners",
                            DiscountRate = (byte)20,
                            Guid = "bbdb2af5-cc9f-4891-8130-54f0fd57f234",
                            IsUpdated = "Yes",
                            NetCost = 159.975266216292096m,
                            PaymentStatus = "PartialPaid",
                            Price = 199.969082770365120m,
                            SeatNumber = "C171",
                            Status = "Unknown",
                            TicketHolderName = "Britney Harber"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 971, DateTimeKind.Local).AddTicks(6683));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0aaa7119-2b23-427f-ba2f-f0c2f80af1e3");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DailyRentalFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("9d73326f-f457-447d-a145-17df83322788");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalVehicleSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TotalRentalDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RentalVehicleSupplierId");

                    b.ToTable("RentalVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 4,
                            Age = 8,
                            Capacity = (short)73,
                            CreatedDate = new DateTime(2015, 12, 6, 7, 27, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "9267467a-1240-4a23-95b8-f511e02cd758",
                            CreatedIPAddress = "141.99.224.138",
                            DailyRentalFee = 6072m,
                            ExpireDate = new DateTime(2007, 12, 2, 21, 54, 28, 0, DateTimeKind.Unspecified),
                            Guid = "04d95aef-ca6f-49e7-b9b5-0994ec2222e3",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 172791,
                            LicensePlate = "70 ab 3243",
                            Model = "Focus",
                            RentalVehicleSupplierId = 3,
                            StartDate = new DateTime(2007, 12, 1, 21, 54, 28, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 6072m,
                            TotalRentalDay = 1,
                            VehicleType = "Yacht"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            Age = 15,
                            Capacity = (short)72,
                            CreatedDate = new DateTime(2009, 4, 14, 7, 23, 13, 0, DateTimeKind.Unspecified),
                            CreatedID = "76248b6b-2cf9-453a-8ca8-05e961bf69b0",
                            CreatedIPAddress = "119.197.162.116",
                            DailyRentalFee = 14601m,
                            ExpireDate = new DateTime(2011, 5, 21, 7, 35, 47, 0, DateTimeKind.Unspecified),
                            Guid = "d492aff5-52aa-408c-90ae-fbc697645612",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 322248,
                            LicensePlate = "46 sn 1064",
                            Model = "XC90",
                            RentalVehicleSupplierId = 3,
                            StartDate = new DateTime(2011, 5, 19, 7, 35, 47, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            TotalPrice = 29202m,
                            TotalRentalDay = 2,
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 4,
                            Age = 15,
                            Capacity = (short)72,
                            CreatedDate = new DateTime(2004, 5, 17, 10, 47, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "e269c197-e6e6-41fd-a90f-0c749a2e20f1",
                            CreatedIPAddress = "48.202.70.167",
                            DailyRentalFee = 10644m,
                            ExpireDate = new DateTime(2016, 10, 24, 16, 29, 13, 0, DateTimeKind.Unspecified),
                            Guid = "6572ad75-7bab-489a-bd38-0c5d019838cd",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 788378,
                            LicensePlate = "12 hy 7749",
                            Model = "Colorado",
                            RentalVehicleSupplierId = 2,
                            StartDate = new DateTime(2016, 10, 23, 16, 29, 13, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            TotalPrice = 10644m,
                            TotalRentalDay = 1,
                            VehicleType = "Boat"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 1,
                            Age = 8,
                            Capacity = (short)44,
                            CreatedDate = new DateTime(2016, 2, 7, 14, 42, 9, 0, DateTimeKind.Unspecified),
                            CreatedID = "fa76fa51-98cc-4006-bb36-9c01ee70a6c9",
                            CreatedIPAddress = "151.118.209.43",
                            DailyRentalFee = 10227m,
                            ExpireDate = new DateTime(2001, 10, 28, 19, 54, 29, 0, DateTimeKind.Unspecified),
                            Guid = "18ac3660-d4ab-4f9f-8cc7-f50a0434f4fc",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 150689,
                            LicensePlate = "76 nw 845",
                            Model = "A8",
                            RentalVehicleSupplierId = 2,
                            StartDate = new DateTime(2001, 10, 23, 19, 54, 29, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 51135m,
                            TotalRentalDay = 5,
                            VehicleType = "None"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 3,
                            Age = 9,
                            Capacity = (short)23,
                            CreatedDate = new DateTime(2005, 6, 10, 11, 57, 33, 0, DateTimeKind.Unspecified),
                            CreatedID = "71fde67f-9257-41dc-a3e8-355eaf895081",
                            CreatedIPAddress = "37.232.199.93",
                            DailyRentalFee = 18981m,
                            ExpireDate = new DateTime(2000, 3, 2, 12, 51, 12, 0, DateTimeKind.Unspecified),
                            Guid = "abea4e08-f239-4b96-bea6-5511efa8936c",
                            IsAvailable = "Available",
                            IsUpdated = "No",
                            Kilometer = 13474,
                            LicensePlate = "55 mo 4211",
                            Model = "A4",
                            RentalVehicleSupplierId = 5,
                            StartDate = new DateTime(2000, 2, 26, 12, 51, 12, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            TotalPrice = 94905m,
                            TotalRentalDay = 5,
                            VehicleType = "None"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 973, DateTimeKind.Local).AddTicks(2001));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e617b3fd-960d-4574-9eef-4feacf2166e3");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8025f371-2f3a-4869-9b9d-a29de8105ffe");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 4,
                            Age = 14,
                            Capacity = (short)83,
                            CreatedDate = new DateTime(2019, 11, 9, 21, 53, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "2cfc3586-8bea-4d9d-971f-050c9ee38558",
                            CreatedIPAddress = "54.26.160.223",
                            Guid = "84921848-f073-4444-aa62-a12dc1c8f36a",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 559262,
                            LicensePlate = "42 cc 3121",
                            MarketValue = 20401579m,
                            Model = "Beetle",
                            PurchaseDate = new DateTime(2013, 8, 12, 12, 50, 41, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "None"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 4,
                            Age = 10,
                            Capacity = (short)35,
                            CreatedDate = new DateTime(2011, 1, 20, 6, 32, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "44d2f7e8-1445-406a-a9fd-813c008697a7",
                            CreatedIPAddress = "243.8.77.252",
                            Guid = "06be0fd8-0189-44b3-b9b9-170fb052e15e",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 192278,
                            LicensePlate = "48 re 7995",
                            MarketValue = 17271373m,
                            Model = "Element",
                            PurchaseDate = new DateTime(2002, 4, 25, 15, 19, 13, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Age = 2,
                            Capacity = (short)60,
                            CreatedDate = new DateTime(2002, 7, 27, 21, 9, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "5b3a81c0-5d7f-455b-bb72-0b74d3f62e7e",
                            CreatedIPAddress = "160.218.83.38",
                            Guid = "0ef98284-df00-43b5-9063-11763eb25285",
                            IsAvailable = "Available",
                            IsUpdated = "No",
                            Kilometer = 337383,
                            LicensePlate = "78 qc 5633",
                            MarketValue = 18204159m,
                            Model = "Camaro",
                            PurchaseDate = new DateTime(2008, 7, 6, 21, 31, 10, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            VehicleType = "Minibus"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 1,
                            Age = 1,
                            Capacity = (short)33,
                            CreatedDate = new DateTime(2013, 7, 16, 9, 25, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "c8232a42-1a19-4409-b6a4-8ae2d6a423c0",
                            CreatedIPAddress = "88.76.70.240",
                            Guid = "f471abef-48e5-4e18-a6d5-522c367bfead",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 31143,
                            LicensePlate = "66 pg 3661",
                            MarketValue = 16867702m,
                            Model = "Grand Cherokee",
                            PurchaseDate = new DateTime(2013, 9, 19, 20, 52, 11, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            VehicleType = "ATV"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 1,
                            Age = 2,
                            Capacity = (short)65,
                            CreatedDate = new DateTime(2009, 5, 22, 16, 33, 33, 0, DateTimeKind.Unspecified),
                            CreatedID = "fcce8cae-52c1-49a8-aa7e-fe273c576e68",
                            CreatedIPAddress = "120.134.159.97",
                            Guid = "ba95f503-b673-4bf9-87c2-9368fb7e648a",
                            IsAvailable = "Available",
                            IsUpdated = "No",
                            Kilometer = 161785,
                            LicensePlate = "80 if 5063",
                            MarketValue = 16939541m,
                            Model = "Beetle",
                            PurchaseDate = new DateTime(2011, 3, 3, 6, 26, 14, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Jeep"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 14, 975, DateTimeKind.Local).AddTicks(7463));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c42685a3-7635-4906-8c82-7f6100c5dc21",
                            CountryId = 5,
                            CreatedDate = new DateTime(2000, 6, 27, 8, 45, 17, 0, DateTimeKind.Unspecified),
                            CreatedID = "1036d0ac-47eb-4629-99f4-e4f61080cf70",
                            CreatedIPAddress = "130.236.123.191",
                            Email = "Devon.Toy@gmail.com",
                            EmailConfirmed = false,
                            Guid = "81ed03ab-0aa6-45eb-8854-5617c2aec3eb",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 23, 3, 15, 15, 99, DateTimeKind.Unspecified).AddTicks(5469), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "DEVON.TOY@GMAİL.COM",
                            NormalizedUserName = "SYLVESTER",
                            PasswordHash = "$2a$11$XwaYCkL5w./CLY5hpw4NEu35j5MDAn/uZYGBn0n5TZijD6jKVlMXG",
                            PhoneNumber = "05222418954",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Sylvester"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52b1f304-403d-41e0-8705-bd70e05f1c93",
                            CountryId = 3,
                            CreatedDate = new DateTime(2021, 4, 11, 4, 51, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "c8c319fe-36ab-4e74-9a10-1a972dc879b5",
                            CreatedIPAddress = "163.92.15.242",
                            Email = "Lillian.Treutel2@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "a2827f88-cd2b-447d-ab96-6c61f85ebd8d",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 23, 3, 15, 15, 222, DateTimeKind.Unspecified).AddTicks(9369), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "LİLLİAN.TREUTEL2@HOTMAİL.COM",
                            NormalizedUserName = "ZACK",
                            PasswordHash = "$2a$11$pEPerNamc7yBnL8.TC9SFOulE4n6XsK6KhQZWr4.Bd8UmKX.afTa2",
                            PhoneNumber = "05984426764",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Zack"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27c8cefe-268d-4a36-99ad-a8ccb9c4aa7b",
                            CountryId = 4,
                            CreatedDate = new DateTime(2005, 3, 15, 18, 23, 14, 0, DateTimeKind.Unspecified),
                            CreatedID = "4dc4e16a-8a92-4cbd-8099-0ebacd1882d2",
                            CreatedIPAddress = "247.74.193.43",
                            Email = "Lucile55@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "74ffc4d3-851e-4d76-850c-44d7e5f16a62",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 23, 3, 15, 15, 353, DateTimeKind.Unspecified).AddTicks(6886), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "LUCİLE55@YAHOO.COM",
                            NormalizedUserName = "ANTONİA",
                            PasswordHash = "$2a$11$MIK2c6eNFCPespSVpfuDoO6WtS2mD2xtLKuhoEs.C.Jy1606OUPh2",
                            PhoneNumber = "05766635336",
                            PhoneNumberConfirmed = false,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Antonia"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1b46be0-3f58-4d7a-a49d-b43e9f0579b9",
                            CountryId = 1,
                            CreatedDate = new DateTime(2021, 4, 20, 20, 45, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "d032322a-c7e2-4f0a-aa54-58dec9a58cd9",
                            CreatedIPAddress = "171.79.1.116",
                            Email = "Shawna17@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "7a9716d2-0193-4813-849e-aea253df6e46",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 23, 3, 15, 15, 477, DateTimeKind.Unspecified).AddTicks(8985), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "SHAWNA17@YAHOO.COM",
                            NormalizedUserName = "PEYTON",
                            PasswordHash = "$2a$11$arjOAgKn2Jgg0XJl2IqT/.NXqNXzbS5wcwWyCDK2/3K/fWsC9ti36",
                            PhoneNumber = "05204619393",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Peyton"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07573de4-8e30-455e-a2c9-a84db5dfb63d",
                            CountryId = 1,
                            CreatedDate = new DateTime(2011, 6, 2, 1, 50, 23, 0, DateTimeKind.Unspecified),
                            CreatedID = "e84e5500-9c20-47a1-9c68-d8b5056a3b66",
                            CreatedIPAddress = "226.11.254.220",
                            Email = "Kari.Prosacco66@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "b04924f7-bfa5-41f8-a4a7-2afc928ccba0",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 23, 3, 15, 15, 601, DateTimeKind.Unspecified).AddTicks(7288), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "KARİ.PROSACCO66@HOTMAİL.COM",
                            NormalizedUserName = "IAN",
                            PasswordHash = "$2a$11$Xo7itsvQ7cKuch3ivFS7Uu17ip0tHFgaXBTAlGRR7K2Wr6Z4PInv2",
                            PhoneNumber = "05259720609",
                            PhoneNumberConfirmed = false,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Ian"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 16, 3, 15, 15, 602, DateTimeKind.Local).AddTicks(5315));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WebUserAccountId");

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            WebUserAccountId = 1,
                            Address = "602 Mathew Loop, North Stanmouth, Brunei Darussalam",
                            Age = (byte)61,
                            BirthDate = new DateTime(1964, 1, 9, 20, 36, 48, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2012, 9, 2, 20, 50, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "f162f5a5-df47-4e34-94cf-35c07fe74b12",
                            CreatedIPAddress = "55.189.32.17",
                            FirstName = "Elisha",
                            Gender = "Female",
                            IsUpdated = "Yes",
                            LastName = "Lind",
                            PhotoPath = "emely.org",
                            Status = "Active",
                            TCN_Passport = "34198492179",
                            UpdatedDate = new DateTime(2022, 3, 23, 8, 43, 19, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 2,
                            Address = "58492 Paucek Harbor, South Earnestine, Pakistan",
                            Age = (byte)26,
                            BirthDate = new DateTime(1998, 7, 21, 20, 21, 34, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2018, 5, 7, 16, 43, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "b89c1f88-bc50-4ad0-b180-9c4837fe6cb3",
                            CreatedIPAddress = "254.146.176.247",
                            FirstName = "Oma",
                            Gender = "Unknown",
                            IsUpdated = "No",
                            LastName = "Rau",
                            PhotoPath = "alec.info",
                            Status = "Active",
                            TCN_Passport = "23744913769",
                            UpdatedDate = new DateTime(2023, 12, 4, 4, 18, 52, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 3,
                            Address = "261 Wisoky Islands, Margaritaport, Isle of Man",
                            Age = (byte)27,
                            BirthDate = new DateTime(1997, 9, 10, 7, 33, 28, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2009, 4, 21, 4, 51, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "d5c966c1-ca2f-4dfc-b8ef-1fbf1804d240",
                            CreatedIPAddress = "173.52.91.69",
                            FirstName = "Savannah",
                            Gender = "Male",
                            IsUpdated = "No",
                            LastName = "Larson",
                            PhotoPath = "sandrine.info",
                            Status = "Unknown",
                            TCN_Passport = "34336497965",
                            UpdatedDate = new DateTime(2022, 1, 23, 18, 25, 54, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 4,
                            Address = "3652 Abdullah Ramp, Wolffchester, Azerbaijan",
                            Age = (byte)73,
                            BirthDate = new DateTime(1951, 9, 18, 22, 17, 11, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2012, 4, 22, 16, 19, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "3f47774a-02e3-478b-88ff-9ac7e0201bee",
                            CreatedIPAddress = "78.146.92.64",
                            FirstName = "Abagail",
                            Gender = "Unknown",
                            IsUpdated = "No",
                            LastName = "Marquardt",
                            PhotoPath = "charlene.net",
                            Status = "Active",
                            TCN_Passport = "58183242902",
                            UpdatedDate = new DateTime(2024, 11, 10, 7, 28, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 5,
                            Address = "3488 Imogene Groves, Hammesfort, Iceland",
                            Age = (byte)26,
                            BirthDate = new DateTime(1998, 5, 20, 13, 22, 15, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 3, 27, 19, 58, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "adef27f0-77a0-4ad8-b4c0-8fe3ace147c1",
                            CreatedIPAddress = "159.87.69.173",
                            FirstName = "Burnice",
                            Gender = "Male",
                            IsUpdated = "No",
                            LastName = "Quigley",
                            PhotoPath = "zack.info",
                            Status = "Active",
                            TCN_Passport = "83997329049",
                            UpdatedDate = new DateTime(2024, 8, 17, 1, 21, 50, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Activities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", "PartnerCompany")
                        .WithMany("PartnerCompanyTransactions")
                        .HasForeignKey("PartnerCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractEmployees")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ActivityTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.ActivityTicket", "ActivityTicket")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.ActivityTicketOrder", "ActivityTicketOrder")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActivityTicket");

                    b.Navigation("ActivityTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.ActivityPassTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("ActivityPassTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("ActivityTickets")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", "RentalVehicleSupplier")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("RentalVehicleSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("RentalVehicleSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("Vehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("WebUserAccounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithOne("WebUserProfile")
                        .HasForeignKey("DataAccess.Entities.Models.WebUsers.WebUserProfile", "WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Navigation("ActivityTickets");

                    b.Navigation("RentalVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Navigation("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Navigation("ActivityPassTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Navigation("ContractEmployees");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WebUserAccounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Navigation("ActivityTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Navigation("ActivityTicketOrders");

                    b.Navigation("WebUserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
