// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GezTurizmContext))]
    [Migration("20250327220714_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_RentalVehicle", b =>
                {
                    b.Property<int>("ContactDriverId")
                        .HasColumnType("int");

                    b.Property<int>("RentalVehicleId")
                        .HasColumnType("int");

                    b.HasKey("ContactDriverId", "RentalVehicleId");

                    b.HasIndex("RentalVehicleId");

                    b.ToTable("ContractDrivers_RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_Vehicle", b =>
                {
                    b.Property<int>("ContractDriverId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("ContractDriverId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_ServiceRegion", b =>
                {
                    b.Property<int?>("ContractTourGuideId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRegionId")
                        .HasColumnType("int");

                    b.HasKey("ContractTourGuideId", "ServiceRegionId");

                    b.HasIndex("ServiceRegionId");

                    b.ToTable("ContractTourGuides_ServiceRegions");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_Tour", b =>
                {
                    b.Property<int?>("ContractTourGuideId")
                        .HasColumnType("int");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("ContractTourGuideId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("ContractTourGuide_Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 362, DateTimeKind.Local).AddTicks(3673));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a5f8ce03-a25e-4ee7-9784-696bb0c27b27");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("304b2e9f-bb73-4cfb-8bfd-8783073eb43e");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 363, DateTimeKind.Local).AddTicks(109));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4848d89f-4c9f-45e5-b086-99b7eb2e60dc");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("aee2ec43-c965-49de-98b1-506b46649999");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TourCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptTickets")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 363, DateTimeKind.Local).AddTicks(7310));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("de7cc399-7790-4753-a119-fe524eb6e4bf");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3ed514dd-7e92-4edf-aa0c-e8065e58f433");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PartnerCompanies");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 364, DateTimeKind.Local).AddTicks(1291));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("93929db2-9c1b-4616-acda-bf158494cf63");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("f773ddcb-2a85-4324-bf10-63d52a242637");

                    b.Property<int?>("PartnerCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Receive")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyId");

                    b.ToTable("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 364, DateTimeKind.Local).AddTicks(4019));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("16f556d1-2701-4647-b54a-63246a6b899d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8501d8ba-454d-46a3-b07d-39a7603fae94");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 364, DateTimeKind.Local).AddTicks(7741));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3c4951f2-7c76-4705-9cd0-73e28543e8f3");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("53856c34-8dd7-49d7-a552-d62a1a15077e");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RentalVehicleSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 365, DateTimeKind.Local).AddTicks(1538));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1624f80d-3251-4b8e-9971-c834c3ddbb30");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("eaf75c32-bac9-4002-ae28-fdcade9ac6e5");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SubContractWorkerSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 365, DateTimeKind.Local).AddTicks(6790));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7d5e1562-791e-4007-8dd2-7568d8865872");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("625f7217-97e1-4e38-9c6b-6e49d0860fdf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = "Africa",
                            CountryCode = "TR",
                            CountryDescription = "Cum eum vitae non ducimus doloribus.",
                            CountryName = "Turkey",
                            CountryPhone = "+90",
                            CreatedDate = new DateTime(2011, 3, 27, 15, 34, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "6d506407-bc2c-4156-a903-896ac2426772",
                            CreatedIPAddress = "74.51.9.230",
                            Guid = "bbb86a75-8219-4e95-97c6-5afbf60e2a10",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Continent = "Africa",
                            CountryCode = "RU",
                            CountryDescription = "Voluptatem et corporis quos ut laborum.",
                            CountryName = "Russia",
                            CountryPhone = "+7",
                            CreatedDate = new DateTime(2004, 6, 26, 10, 14, 42, 0, DateTimeKind.Unspecified),
                            CreatedID = "edca34f2-08bf-4890-9188-13a51f32428d",
                            CreatedIPAddress = "243.192.104.144",
                            Guid = "bd462417-dcbc-4853-9281-60105dc74b2f",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Continent = "Europe",
                            CountryCode = "USA",
                            CountryDescription = "Fuga adipisci atque earum non provident.",
                            CountryName = "United States of America",
                            CountryPhone = "+1",
                            CreatedDate = new DateTime(2006, 6, 15, 21, 40, 44, 0, DateTimeKind.Unspecified),
                            CreatedID = "a9ad34b1-1672-42ae-8d57-ff78693ad25d",
                            CreatedIPAddress = "66.149.19.182",
                            Guid = "0b4f234f-eef6-4061-a428-4932ba379767",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            Continent = "SouthAmerica",
                            CountryCode = "SA",
                            CountryDescription = "Eaque ipsam autem optio harum doloribus.",
                            CountryName = "Kingdom of Saudi Arabia",
                            CountryPhone = "+966",
                            CreatedDate = new DateTime(2002, 9, 6, 16, 50, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "f6d7f665-c6aa-42a7-8717-27c6ed6ae8f4",
                            CreatedIPAddress = "55.166.55.175",
                            Guid = "624d6b94-75ae-4a5e-b58b-a2758d75f206",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Continent = "Africa",
                            CountryCode = "GER",
                            CountryDescription = "Debitis voluptates voluptatem impedit beatae velit.",
                            CountryName = "Germany",
                            CountryPhone = "+49",
                            CreatedDate = new DateTime(2000, 10, 16, 20, 23, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "e4919865-c6ea-40eb-a70a-c81419ad7d8a",
                            CreatedIPAddress = "145.20.7.133",
                            Guid = "9c199116-30bb-4b29-bba4-70e109ba97ef",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 366, DateTimeKind.Local).AddTicks(545));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b49c6dd6-0663-4963-8d33-a3e36c21cc11");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("None");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("bd635d1a-94c5-471b-bb46-2599b011ac87");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SubContractWorkerSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubContractWorkerSupplierId");

                    b.ToTable("ContractDrivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Scotland",
                            Age = (byte)40,
                            BirthDate = new DateTime(1984, 9, 22, 9, 41, 35, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2008, 4, 9, 3, 36, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "28ea05c4-d45a-44f6-8c59-f371431f4371",
                            CreatedIPAddress = "247.89.244.232",
                            DriverLicense = "D",
                            Email = "Samir_Terry34@hotmail.com",
                            EndContract = new DateTime(2016, 3, 12, 12, 57, 9, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Marie",
                            Gender = "Male",
                            Guid = "a1a97ddb-36d4-4743-8b59-f34a79b7e407",
                            HireDate = new DateTime(2015, 3, 12, 12, 57, 9, 0, DateTimeKind.Unspecified),
                            LastName = "Schneider",
                            PhoneNumber = "05986425654",
                            PhotoPath = "https://zachary.biz/bulgarian-lev",
                            Status = "Unknown",
                            TCN_Passport = "13257757633"
                        },
                        new
                        {
                            Id = 2,
                            Address = "England",
                            Age = (byte)60,
                            BirthDate = new DateTime(1964, 6, 4, 6, 49, 47, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2015, 10, 15, 22, 40, 7, 0, DateTimeKind.Unspecified),
                            CreatedID = "e2f311de-3bf8-401d-8e95-5d65781abbae",
                            CreatedIPAddress = "142.133.42.98",
                            DriverLicense = "None",
                            Email = "Maximus_Bayer71@yahoo.com",
                            EndContract = new DateTime(2020, 7, 4, 12, 49, 39, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Lisa",
                            Gender = "Unknown",
                            Guid = "1c8a1047-db20-46f1-9fc9-338fd4f78d3e",
                            HireDate = new DateTime(2019, 7, 4, 12, 49, 39, 0, DateTimeKind.Unspecified),
                            LastName = "Corwin",
                            PhoneNumber = "05764721339",
                            PhotoPath = "http://maye.biz/technician/driver",
                            Status = "Active",
                            TCN_Passport = "94399738429"
                        },
                        new
                        {
                            Id = 3,
                            Address = "England",
                            Age = (byte)37,
                            BirthDate = new DateTime(1988, 2, 4, 10, 39, 48, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2019, 11, 3, 3, 13, 4, 0, DateTimeKind.Unspecified),
                            CreatedID = "69c7bef3-abd9-498d-8b78-ec9327ae4f6a",
                            CreatedIPAddress = "179.72.18.128",
                            DriverLicense = "None",
                            Email = "Aurore.Rolfson94@hotmail.com",
                            EndContract = new DateTime(2020, 4, 3, 4, 11, 6, 0, DateTimeKind.Unspecified),
                            Experience = 1,
                            FirstName = "Marlin",
                            Gender = "Male",
                            Guid = "7461f845-e967-4923-9df6-a114b695b700",
                            HireDate = new DateTime(2019, 4, 3, 4, 11, 6, 0, DateTimeKind.Unspecified),
                            LastName = "Reilly",
                            PhoneNumber = "05534566463",
                            PhotoPath = "http://ılene.name/legacy",
                            Status = "Active",
                            TCN_Passport = "51094631716"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Wales",
                            Age = (byte)50,
                            BirthDate = new DateTime(1974, 5, 8, 14, 20, 18, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 10, 3, 8, 38, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "784cebb4-770a-4e0c-b548-42cfd0f0f0da",
                            CreatedIPAddress = "159.176.170.222",
                            DriverLicense = "ADB",
                            Email = "Carolanne_Koelpin67@hotmail.com",
                            EndContract = new DateTime(2021, 1, 9, 9, 59, 11, 0, DateTimeKind.Unspecified),
                            Experience = 2,
                            FirstName = "Henderson",
                            Gender = "Female",
                            Guid = "c91437d0-c37f-4412-8dec-4d30f35905dc",
                            HireDate = new DateTime(2020, 1, 9, 9, 59, 11, 0, DateTimeKind.Unspecified),
                            LastName = "Walker",
                            PhoneNumber = "05912558102",
                            PhotoPath = "http://colt.biz/digital/borders/yellow",
                            Status = "Passive",
                            TCN_Passport = "79117457175"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Northern Ireland",
                            Age = (byte)49,
                            BirthDate = new DateTime(1975, 12, 24, 13, 14, 33, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2020, 9, 25, 22, 23, 15, 0, DateTimeKind.Unspecified),
                            CreatedID = "ec15602c-8839-467c-a2cd-d951a121ffca",
                            CreatedIPAddress = "157.211.16.55",
                            DriverLicense = "None",
                            Email = "Janice.Gulgowski@hotmail.com",
                            EndContract = new DateTime(2022, 7, 5, 17, 57, 36, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Leila",
                            Gender = "Unknown",
                            Guid = "092d7667-4cf2-4f8f-a183-8c294a5b51e8",
                            HireDate = new DateTime(2021, 7, 5, 17, 57, 36, 0, DateTimeKind.Unspecified),
                            LastName = "Rau",
                            PhoneNumber = "05380956763",
                            PhotoPath = "https://margaret.org/interface/smtp/infomediaries",
                            Status = "Active",
                            TCN_Passport = "30276669975"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 366, DateTimeKind.Local).AddTicks(7389));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7289c8d4-5ca0-4c3e-9dad-b97834fe768f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("bb6877cd-1649-444d-9375-718b6cef5a96");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("None");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SubContractWorkerSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubContractWorkerSupplierId");

                    b.ToTable("ContractTourGuides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Wales",
                            Age = (byte)56,
                            BirthDate = new DateTime(1969, 1, 22, 14, 51, 7, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2018, 1, 23, 23, 41, 44, 0, DateTimeKind.Unspecified),
                            CreatedID = "0e31b7af-3b3f-4ae3-9ccf-dee8b3a435be",
                            CreatedIPAddress = "179.77.2.3",
                            Email = "Sammy_Schneider@yahoo.com",
                            EndContract = new DateTime(2013, 1, 20, 11, 52, 13, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Emilie",
                            Gender = "Unknown",
                            Guid = "c709fe52-1637-4828-a3c8-70f776aed698",
                            HireDate = new DateTime(2012, 1, 20, 11, 52, 13, 0, DateTimeKind.Unspecified),
                            Language = "Italian",
                            LastName = "Reichel",
                            PhoneNumber = "05598786207",
                            PhotoPath = "https://tate.com/product/mint-green",
                            Status = "Active",
                            TCN_Passport = "93273339103"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Scotland",
                            Age = (byte)30,
                            BirthDate = new DateTime(1994, 5, 22, 13, 43, 6, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2001, 2, 19, 14, 28, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "03bdff4c-afe9-4fa0-b5c0-e53a7662eec3",
                            CreatedIPAddress = "39.245.85.16",
                            Email = "Jaylen_Tromp56@gmail.com",
                            EndContract = new DateTime(2004, 3, 13, 18, 54, 10, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Miracle",
                            Gender = "Male",
                            Guid = "f316b20f-aa53-4f0e-9125-9ad89a4f0404",
                            HireDate = new DateTime(2003, 3, 13, 18, 54, 10, 0, DateTimeKind.Unspecified),
                            Language = "None",
                            LastName = "Harvey",
                            PhoneNumber = "05518685104",
                            PhotoPath = "http://cristal.info/new-taiwan-dollar/frozen",
                            Status = "Active",
                            TCN_Passport = "34994497000"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Scotland",
                            Age = (byte)38,
                            BirthDate = new DateTime(1986, 12, 10, 3, 34, 23, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2016, 3, 22, 12, 12, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "71f383b5-f206-43f1-a2e2-513a45935499",
                            CreatedIPAddress = "176.210.14.126",
                            Email = "Abdul.Grady22@gmail.com",
                            EndContract = new DateTime(2001, 6, 5, 21, 12, 50, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Camryn",
                            Gender = "Female",
                            Guid = "a2fa795d-b13b-4ced-b46b-b61b276ff1ce",
                            HireDate = new DateTime(2000, 6, 5, 21, 12, 50, 0, DateTimeKind.Unspecified),
                            Language = "German",
                            LastName = "Hayes",
                            PhoneNumber = "05411950261",
                            PhotoPath = "https://mollie.org/assistant/supervisor/granite",
                            Status = "Unknown",
                            TCN_Passport = "33931129288"
                        },
                        new
                        {
                            Id = 4,
                            Address = "England",
                            Age = (byte)63,
                            BirthDate = new DateTime(1962, 2, 8, 3, 10, 9, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2003, 11, 1, 17, 19, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "bdc0564d-2171-4f43-b028-c92997e50c90",
                            CreatedIPAddress = "61.165.210.126",
                            Email = "Karen_Stroman@yahoo.com",
                            EndContract = new DateTime(2019, 12, 2, 21, 25, 41, 0, DateTimeKind.Unspecified),
                            Experience = 1,
                            FirstName = "Clementina",
                            Gender = "Female",
                            Guid = "15bdae09-9eff-4561-a3e6-0a4edc6562dd",
                            HireDate = new DateTime(2018, 12, 2, 21, 25, 41, 0, DateTimeKind.Unspecified),
                            Language = "German",
                            LastName = "Graham",
                            PhoneNumber = "05584022997",
                            PhotoPath = "https://bryon.biz/legacy",
                            Status = "Unknown",
                            TCN_Passport = "09019476487"
                        },
                        new
                        {
                            Id = 5,
                            Address = "England",
                            Age = (byte)55,
                            BirthDate = new DateTime(1969, 4, 14, 11, 31, 39, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2005, 5, 2, 19, 50, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "64e29ad7-96c1-4d4c-86ce-09e2f697004d",
                            CreatedIPAddress = "107.111.13.244",
                            Email = "Precious69@gmail.com",
                            EndContract = new DateTime(2016, 3, 20, 16, 25, 49, 0, DateTimeKind.Unspecified),
                            Experience = 2,
                            FirstName = "Maddison",
                            Gender = "Female",
                            Guid = "968f5def-d1dc-464c-bdc8-d2dafa27b027",
                            HireDate = new DateTime(2015, 3, 20, 16, 25, 49, 0, DateTimeKind.Unspecified),
                            Language = "French",
                            LastName = "Cormier",
                            PhoneNumber = "05557190707",
                            PhotoPath = "https://heidi.org/ınvestor",
                            Status = "Unknown",
                            TCN_Passport = "73464024550"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("ContractCount")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 367, DateTimeKind.Local).AddTicks(3271));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b1ec0eae-1b2d-4edf-a48c-a990a479975a");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("DaysWorked")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7a619f74-454b-4636-8c1a-84d549ba9bb9");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ResidenceRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ResidenceRegionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Northern Ireland",
                            Age = (byte)53,
                            BirthDate = new DateTime(1971, 12, 27, 2, 35, 50, 0, DateTimeKind.Unspecified),
                            ContractCount = 7,
                            CountryId = 1,
                            CreatedDate = new DateTime(2008, 3, 1, 15, 26, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "bb5eeab1-9dda-43e5-8fbf-f932cd4bbb1e",
                            CreatedIPAddress = "35.193.17.115",
                            CurrentPosition = "Accounting",
                            DaysWorked = 6732,
                            Email = "Wyatt57@yahoo.com",
                            EndContract = new DateTime(2027, 10, 21, 17, 23, 40, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Michelle",
                            Gender = "Male",
                            Guid = "fdd320ba-58df-4020-97c4-bf4bd6e124c3",
                            HireDate = new DateTime(2006, 10, 21, 17, 23, 40, 0, DateTimeKind.Unspecified),
                            LastName = "Batz",
                            PhoneNumber = "05653348432",
                            PhotoPath = "http://tabitha.org/overriding/generic-fresh-pants/groupware",
                            ResidenceRegionId = 2,
                            Status = "Active",
                            TCN_Passport = "47201263806"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Scotland",
                            Age = (byte)46,
                            BirthDate = new DateTime(1978, 7, 26, 5, 21, 6, 0, DateTimeKind.Unspecified),
                            ContractCount = 6,
                            CountryId = 1,
                            CreatedDate = new DateTime(2015, 12, 10, 20, 30, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "77b26cea-71cc-460b-a211-5a0356fd870c",
                            CreatedIPAddress = "101.157.111.167",
                            CurrentPosition = "Operations",
                            DaysWorked = 5229,
                            Email = "Andreane34@yahoo.com",
                            EndContract = new DateTime(2028, 12, 2, 12, 35, 17, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Jerry",
                            Gender = "Unknown",
                            Guid = "f76ed70a-38bd-4de9-bfc6-6352daec753b",
                            HireDate = new DateTime(2010, 12, 2, 12, 35, 17, 0, DateTimeKind.Unspecified),
                            LastName = "Doyle",
                            PhoneNumber = "05799378485",
                            PhotoPath = "http://hollie.name/e-commerce",
                            ResidenceRegionId = 4,
                            Status = "Active",
                            TCN_Passport = "72855200084"
                        },
                        new
                        {
                            Id = 3,
                            Address = "England",
                            Age = (byte)52,
                            BirthDate = new DateTime(1972, 9, 4, 22, 15, 17, 0, DateTimeKind.Unspecified),
                            ContractCount = 6,
                            CountryId = 4,
                            CreatedDate = new DateTime(2002, 5, 18, 16, 43, 53, 0, DateTimeKind.Unspecified),
                            CreatedID = "033ce929-b7e5-4e4c-ab86-82ffc1ddc09e",
                            CreatedIPAddress = "235.233.46.160",
                            CurrentPosition = "Administrative",
                            DaysWorked = 6021,
                            Email = "Josue.OConner70@gmail.com",
                            EndContract = new DateTime(2026, 10, 1, 1, 54, 36, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Lyric",
                            Gender = "Male",
                            Guid = "bee4d900-0dbe-4765-87a4-3f6a43e24545",
                            HireDate = new DateTime(2008, 10, 1, 1, 54, 36, 0, DateTimeKind.Unspecified),
                            LastName = "Graham",
                            PhoneNumber = "05408926565",
                            PhotoPath = "http://virgil.net/redundant",
                            ResidenceRegionId = 3,
                            Status = "Passive",
                            TCN_Passport = "11985907878"
                        },
                        new
                        {
                            Id = 4,
                            Address = "England",
                            Age = (byte)47,
                            BirthDate = new DateTime(1977, 5, 1, 13, 28, 54, 0, DateTimeKind.Unspecified),
                            ContractCount = 7,
                            CountryId = 3,
                            CreatedDate = new DateTime(2003, 11, 23, 9, 16, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "33f2d632-c82f-45ca-aff1-19a960e33053",
                            CreatedIPAddress = "157.139.113.11",
                            CurrentPosition = "Marketing",
                            DaysWorked = 6913,
                            Email = "Virginie_Predovic57@hotmail.com",
                            EndContract = new DateTime(2027, 4, 23, 11, 54, 16, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Alvera",
                            Gender = "Female",
                            Guid = "a50e0a5d-3829-4c11-8d8a-daa462139016",
                            HireDate = new DateTime(2006, 4, 23, 11, 54, 16, 0, DateTimeKind.Unspecified),
                            LastName = "DuBuque",
                            PhoneNumber = "05472517914",
                            PhotoPath = "https://giovanny.org/architect",
                            ResidenceRegionId = 4,
                            Status = "Passive",
                            TCN_Passport = "39883810398"
                        },
                        new
                        {
                            Id = 5,
                            Address = "England",
                            Age = (byte)36,
                            BirthDate = new DateTime(1988, 9, 2, 2, 26, 42, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 1,
                            CreatedDate = new DateTime(2015, 6, 25, 15, 58, 52, 0, DateTimeKind.Unspecified),
                            CreatedID = "d29b9c60-0492-40c5-ab46-a0c2e236dac3",
                            CreatedIPAddress = "80.237.172.247",
                            CurrentPosition = "Administrative",
                            DaysWorked = 3676,
                            Email = "Idella.Howell86@yahoo.com",
                            EndContract = new DateTime(2027, 3, 4, 9, 49, 13, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Jared",
                            Gender = "Male",
                            Guid = "bbe7ae0c-d097-45b9-a4db-be359d58b372",
                            HireDate = new DateTime(2015, 3, 4, 9, 49, 13, 0, DateTimeKind.Unspecified),
                            LastName = "Haag",
                            PhoneNumber = "05363839945",
                            PhotoPath = "https://billy.org/bandwidth",
                            ResidenceRegionId = 4,
                            Status = "Unknown",
                            TCN_Passport = "60996438492"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.EventTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 369, DateTimeKind.Local).AddTicks(2143));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a091b24e-2b2e-4e78-8ec8-20a26d95e688");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("EventTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTicketOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("47a79676-b885-4b9a-86b1-808e68513c68");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventTicketId");

                    b.HasIndex("EventTicketOrderId");

                    b.ToTable("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ProductOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 369, DateTimeKind.Local).AddTicks(7352));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("cb701d33-efd5-4965-8eeb-3e60cc50df06");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("abe9e24c-6fb9-4704-b000-4cbf8a84c6b2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.TourTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 370, DateTimeKind.Local).AddTicks(1950));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3712b204-3c60-4a8e-a923-c46413ae5041");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("5c1e73f6-db88-452f-bf3a-010a28f6189c");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("TourTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TourTicketOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TourTicketId");

                    b.HasIndex("TourTicketOrderId");

                    b.ToTable("TourTicketOrderDetail");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 370, DateTimeKind.Local).AddTicks(6513));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a75e2ee9-bc8c-43d8-97d5-d0efdfdc81e8");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7c5fee66-f0cb-4a8e-9dd0-a42ffa305057");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("EventTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 371, DateTimeKind.Local).AddTicks(857));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("034abaea-1de1-45c7-8dc3-c01cbbd4dfcb");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("fb713eb2-b90c-4026-ae86-d37ecf521910");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 372, DateTimeKind.Local).AddTicks(2915));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("749bc40e-0342-42f8-8303-1871375405e9");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("975636f3-4a02-4d5a-8ef8-7cb2e6095c8f");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("TourTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassEventTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 372, DateTimeKind.Local).AddTicks(7468));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e9722c50-2629-48a2-8ee3-dc7869354d98");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("fe16f5ee-8942-4a41-920c-52c7a68f91b1");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("PassEventTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassTourTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 373, DateTimeKind.Local).AddTicks(2320));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e2b88da0-f3e6-4007-b42a-a0950aa0af39");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("84f5994b-2b21-43f9-b2bf-b217ff7468c2");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("PassTourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 374, DateTimeKind.Local).AddTicks(2998));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("5cc32e77-9618-4411-a3d3-0de84579db85");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1a1cdbf0-b430-4c42-88a5-525aa451cdaa");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("ProductSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 373, DateTimeKind.Local).AddTicks(7436));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("006a5b8d-f176-4ea3-8f58-0269e1d2e2fc");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2bf1669f-f3a0-491a-ab49-0928e3218ceb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ResidenceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 374, DateTimeKind.Local).AddTicks(6328));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4538dd87-3a9f-48a7-8ad9-d55bdbfa2940");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3003cc13-46f4-4ec8-998b-977c405978b5");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TransportVehicle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ResidenceRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new TimeSpan(0, 2, 31, 0, 0),
                            CreatedDate = new DateTime(2004, 5, 8, 22, 43, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "2dff296a-fe95-4e41-befe-cc2a7cf194e8",
                            CreatedIPAddress = "97.19.107.247",
                            DistrictName = "tempore",
                            Guid = "4208495a-e001-4796-9ca0-b82bcef16bca",
                            Status = "Active",
                            TransportVehicle = "Yacht"
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new TimeSpan(0, 1, 25, 0, 0),
                            CreatedDate = new DateTime(2015, 5, 10, 21, 46, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "ed3d0926-c699-403e-800a-d517e075d08c",
                            CreatedIPAddress = "180.97.214.180",
                            DistrictName = "doloribus",
                            Guid = "d1cd9d9e-e05a-4370-ba71-047c0ff1624d",
                            Status = "Passive",
                            TransportVehicle = "Motorbike"
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new TimeSpan(0, 2, 14, 0, 0),
                            CreatedDate = new DateTime(2011, 3, 16, 13, 15, 29, 0, DateTimeKind.Unspecified),
                            CreatedID = "a7c44378-66a7-4980-a77f-d07a9bf52f99",
                            CreatedIPAddress = "71.107.176.21",
                            DistrictName = "iste",
                            Guid = "e752dd05-f274-44bd-aa4c-fc4c4b23ebc0",
                            Status = "Passive",
                            TransportVehicle = "Minibus"
                        },
                        new
                        {
                            Id = 4,
                            ArrivalTime = new TimeSpan(0, 1, 4, 0, 0),
                            CreatedDate = new DateTime(2007, 3, 17, 5, 45, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "16e5f1a6-c2a1-454f-b0b8-589b7a863029",
                            CreatedIPAddress = "73.164.122.193",
                            DistrictName = "cupiditate",
                            Guid = "007c57ac-8cfe-43a3-84ac-3b19f0a89c54",
                            Status = "Passive",
                            TransportVehicle = "Yacht"
                        },
                        new
                        {
                            Id = 5,
                            ArrivalTime = new TimeSpan(0, 0, 56, 0, 0),
                            CreatedDate = new DateTime(2001, 5, 6, 20, 24, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "38f3e7aa-d499-4d08-b6e3-cae3502296a5",
                            CreatedIPAddress = "90.225.127.107",
                            DistrictName = "non",
                            Guid = "8da07567-e1a5-470c-ae23-298dc1e4e41c",
                            Status = "Passive",
                            TransportVehicle = "Jeep"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 374, DateTimeKind.Local).AddTicks(9346));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b4d7cb7a-c015-418f-b5f6-250596cde03d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("49a97c0a-58b6-41a3-b3e8-95250bc5ff86");

                    b.Property<bool>("HasAirport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHotelFacility")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TouristPopulation")
                        .HasColumnType("bit");

                    b.Property<string>("TransportVehicle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 375, DateTimeKind.Local).AddTicks(2612));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("479599fd-c27b-4f6e-ac9b-84f7aab2731d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("27ddad58-d3e9-4656-b7dc-a1b4a6efde45");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 375, DateTimeKind.Local).AddTicks(6743));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("17107a1e-a0f8-4473-ab00-1e3882815f18");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e35dd0eb-86fb-48e3-b641-ab41c1a5e9f2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 376, DateTimeKind.Local).AddTicks(153));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("856a1b90-793c-470a-9100-8b61bb8c2a90");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DailyRentalFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("fe112d60-3114-4aa0-8b4c-37d1f1a06793");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalVehicleSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TotalRentalDay")
                        .HasColumnType("int");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RentalVehicleSupplierId");

                    b.HasIndex("TourId");

                    b.ToTable("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 376, DateTimeKind.Local).AddTicks(5256));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("85174216-fd8f-49ed-8d4e-e14c7204b728");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("57155346-68d2-48cf-b167-3ad165d6e4b7");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TourId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 378, DateTimeKind.Local).AddTicks(8227));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01cb00a0-bd67-4af1-b8f6-67398af28745",
                            CountryId = 2,
                            CreatedDate = new DateTime(2005, 7, 13, 7, 15, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "06abaefc-06b5-452b-b8f0-7306788af73f",
                            CreatedIPAddress = "206.117.144.222",
                            Email = "Michele.Bashirian75@gmail.com",
                            EmailConfirmed = false,
                            Guid = "86e759fb-737e-47d5-9a57-11d7b23d027d",
                            LockoutEnabled = false,
                            NormalizedEmail = "MİCHELE.BASHİRİAN75@GMAİL.COM",
                            NormalizedUserName = "TONY",
                            PasswordHash = "$2a$11$hbVm6wUQW7kVI9bM0ooBK.OIM4Gs0lvdKXrmXu/oX39Xso1hXMU92",
                            PhoneNumber = "05676567091",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e2c0d20-955c-420f-aa3e-51c18bdd843d",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Tony"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b82b823-571a-4fdb-b7bd-4c6caba5c06c",
                            CountryId = 2,
                            CreatedDate = new DateTime(2011, 10, 3, 11, 35, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "311b8b40-204a-4be4-8bf7-c1f33fd6736a",
                            CreatedIPAddress = "160.129.255.140",
                            Email = "Bertrand_Nicolas81@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "fb58bb4f-c09b-4ec1-a87e-840b974a42be",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTRAND_NİCOLAS81@HOTMAİL.COM",
                            NormalizedUserName = "TAUREAN",
                            PasswordHash = "$2a$11$jbTgE./zX9NP8qAnicq4T.RJc1PeoQLkKFuSz9oFxE0w.11tq0dOe",
                            PhoneNumber = "05969089029",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27b645db-c607-44b1-a09d-9106fe8157b9",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Taurean"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c3c09db-04f4-4ea6-8860-a6c6236c4057",
                            CountryId = 5,
                            CreatedDate = new DateTime(2015, 12, 27, 12, 13, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "f06d21d8-fbb7-4912-a390-4dc0c4456f35",
                            CreatedIPAddress = "180.203.49.91",
                            Email = "Dedrick92@gmail.com",
                            EmailConfirmed = false,
                            Guid = "ca57533b-3b58-4dbf-b6ec-b26dc54dd2c0",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEDRİCK92@GMAİL.COM",
                            NormalizedUserName = "NANNİE",
                            PasswordHash = "$2a$11$74Fn9OuREXukjVUqruYwWe6H.Z2Z/dSNdfmKjKPX7EZ3HDjCt/kKS",
                            PhoneNumber = "05179929362",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c79ba0a-4d1b-4fd4-a8a7-232e2cb7be8b",
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Nannie"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "634d0fad-4567-4c56-9972-b4c7e9ca7993",
                            CountryId = 1,
                            CreatedDate = new DateTime(2002, 1, 6, 12, 24, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "8425cd90-6ac0-47f9-9c34-3c3f8aab7833",
                            CreatedIPAddress = "137.56.74.77",
                            Email = "Aylin0@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "68c400b0-c21d-4741-a432-0c7f8a95ddbc",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLİN0@HOTMAİL.COM",
                            NormalizedUserName = "MİLAN",
                            PasswordHash = "$2a$11$gHDx2TVVUTS7w7gUHjIY0.10drz43vIQLZSRJJGjCWmZkLyr2IyH.",
                            PhoneNumber = "05943769801",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28756d07-e5cf-489c-a8a4-ecf109ed3da3",
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Milan"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c14ff21-3ba4-4d01-96e7-2d148a0a3e22",
                            CountryId = 4,
                            CreatedDate = new DateTime(2009, 3, 8, 21, 21, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "c0bda293-ae98-47f5-a936-694f23cbf5dc",
                            CreatedIPAddress = "11.5.171.92",
                            Email = "Kasey49@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "19d0487c-3660-406d-94e4-183f205ae069",
                            LockoutEnabled = false,
                            NormalizedEmail = "KASEY49@HOTMAİL.COM",
                            NormalizedUserName = "GABRİEL",
                            PasswordHash = "$2a$11$Xc1LUJO4nxABBTTOT3MMPOlwtdq1TXAfbQrVupFGQ.1QS..7aq1MW",
                            PhoneNumber = "05693538189",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d2a7f1f-df88-4e7e-8e06-b68f12f8d9d1",
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Gabriel"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61f08c7a-93eb-4e0e-8ee9-0969dde7b9a4",
                            CountryId = 1,
                            CreatedDate = new DateTime(2012, 10, 15, 20, 26, 13, 0, DateTimeKind.Unspecified),
                            CreatedID = "bf6e0f31-3516-429d-b830-e599917cab9c",
                            CreatedIPAddress = "69.75.118.180",
                            Email = "Amiya7@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "3940cd47-39d3-4e36-a3c7-99517da2eeef",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMİYA7@YAHOO.COM",
                            NormalizedUserName = "MUSTAFA",
                            PasswordHash = "$2a$11$2zCnCpt.u15Id/Mpp414t.8ClFb3Ry3FbO3By2D4SASFs2p7Svs.O",
                            PhoneNumber = "05149944993",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97ae7095-d3bd-46f8-9fad-6113569aa8c0",
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Mustafa"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "705af524-3cec-4435-b5c6-ac36b75f3cb6",
                            CountryId = 3,
                            CreatedDate = new DateTime(2007, 7, 9, 22, 58, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "20d9d9c4-e547-45c9-813c-912a0f4a6947",
                            CreatedIPAddress = "155.159.70.236",
                            Email = "Stella.Raynor@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "5230fe99-0927-45eb-82dc-67f604d34719",
                            LockoutEnabled = false,
                            NormalizedEmail = "STELLA.RAYNOR@YAHOO.COM",
                            NormalizedUserName = "PATRİCİA",
                            PasswordHash = "$2a$11$Zfm79xV8GH.08KBozxNhGuZr/rc34A9HneLpnLxcdYmrgKhZ/Cd0e",
                            PhoneNumber = "05201890237",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1619ce28-aaa9-412b-8250-0cf8d12e087b",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Patricia"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d01e75bf-7672-41cb-ab5a-4b91142ee591",
                            CountryId = 2,
                            CreatedDate = new DateTime(2006, 12, 4, 10, 20, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "65d9ad48-9010-428a-8059-2b69317b3b3c",
                            CreatedIPAddress = "41.113.118.219",
                            Email = "Daphney_Roob@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "1cbe7a1d-be51-4865-a549-d94129278fb1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAPHNEY_ROOB@HOTMAİL.COM",
                            NormalizedUserName = "DALE",
                            PasswordHash = "$2a$11$usSLbuZ4mGjVnibYXAvtpehGwL6i8VV.1GLnLopZ9EQBEwjJIp/Re",
                            PhoneNumber = "05505480820",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc0deb1d-769f-4911-9a7b-21f7c51104dd",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Dale"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7849eb3c-9331-4d23-9f0d-7d7ae9b86b0e",
                            CountryId = 4,
                            CreatedDate = new DateTime(2017, 10, 20, 5, 44, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "339008e1-ad78-4b0c-9301-890dfec4c255",
                            CreatedIPAddress = "229.130.178.109",
                            Email = "Jaeden38@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "e2f65da2-99f5-43f3-b50d-a2cd9b82c8c1",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAEDEN38@HOTMAİL.COM",
                            NormalizedUserName = "KRAİG",
                            PasswordHash = "$2a$11$p10FgyhIkUOzAxn4iY13nu6A4BzVVO8g5.LtSLNiGqandpR4sFfbm",
                            PhoneNumber = "05255644003",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a7b5df7-1728-45d3-b8ef-2ce99b3add0c",
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Kraig"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ff57c28-036c-4fcb-985b-553a2678e854",
                            CountryId = 1,
                            CreatedDate = new DateTime(2007, 3, 12, 4, 18, 13, 0, DateTimeKind.Unspecified),
                            CreatedID = "20f82783-dae2-49b8-b5db-3df5b463f26d",
                            CreatedIPAddress = "77.57.212.247",
                            Email = "Kobe21@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "69d83a05-977d-4d0e-9795-65369ba47816",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOBE21@YAHOO.COM",
                            NormalizedUserName = "VİDA",
                            PasswordHash = "$2a$11$aEL7rI7Bv9hEc3jZMQ6YNOq8ZHUraumSKhByYO3/VYwjs7pMetMWC",
                            PhoneNumber = "05547858708",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87726ddb-7a5e-4396-a074-01bb00a5f6ff",
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Vida"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 28, 1, 7, 13, 379, DateTimeKind.Local).AddTicks(3484));

                    b.HasKey("WebUserAccountId");

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            WebUserAccountId = 1,
                            Address = "91824 Jimmie Pines, Pamelastad, American Samoa",
                            Age = (byte)40,
                            BirthDate = new DateTime(1984, 8, 10, 3, 20, 34, 0, DateTimeKind.Unspecified),
                            Email = "Eloise94@gmail.com",
                            FirstName = "Bernadine",
                            Gender = "Unknown",
                            LastName = "Kris",
                            PhoneNumber = "05150830658",
                            PhotoPath = "demetrius.info",
                            TCN_Passport = "91355759993",
                            UpdatedDate = new DateTime(2019, 7, 11, 13, 9, 32, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 2,
                            Address = "76327 Braun Camp, Justicestad, Iceland",
                            Age = (byte)54,
                            BirthDate = new DateTime(1970, 11, 3, 3, 53, 41, 0, DateTimeKind.Unspecified),
                            Email = "Drew_Anderson@hotmail.com",
                            FirstName = "Tyshawn",
                            Gender = "Unknown",
                            LastName = "Schmitt",
                            PhoneNumber = "05819874888",
                            PhotoPath = "aiden.com",
                            TCN_Passport = "86861163517",
                            UpdatedDate = new DateTime(2018, 3, 8, 22, 50, 7, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 3,
                            Address = "2905 Boehm Views, Port Jovanmouth, Angola",
                            Age = (byte)47,
                            BirthDate = new DateTime(1978, 3, 2, 21, 12, 7, 0, DateTimeKind.Unspecified),
                            Email = "Damon.Rau@hotmail.com",
                            FirstName = "Isom",
                            Gender = "Unknown",
                            LastName = "Vandervort",
                            PhoneNumber = "05428353195",
                            PhotoPath = "emmalee.org",
                            TCN_Passport = "35346179441",
                            UpdatedDate = new DateTime(2000, 7, 14, 13, 56, 18, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 4,
                            Address = "9862 Spinka Island, Goyetteport, Cyprus",
                            Age = (byte)44,
                            BirthDate = new DateTime(1980, 9, 9, 2, 30, 36, 0, DateTimeKind.Unspecified),
                            Email = "Tommy_Will@hotmail.com",
                            FirstName = "Lupe",
                            Gender = "Male",
                            LastName = "Hansen",
                            PhoneNumber = "05561825704",
                            PhotoPath = "kaley.name",
                            TCN_Passport = "56108097608",
                            UpdatedDate = new DateTime(2015, 12, 12, 14, 14, 2, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 5,
                            Address = "8389 Sabryna Neck, Lessiefort, South Africa",
                            Age = (byte)25,
                            BirthDate = new DateTime(2000, 2, 27, 4, 45, 39, 0, DateTimeKind.Unspecified),
                            Email = "Milton_Langosh89@hotmail.com",
                            FirstName = "Stella",
                            Gender = "Unknown",
                            LastName = "Halvorson",
                            PhoneNumber = "05938408559",
                            PhotoPath = "mariane.org",
                            TCN_Passport = "19877753725",
                            UpdatedDate = new DateTime(2017, 2, 14, 9, 19, 17, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 6,
                            Address = "8916 Myra Mountains, Marcellaland, Latvia",
                            Age = (byte)21,
                            BirthDate = new DateTime(2003, 10, 18, 21, 26, 44, 0, DateTimeKind.Unspecified),
                            Email = "Hazel.Swaniawski25@hotmail.com",
                            FirstName = "Dallin",
                            Gender = "Unknown",
                            LastName = "Hermiston",
                            PhoneNumber = "05015261212",
                            PhotoPath = "florida.info",
                            TCN_Passport = "13595971332",
                            UpdatedDate = new DateTime(2021, 8, 11, 13, 18, 47, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 7,
                            Address = "943 Lennie Plain, South Declan, Hungary",
                            Age = (byte)38,
                            BirthDate = new DateTime(1987, 1, 8, 14, 32, 38, 0, DateTimeKind.Unspecified),
                            Email = "Darren.Harber@yahoo.com",
                            FirstName = "Eryn",
                            Gender = "Male",
                            LastName = "Keeling",
                            PhoneNumber = "05557920130",
                            PhotoPath = "zena.biz",
                            TCN_Passport = "43199355154",
                            UpdatedDate = new DateTime(2021, 5, 20, 4, 41, 33, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 8,
                            Address = "422 Bogisich Haven, New Ocie, Afghanistan",
                            Age = (byte)38,
                            BirthDate = new DateTime(1986, 12, 12, 5, 11, 47, 0, DateTimeKind.Unspecified),
                            Email = "Daryl81@yahoo.com",
                            FirstName = "Royce",
                            Gender = "Unknown",
                            LastName = "Oberbrunner",
                            PhoneNumber = "05833457202",
                            PhotoPath = "kasandra.biz",
                            TCN_Passport = "35709738301",
                            UpdatedDate = new DateTime(2010, 6, 12, 6, 59, 32, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractDriver", "ContractDriver")
                        .WithMany("ContractDrivers_RentalVehicles")
                        .HasForeignKey("ContactDriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Vehicles.RentalVehicle", "RentalVehicle")
                        .WithMany("ContractDrivers_RentalVehicles")
                        .HasForeignKey("RentalVehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractDriver");

                    b.Navigation("RentalVehicle");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractDriver", "ContractDriver")
                        .WithMany("ContractDrivers_Vehicles")
                        .HasForeignKey("ContractDriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Vehicles.Vehicle", "Vehicle")
                        .WithMany("ContractDrivers_Vehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractDriver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_ServiceRegion", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractTourGuide", "ContractTourGuide")
                        .WithMany("ContractTourGuides_ServiceRegions")
                        .HasForeignKey("ContractTourGuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("ContractTourGuides_ServiceRegions")
                        .HasForeignKey("ServiceRegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractTourGuide");

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_Tour", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractTourGuide", "ContractTourGuide")
                        .WithMany("ContractTourGuides_Tours")
                        .HasForeignKey("ContractTourGuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("ContractTourGuides_Tours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractTourGuide");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Events")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Tours")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", "PartnerCompany")
                        .WithMany("PartnerCompanyTransactions")
                        .HasForeignKey("PartnerCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractDrivers")
                        .HasForeignKey("SubContractWorkerSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractTourGuides")
                        .HasForeignKey("SubContractWorkerSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Regions.ResidenceRegion", "ResidenceRegion")
                        .WithMany("Employees")
                        .HasForeignKey("ResidenceRegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");

                    b.Navigation("ResidenceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.EventTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.EventTicket", "EventTicket")
                        .WithMany("EventTicketOrderDetails")
                        .HasForeignKey("EventTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.EventTicketOrder", "EventTicketOrder")
                        .WithMany("EventTicketOrderDetails")
                        .HasForeignKey("EventTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EventTicket");

                    b.Navigation("EventTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ProductOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Products.Product", "Product")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.ProductOrder", "ProductOrder")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.TourTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.TourTicket", "TourTicket")
                        .WithMany("TourTicketOrderDetails")
                        .HasForeignKey("TourTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.TourTicketOrder", "TourTicketOrder")
                        .WithMany("TourTicketOrderDetails")
                        .HasForeignKey("TourTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TourTicket");

                    b.Navigation("TourTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("EventTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("EventTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("ProductOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("ProductOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("TourTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("TourTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassEventTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("PassEventTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassTourTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("PassTourTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", "ProductSupplier")
                        .WithMany("Products")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("EventTickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("TourTickets")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", "RentalVehicleSupplier")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("RentalVehicleSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("RentalVehicleSupplier");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("Vehicles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("Vehicles")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("WebUserAccounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithOne("WebUserProfile")
                        .HasForeignKey("DataAccess.Entities.Models.WebUsers.WebUserProfile", "WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.Navigation("EventTickets");

                    b.Navigation("RentalVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.Navigation("ContractTourGuides_Tours");

                    b.Navigation("RentalVehicles");

                    b.Navigation("TourTickets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Navigation("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Navigation("PassEventTickets");

                    b.Navigation("PassTourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Navigation("ContractDrivers");

                    b.Navigation("ContractTourGuides");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WebUserAccounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.Navigation("ContractDrivers_RentalVehicles");

                    b.Navigation("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.Navigation("ContractTourGuides_ServiceRegions");

                    b.Navigation("ContractTourGuides_Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Navigation("EventTicketOrders");

                    b.Navigation("ProductOrders");

                    b.Navigation("TourTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.Navigation("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.Navigation("TourTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ResidenceRegion", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Navigation("ContractTourGuides_ServiceRegions");

                    b.Navigation("Events");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.Navigation("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.Navigation("TourTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Navigation("ContractDrivers_RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Navigation("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Navigation("EventTicketOrders");

                    b.Navigation("ProductOrders");

                    b.Navigation("TourTicketOrders");

                    b.Navigation("WebUserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
