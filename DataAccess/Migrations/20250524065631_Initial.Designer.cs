// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GezTurizmContext))]
    [Migration("20250524065631_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 696, DateTimeKind.Local).AddTicks(5090));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("59de98ac-8a8e-41b2-a028-b8a1b762f184");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("9ebdc85b-360a-4224-9797-cd4b44d1ff61");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityCategory = "Cave",
                            ActivityName = "inventore",
                            CreatedDate = new DateTime(2011, 3, 9, 17, 52, 15, 0, DateTimeKind.Unspecified),
                            CreatedID = "6f8f01cc-5bc7-4c35-af65-e7b089b34ff6",
                            CreatedIPAddress = "65.143.173.14",
                            Description = "Frozen Guinea Franc Licensed Concrete Pants Incredible Granite Pants cyan Integration frictionless microchip",
                            EndDate = new DateTime(2020, 5, 23, 21, 11, 10, 0, DateTimeKind.Unspecified),
                            Guid = "3d674a23-3522-44a4-b481-468e0b0cad76",
                            IsUpdated = "Yes",
                            RegionId = 4,
                            StartDate = new DateTime(2020, 5, 23, 10, 11, 10, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            ActivityCategory = "Castle",
                            ActivityName = "maxime",
                            CreatedDate = new DateTime(2006, 5, 12, 2, 36, 42, 0, DateTimeKind.Unspecified),
                            CreatedID = "953b53ec-1d85-402c-978c-9d6761bc9f7d",
                            CreatedIPAddress = "119.41.20.107",
                            Description = "Djibouti Fresh Home & Automotive protocol New Taiwan Dollar Vision-oriented firewall Greens",
                            EndDate = new DateTime(2001, 11, 14, 16, 14, 31, 0, DateTimeKind.Unspecified),
                            Guid = "25ddb7c1-b142-4ba5-b273-7a1a31c7356e",
                            IsUpdated = "Yes",
                            RegionId = 1,
                            StartDate = new DateTime(2001, 11, 14, 7, 14, 31, 0, DateTimeKind.Unspecified),
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            ActivityCategory = "ReligiousStructure",
                            ActivityName = "quo",
                            CreatedDate = new DateTime(2015, 2, 3, 9, 26, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "fbab6de0-3eaa-4c50-aa5b-d57e612fcca8",
                            CreatedIPAddress = "179.251.90.131",
                            Description = "bus program Shore Bolivia Rustic Wooden Fish synthesizing hacking South Carolina",
                            EndDate = new DateTime(2009, 11, 11, 22, 12, 14, 0, DateTimeKind.Unspecified),
                            Guid = "f3f7d63d-c843-4ea1-b129-05bc0df32b14",
                            IsUpdated = "Yes",
                            RegionId = 3,
                            StartDate = new DateTime(2009, 11, 11, 15, 12, 14, 0, DateTimeKind.Unspecified),
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            ActivityCategory = "NightWalk",
                            ActivityName = "voluptatem",
                            CreatedDate = new DateTime(2006, 12, 3, 23, 50, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "fed15db4-2dee-4366-a799-10c6aeb0c2c3",
                            CreatedIPAddress = "130.253.184.245",
                            Description = "Dynamic Sports & Sports Cambridgeshire value-added upward-trending IB web-readiness Buckinghamshire",
                            EndDate = new DateTime(2006, 6, 28, 3, 26, 50, 0, DateTimeKind.Unspecified),
                            Guid = "075493c3-878f-4af8-b6f0-8ac248b28eb8",
                            IsUpdated = "No",
                            RegionId = 1,
                            StartDate = new DateTime(2006, 6, 27, 18, 26, 50, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            ActivityCategory = "Meditation",
                            ActivityName = "iste",
                            CreatedDate = new DateTime(2001, 3, 4, 19, 17, 30, 0, DateTimeKind.Unspecified),
                            CreatedID = "ba261008-3b76-45a1-8b3c-cd6cfd17db52",
                            CreatedIPAddress = "148.131.162.129",
                            Description = "solution programming Savings Account Chief Handmade Massachusetts action-items Guinea Franc",
                            EndDate = new DateTime(2012, 10, 6, 5, 29, 20, 0, DateTimeKind.Unspecified),
                            Guid = "55b5ca03-15f5-4969-9146-64b1475294a1",
                            IsUpdated = "No",
                            RegionId = 2,
                            StartDate = new DateTime(2012, 10, 5, 20, 29, 20, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcceptTickets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 698, DateTimeKind.Local).AddTicks(2126));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("45712566-4ac4-41dc-a4af-98e9d6049732");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a1a0096b-ca8f-46dc-a3c1-556d03e66bdd");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PartnerCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptTickets = "Yes",
                            Address = "946 Gunner Junction, Luettgenport, Netherlands Antilles",
                            Balance = -14261.808988722690000m,
                            CompanyName = "Hirthe, Medhurst and White and Sons",
                            ContactName = "Amalia Mann",
                            ContactTitle = "Forward Web Producer",
                            CreatedDate = new DateTime(2007, 2, 1, 17, 50, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "c49d1ffe-30d6-4214-9c6e-102f8d368d18",
                            CreatedIPAddress = "79.88.111.169",
                            Credit = 83654.328779559730000m,
                            Debit = 69392.519790837040000m,
                            Email = "Tatum53@gmail.com",
                            Guid = "8f0e2e6d-0b9c-4540-a760-774c0018290b",
                            IsUpdated = "No",
                            PhoneNumber = "02151451520",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            AcceptTickets = "Yes",
                            Address = "2861 Royce Causeway, Jacobsport, Morocco",
                            Balance = 378.587414277180000m,
                            CompanyName = "Wiegand, Deckow and Toy Inc",
                            ContactName = "Fay Considine",
                            ContactTitle = "National Division Producer",
                            CreatedDate = new DateTime(2000, 2, 25, 3, 43, 14, 0, DateTimeKind.Unspecified),
                            CreatedID = "d9c2dd0c-8683-4429-a053-be64964bcd04",
                            CreatedIPAddress = "18.101.72.76",
                            Credit = 35310.798527375440000m,
                            Debit = 35689.385941652620000m,
                            Email = "Millie_Legros@yahoo.com",
                            Guid = "f688d527-399f-4289-aee5-2bab9c856e48",
                            IsUpdated = "No",
                            PhoneNumber = "02139311126",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            AcceptTickets = "Yes",
                            Address = "747 Ellsworth Lock, Tristinland, Bangladesh",
                            Balance = -19343.338572669660000m,
                            CompanyName = "Jacobs, Haag and Rohan and Sons",
                            ContactName = "Murphy Schaden",
                            ContactTitle = "Dynamic Infrastructure Assistant",
                            CreatedDate = new DateTime(2003, 7, 3, 23, 41, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "ba3fc251-8468-42d5-9bad-81d8e25129cb",
                            CreatedIPAddress = "110.228.223.178",
                            Credit = 70041.477854324350000m,
                            Debit = 50698.139281654690000m,
                            Email = "Aaliyah.Fay95@yahoo.com",
                            Guid = "b83f89e7-5011-48de-8411-03cf0df10460",
                            IsUpdated = "Yes",
                            PhoneNumber = "02155915095",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            AcceptTickets = "Yes",
                            Address = "2180 Lueilwitz Garden, New Rachelburgh, Philippines",
                            Balance = 17957.380730088240000m,
                            CompanyName = "Gerlach, Christiansen and Bosco LLC",
                            ContactName = "Marquis Stanton",
                            ContactTitle = "Regional Optimization Facilitator",
                            CreatedDate = new DateTime(2016, 6, 7, 10, 49, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "a64b59d5-0287-46ac-a0f0-4a9660638f53",
                            CreatedIPAddress = "241.43.146.177",
                            Credit = 60011.55513617950000m,
                            Debit = 77968.935866267740000m,
                            Email = "Krystal.Cassin@hotmail.com",
                            Guid = "a8180fac-55d2-406b-a5d1-be347331f24a",
                            IsUpdated = "No",
                            PhoneNumber = "02140366937",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            AcceptTickets = "Yes",
                            Address = "073 Frederique Tunnel, Hilperthaven, Qatar",
                            Balance = -34012.944826075800000m,
                            CompanyName = "Rolfson, Williamson and Zboncak Group",
                            ContactName = "Nathanial Nienow",
                            ContactTitle = "Senior Brand Liaison",
                            CreatedDate = new DateTime(2018, 10, 13, 1, 38, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "1bb102b8-e6db-4e3e-81d2-fc7b1972e3b5",
                            CreatedIPAddress = "224.220.3.61",
                            Credit = 88202.100684479320000m,
                            Debit = 54189.155858403520000m,
                            Email = "Khalil69@gmail.com",
                            Guid = "1bd5c33d-f512-4abb-92a8-0f4b23667c66",
                            IsUpdated = "No",
                            PhoneNumber = "02102568262",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 699, DateTimeKind.Local).AddTicks(8505));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8071a790-ace0-467a-b93b-5727a080c284");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b15d9816-7c88-4ae3-a396-7eafd95dc0db");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyId");

                    b.ToTable("PartnerCompanyTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2012, 3, 22, 1, 28, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "20a9aba4-5270-44a9-9387-60f6ea10d940",
                            CreatedIPAddress = "5.220.233.132",
                            Guid = "44708b98-0d25-4013-a1b5-608097954d50",
                            IsUpdated = "No",
                            PartnerCompanyId = 2,
                            Status = "Passive",
                            TotalCost = 7574.299482215878000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2003, 9, 18, 6, 52, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "bb1388a1-9461-4876-8696-a850d5ca4b1c",
                            CreatedIPAddress = "190.67.102.17",
                            Guid = "977f7866-0255-4af4-8b63-36c8dc850a57",
                            IsUpdated = "No",
                            PartnerCompanyId = 3,
                            Status = "Active",
                            TotalCost = 1454.7429944368696000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2002, 1, 11, 1, 31, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "53880bc6-1c77-488e-abff-2d276e17fd56",
                            CreatedIPAddress = "158.130.200.24",
                            Guid = "94c9902b-a4c8-4b8a-ba3e-148e93aef350",
                            IsUpdated = "No",
                            PartnerCompanyId = 4,
                            Status = "Passive",
                            TotalCost = 12628.270465738864000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2014, 11, 14, 23, 45, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "b7590e99-f2d6-456b-9007-ac3403795fa7",
                            CreatedIPAddress = "99.153.48.160",
                            Guid = "5d3a4d4c-db0b-460e-8568-3c14a354c445",
                            IsUpdated = "No",
                            PartnerCompanyId = 4,
                            Status = "Passive",
                            TotalCost = 1484.2432382800698000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2012, 5, 10, 8, 24, 27, 0, DateTimeKind.Unspecified),
                            CreatedID = "3bb94f73-061a-4cd7-ae42-3400de7c9c89",
                            CreatedIPAddress = "204.25.163.13",
                            Guid = "3407a945-1a53-454a-8cf0-939306f39ee7",
                            IsUpdated = "No",
                            PartnerCompanyId = 3,
                            Status = "Unknown",
                            TotalCost = 14132.685237750932000m,
                            Type = "Purchase"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 704, DateTimeKind.Local).AddTicks(4113));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e4c50a8f-1f05-4bcb-a5df-12fff9ce865b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7ba9f666-6cd6-43d1-adce-80edc5e2e29e");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RentalVehicleSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "8131 McClure Overpass, Diegofort, Russian Federation",
                            CompanyName = "Cummerata Inc and Sons",
                            ContactName = "Israel Blick",
                            ContactTitle = "Dynamic Factors Consultant",
                            CreatedDate = new DateTime(2020, 10, 6, 19, 27, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "f35ed2cf-5a42-4a77-af7a-c2abf5975933",
                            CreatedIPAddress = "181.143.234.18",
                            Email = "Lizzie.Stanton63@hotmail.com",
                            Guid = "20b02f1d-e23b-40cd-bbd3-537d05e16a97",
                            IsUpdated = "No",
                            PhoneNumber = "02145160037",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 2,
                            Address = "48397 Geoffrey Throughway, Osinskistad, Bhutan",
                            CompanyName = "Renner Inc Inc",
                            ContactName = "Abe Douglas",
                            ContactTitle = "International Assurance Orchestrator",
                            CreatedDate = new DateTime(2009, 6, 12, 13, 24, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "4c835ff2-80fb-4a18-8cc8-230f63871389",
                            CreatedIPAddress = "162.85.206.136",
                            Email = "Lawson28@gmail.com",
                            Guid = "3bc6dfc0-f36a-48a5-9c4a-4d3734c9e1dd",
                            IsUpdated = "No",
                            PhoneNumber = "02130733685",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Address = "07151 O'Kon Forges, Bayerfort, Mongolia",
                            CompanyName = "Hansen, Hane and Stanton Group",
                            ContactName = "Adrien Lebsack",
                            ContactTitle = "Direct Response Architect",
                            CreatedDate = new DateTime(2001, 9, 9, 1, 39, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "2992b0a1-df42-4315-843f-19b74946ee92",
                            CreatedIPAddress = "81.13.219.135",
                            Email = "Verda_Stiedemann58@yahoo.com",
                            Guid = "dd23c1cc-7155-4c1b-b713-18f9a1397020",
                            IsUpdated = "No",
                            PhoneNumber = "02147277962",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            Address = "617 Hilpert Avenue, Colestad, Lithuania",
                            CompanyName = "Thompson - Klocko Inc",
                            ContactName = "Laverne Rutherford",
                            ContactTitle = "Human Configuration Analyst",
                            CreatedDate = new DateTime(2021, 2, 3, 2, 31, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "5ce2e088-b85d-4cf6-97ea-7dd12d182e06",
                            CreatedIPAddress = "61.71.152.184",
                            Email = "Scottie3@hotmail.com",
                            Guid = "3065e47d-9ba5-4b11-b357-4c87ea6d8e69",
                            IsUpdated = "No",
                            PhoneNumber = "02125200532",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "007 Beier Drive, West Sonia, Sri Lanka",
                            CompanyName = "Block, Haag and Anderson Inc",
                            ContactName = "Ernestine Stanton",
                            ContactTitle = "Legacy Implementation Engineer",
                            CreatedDate = new DateTime(2019, 12, 21, 7, 9, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "f8be263b-4019-4c70-ade3-66659ea2d3ec",
                            CreatedIPAddress = "186.132.193.95",
                            Email = "Rocio.Kassulke70@hotmail.com",
                            Guid = "70f17a85-ed01-422d-9059-42504ff1adba",
                            IsUpdated = "No",
                            PhoneNumber = "02173952431",
                            Status = "Unknown"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 706, DateTimeKind.Local).AddTicks(2037));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2b2eb69d-3a60-4506-a8ab-9d5efd5dcb8b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("9bba904c-8c30-4948-b750-9db3888b05ae");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SubContractWorkerSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "902 Juliet Loaf, Bryonburgh, American Samoa",
                            CompanyName = "Murphy LLC LLC",
                            ContactName = "Esperanza Wintheiser",
                            ContactTitle = "Product Functionality Specialist",
                            CreatedDate = new DateTime(2002, 9, 9, 17, 33, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "0a40c467-7633-44e7-a356-84a3bd25e296",
                            CreatedIPAddress = "238.232.52.47",
                            Email = "Ruben.Pacocha@gmail.com",
                            Guid = "c8cd2be1-a384-49cb-9642-afc79b814f94",
                            IsUpdated = "No",
                            PhoneNumber = "02144880789",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Address = "6553 Daugherty Ports, Roxanehaven, Holy See (Vatican City State)",
                            CompanyName = "Jacobi, Wyman and Ortiz and Sons",
                            ContactName = "Abelardo Marvin",
                            ContactTitle = "Central Brand Assistant",
                            CreatedDate = new DateTime(2002, 8, 2, 21, 18, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "505a8000-7fba-48b0-be9f-e372678b6f19",
                            CreatedIPAddress = "34.196.66.16",
                            Email = "Eunice_Tromp@yahoo.com",
                            Guid = "641db359-9f5d-4cb8-b0d1-d4821041e176",
                            IsUpdated = "No",
                            PhoneNumber = "02186447217",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Address = "982 Kamille Mall, Jeffereyhaven, Turkmenistan",
                            CompanyName = "Flatley - Emard Group",
                            ContactName = "Luis Mante",
                            ContactTitle = "Future Accounts Designer",
                            CreatedDate = new DateTime(2016, 5, 7, 20, 38, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "c97ec3d6-029a-4f0b-9f08-317f912e6f29",
                            CreatedIPAddress = "252.122.190.67",
                            Email = "Jeffery88@hotmail.com",
                            Guid = "c3729fb6-3a85-4652-bb2f-0676cc39b524",
                            IsUpdated = "No",
                            PhoneNumber = "02139824678",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Address = "7700 Jessie Stravenue, Ratkemouth, Albania",
                            CompanyName = "Lowe, Breitenberg and Bashirian LLC",
                            ContactName = "Fannie Schowalter",
                            ContactTitle = "Principal Accounts Orchestrator",
                            CreatedDate = new DateTime(2009, 7, 14, 8, 53, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "3ce48c17-0775-4595-8e29-ce0f41ce669c",
                            CreatedIPAddress = "154.227.150.217",
                            Email = "Rudolph.Stehr83@hotmail.com",
                            Guid = "897dd6a9-3f13-4a94-b59a-0c17c662b427",
                            IsUpdated = "No",
                            PhoneNumber = "02111859183",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            Address = "096 Connelly Village, Effertzfurt, Isle of Man",
                            CompanyName = "Veum - Price Group",
                            ContactName = "Maria Ziemann",
                            ContactTitle = "Dynamic Web Architect",
                            CreatedDate = new DateTime(2000, 11, 5, 17, 35, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "ba8d442f-c486-4483-b06c-bbf9a36a7803",
                            CreatedIPAddress = "81.50.59.42",
                            Email = "Kailyn.Swift35@gmail.com",
                            Guid = "af8e2f1b-5c86-4041-b9b9-e225f2af70ba",
                            IsUpdated = "No",
                            PhoneNumber = "02182166882",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 709, DateTimeKind.Local).AddTicks(3767));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("88b25614-39bf-495e-b95b-3aa3dc1fe8bb");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverLicense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e037325b-baa4-49c4-91ad-5d1804b825d9");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("ContractEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "England",
                            Age = (byte)43,
                            BirthDate = new DateTime(1981, 10, 17, 19, 8, 34, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2008, 3, 5, 8, 40, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "8ea5397e-5451-41ad-a85c-b366fbb60997",
                            CreatedIPAddress = "63.16.69.213",
                            DriverLicense = "B",
                            Email = "Rene67@gmail.com",
                            EndContract = new DateTime(2022, 12, 21, 22, 29, 8, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Catharine",
                            FullName = "CatharineLittel",
                            Gender = 2,
                            Guid = "93223d87-1b10-42ed-8e54-960baebc1e23",
                            HireDate = new DateTime(2021, 12, 21, 22, 29, 8, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "French",
                            LastName = "Littel",
                            PhoneNumber = "05341577364",
                            PhotoPath = "https://odell.info/locks/corporate",
                            Status = "Unknown",
                            SupplierId = 4,
                            TCN_Passport = "64617652742"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Scotland",
                            Age = (byte)36,
                            BirthDate = new DateTime(1988, 8, 12, 13, 36, 29, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2020, 11, 22, 20, 47, 13, 0, DateTimeKind.Unspecified),
                            CreatedID = "5a9015ab-6b02-4816-8dec-7a97ff24a98b",
                            CreatedIPAddress = "105.11.230.213",
                            DriverLicense = "None",
                            Email = "Pearl.Walsh58@gmail.com",
                            EndContract = new DateTime(2001, 2, 27, 2, 9, 3, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Donna",
                            FullName = "DonnaBogisich",
                            Gender = 1,
                            Guid = "0e947518-75c1-422e-a403-03c96c1cbfa7",
                            HireDate = new DateTime(2000, 2, 27, 2, 9, 3, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Spanish",
                            LastName = "Bogisich",
                            PhoneNumber = "05736930024",
                            PhotoPath = "http://kylee.biz/contingency",
                            Status = "Passive",
                            SupplierId = 4,
                            TCN_Passport = "30016579933"
                        },
                        new
                        {
                            Id = 3,
                            Address = "England",
                            Age = (byte)33,
                            BirthDate = new DateTime(1991, 6, 15, 11, 59, 25, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2010, 12, 10, 11, 57, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "455f86fb-9ce4-4017-b48b-7d03314d80f7",
                            CreatedIPAddress = "84.144.234.13",
                            DriverLicense = "D",
                            Email = "Duane74@gmail.com",
                            EndContract = new DateTime(2010, 7, 24, 19, 26, 31, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Layne",
                            FullName = "LayneRau",
                            Gender = 1,
                            Guid = "40c7fdd9-3d2b-40ea-80e6-3fbeb0c0a0a2",
                            HireDate = new DateTime(2009, 7, 24, 19, 26, 31, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Spanish",
                            LastName = "Rau",
                            PhoneNumber = "05250326115",
                            PhotoPath = "http://lea.biz/ıb/turnpike",
                            Status = "Unknown",
                            SupplierId = 2,
                            TCN_Passport = "68289163700"
                        },
                        new
                        {
                            Id = 4,
                            Address = "England",
                            Age = (byte)54,
                            BirthDate = new DateTime(1971, 3, 10, 20, 51, 44, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2009, 2, 14, 6, 52, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "e877a8fc-5fbf-4355-b9aa-3a5a1bd8e5ad",
                            CreatedIPAddress = "161.233.139.165",
                            DriverLicense = "D",
                            Email = "Marlin.Blick25@yahoo.com",
                            EndContract = new DateTime(2019, 10, 22, 14, 11, 26, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Janie",
                            FullName = "JanieKlein",
                            Gender = 0,
                            Guid = "ab00ac7f-1926-4b07-b062-5df4e04d9378",
                            HireDate = new DateTime(2018, 10, 22, 14, 11, 26, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Arabic",
                            LastName = "Klein",
                            PhoneNumber = "05580375408",
                            PhotoPath = "https://corene.org/portals/iterate",
                            Status = "Active",
                            SupplierId = 4,
                            TCN_Passport = "81251255355"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Wales",
                            Age = (byte)55,
                            BirthDate = new DateTime(1970, 3, 7, 2, 22, 21, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2004, 6, 15, 8, 23, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "d51473f7-fe83-4e85-8319-e7a3304f511c",
                            CreatedIPAddress = "204.193.222.119",
                            DriverLicense = "None",
                            Email = "Malachi_Larson10@hotmail.com",
                            EndContract = new DateTime(2002, 7, 11, 14, 8, 47, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Frankie",
                            FullName = "FrankieStroman",
                            Gender = 1,
                            Guid = "f14e4955-ed56-46e1-b92c-21b9607fd0dd",
                            HireDate = new DateTime(2001, 7, 11, 14, 8, 47, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Arabic",
                            LastName = "Stroman",
                            PhoneNumber = "05300651762",
                            PhotoPath = "https://mason.info/generic-rubber-fish/toys",
                            Status = "Passive",
                            SupplierId = 3,
                            TCN_Passport = "62950119714"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("ContractCount")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 710, DateTimeKind.Local).AddTicks(7778));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("39f746d0-9d65-4de6-aa23-65c262f1cd31");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("DaysWorked")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("f7e7682a-6ffb-4012-969c-fbdd14bafe8c");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Scotland",
                            Age = (byte)54,
                            BirthDate = new DateTime(1971, 4, 25, 18, 18, 13, 0, DateTimeKind.Unspecified),
                            ContractCount = 2,
                            CountryId = 3,
                            CreatedDate = new DateTime(2018, 9, 24, 4, 38, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "6dbfd465-04fe-4ef1-ad49-a68749c393f0",
                            CreatedIPAddress = "166.120.154.39",
                            CurrentPosition = "Accounting",
                            DaysWorked = 1796,
                            Email = "Reuben_Mueller@gmail.com",
                            EndContract = new DateTime(2026, 6, 22, 18, 25, 5, 0, DateTimeKind.Unspecified),
                            Experience = 8,
                            FirstName = "Kayla",
                            FullName = "KaylaDenesik",
                            Gender = "Male",
                            Guid = "b704755e-3bcc-46e6-8be2-e5001bb89552",
                            HireDate = new DateTime(2020, 6, 22, 18, 25, 5, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Denesik",
                            PhoneNumber = "05104651329",
                            PhotoPath = "https://beryl.name/seize/grey/5th-generation",
                            Status = "Unknown",
                            TCN_Passport = "02471968390"
                        },
                        new
                        {
                            Id = 2,
                            Address = "England",
                            Age = (byte)33,
                            BirthDate = new DateTime(1991, 8, 17, 8, 52, 31, 0, DateTimeKind.Unspecified),
                            ContractCount = 8,
                            CountryId = 3,
                            CreatedDate = new DateTime(2013, 4, 6, 11, 58, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "41fc8074-d460-41a4-86fa-f70461fd383a",
                            CreatedIPAddress = "109.20.170.54",
                            CurrentPosition = "Operations",
                            DaysWorked = 7575,
                            Email = "Gay_Turcotte@hotmail.com",
                            EndContract = new DateTime(2028, 8, 26, 11, 58, 28, 0, DateTimeKind.Unspecified),
                            Experience = 11,
                            FirstName = "Daniela",
                            FullName = "DanielaOlson",
                            Gender = "Female",
                            Guid = "9471c26b-cd83-4f33-99d9-ad63483b153c",
                            HireDate = new DateTime(2004, 8, 26, 11, 58, 28, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Olson",
                            PhoneNumber = "05940039219",
                            PhotoPath = "http://randi.name/luxembourg/ıntuitive",
                            Status = "Passive",
                            TCN_Passport = "25035349133"
                        },
                        new
                        {
                            Id = 3,
                            Address = "England",
                            Age = (byte)51,
                            BirthDate = new DateTime(1974, 4, 6, 8, 19, 47, 0, DateTimeKind.Unspecified),
                            ContractCount = 5,
                            CountryId = 5,
                            CreatedDate = new DateTime(2008, 10, 18, 1, 18, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "a6b976c5-e95e-4a6b-aeda-a2ade7defa37",
                            CreatedIPAddress = "52.65.102.97",
                            CurrentPosition = "Accounting",
                            DaysWorked = 5038,
                            Email = "Clark.Aufderhar@yahoo.com",
                            EndContract = new DateTime(2026, 8, 8, 6, 18, 54, 0, DateTimeKind.Unspecified),
                            Experience = 19,
                            FirstName = "Friedrich",
                            FullName = "FriedrichLynch",
                            Gender = "Male",
                            Guid = "0a7b2a33-ada5-4a9a-9e92-84fd613bd83b",
                            HireDate = new DateTime(2011, 8, 8, 6, 18, 54, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Lynch",
                            PhoneNumber = "05815925353",
                            PhotoPath = "https://harvey.com/sas",
                            Status = "Passive",
                            TCN_Passport = "48590176489"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Scotland",
                            Age = (byte)32,
                            BirthDate = new DateTime(1992, 9, 21, 1, 15, 15, 0, DateTimeKind.Unspecified),
                            ContractCount = 2,
                            CountryId = 3,
                            CreatedDate = new DateTime(2005, 1, 4, 4, 17, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "5891c39d-f758-461c-8711-20376c9a2d68",
                            CreatedIPAddress = "228.162.30.249",
                            CurrentPosition = "Accounting",
                            DaysWorked = 1688,
                            Email = "Reina.Schuppe45@hotmail.com",
                            EndContract = new DateTime(2026, 10, 8, 16, 57, 14, 0, DateTimeKind.Unspecified),
                            Experience = 12,
                            FirstName = "Jude",
                            FullName = "JudeWest",
                            Gender = "Female",
                            Guid = "09514cdc-9b0e-4543-9cb4-113863a49e0a",
                            HireDate = new DateTime(2020, 10, 8, 16, 57, 14, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "West",
                            PhoneNumber = "05332191033",
                            PhotoPath = "https://lela.info/fantastic",
                            Status = "Unknown",
                            TCN_Passport = "33811466563"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Scotland",
                            Age = (byte)51,
                            BirthDate = new DateTime(1974, 2, 7, 8, 57, 12, 0, DateTimeKind.Unspecified),
                            ContractCount = 9,
                            CountryId = 5,
                            CreatedDate = new DateTime(2009, 1, 14, 14, 35, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "bc17baf5-dae2-4c4d-b182-6fb125c0ea38",
                            CreatedIPAddress = "93.205.159.102",
                            CurrentPosition = "Marketing",
                            DaysWorked = 8886,
                            Email = "Nasir66@hotmail.com",
                            EndContract = new DateTime(2028, 1, 23, 22, 29, 30, 0, DateTimeKind.Unspecified),
                            Experience = 24,
                            FirstName = "Rico",
                            FullName = "RicoOsinski",
                            Gender = "Male",
                            Guid = "c135939e-a951-40ff-8624-1a32e206c799",
                            HireDate = new DateTime(2001, 1, 23, 22, 29, 30, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Osinski",
                            PhoneNumber = "05489576010",
                            PhotoPath = "http://bo.net/ıncredible-steel-ball/object-oriented/music",
                            Status = "Active",
                            TCN_Passport = "09107927563"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 716, DateTimeKind.Local).AddTicks(9690));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("cfa562c9-c4ce-4caf-a6a9-a98922533f1d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3ef11174-3bf3-4da9-8eeb-419e1faa748f");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("ActivityTicketOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2000, 9, 6, 11, 9, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "2b8da5ea-fef6-494c-81ab-a4d085134a3e",
                            CreatedIPAddress = "193.166.20.102",
                            EmployeeId = 4,
                            Guid = "f1c0a31c-141d-44ca-b8f1-d2f55ef7463a",
                            IsUpdated = "No",
                            Note = "Drive Human Avenue Martinique",
                            Status = "Unknown",
                            WebUserAccountId = 4,
                            WebUserEmail = "Yesenia.Breitenberg@yahoo.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2019, 8, 24, 11, 58, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "85aa7d88-3d77-434c-9e99-897edb2193dd",
                            CreatedIPAddress = "43.57.24.238",
                            EmployeeId = 2,
                            Guid = "7238719c-b372-4600-9d25-22c09b2dea2a",
                            IsUpdated = "Yes",
                            Note = "backing up lime Refined withdrawal",
                            Status = "Active",
                            WebUserAccountId = 4,
                            WebUserEmail = "Charley_Franecki6@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2006, 11, 21, 23, 50, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "2fda7c04-cff5-4e81-8d44-76da5213886d",
                            CreatedIPAddress = "234.106.195.218",
                            EmployeeId = 3,
                            Guid = "4bfb9873-ec39-4e7a-a904-c6079136e680",
                            IsUpdated = "No",
                            Note = "Maine South Georgia and the South Sandwich Islands Borders Iowa",
                            Status = "Active",
                            WebUserAccountId = 2,
                            WebUserEmail = "Vivien14@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2001, 12, 3, 15, 57, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "a283e787-9db4-4d89-b160-664093c4e3b7",
                            CreatedIPAddress = "127.144.145.198",
                            EmployeeId = 3,
                            Guid = "df11d9cd-bcae-47a6-bc7d-7af242c79bc5",
                            IsUpdated = "No",
                            Note = "Orchestrator Handcrafted Concrete Pizza Maine syndicate",
                            Status = "Passive",
                            WebUserAccountId = 3,
                            WebUserEmail = "Kayla93@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2003, 1, 2, 20, 47, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "d43d9d1e-b824-4056-84d8-050820d03380",
                            CreatedIPAddress = "250.176.162.9",
                            EmployeeId = 4,
                            Guid = "31dc6656-2e8e-499c-90cb-12debfc44e20",
                            IsUpdated = "No",
                            Note = "Money Market Account Views Investor Sri Lanka Rupee",
                            Status = "Passive",
                            WebUserAccountId = 1,
                            WebUserEmail = "Newton17@yahoo.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityTicketOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 715, DateTimeKind.Local).AddTicks(4777));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2b25df55-7689-4df4-bfa9-d4a79199f2c5");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2c372605-01b6-4d15-9a54-0743faca5f52");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTicketId");

                    b.HasIndex("ActivityTicketOrderId");

                    b.ToTable("ActivityTicketOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTicketId = 2,
                            ActivityTicketOrderId = 1,
                            CreatedDate = new DateTime(2006, 10, 6, 15, 47, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "f8a3fdee-c3b7-47b5-89cc-9bfdd9a7f7a8",
                            CreatedIPAddress = "207.83.173.17",
                            Discount = 0.0606998918836370m,
                            Guid = "58f135c2-e3cd-4c84-a3ae-f6a60a834900",
                            IsUpdated = "No",
                            Quantity = 3,
                            Status = "Unknown",
                            TotalCost = 2188.4408157001720205238804484m,
                            UnitPrice = 776.621087974672500m
                        },
                        new
                        {
                            Id = 2,
                            ActivityTicketId = 3,
                            ActivityTicketOrderId = 3,
                            CreatedDate = new DateTime(2001, 2, 5, 2, 42, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "a1f5c20e-f43c-4ccf-ab65-69120b441349",
                            CreatedIPAddress = "176.39.154.103",
                            Discount = 0.3572485339975670m,
                            Guid = "9b2739b8-c19d-47b6-85e6-44e517bb9e9f",
                            IsUpdated = "Yes",
                            Quantity = 3,
                            Status = "Passive",
                            TotalCost = 302.10337886015049274980932893m,
                            UnitPrice = 156.6719511555896600m
                        },
                        new
                        {
                            Id = 3,
                            ActivityTicketId = 3,
                            ActivityTicketOrderId = 5,
                            CreatedDate = new DateTime(2013, 10, 1, 10, 54, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "d6930a41-62ca-4805-80cb-67b54b66e852",
                            CreatedIPAddress = "92.159.157.2",
                            Discount = 0.3109006994643660m,
                            Guid = "249bd953-89b3-4c7b-99a0-1c7dcef06da5",
                            IsUpdated = "No",
                            Quantity = 3,
                            Status = "Unknown",
                            TotalCost = 1671.3891876160034173311451548m,
                            UnitPrice = 808.489761594997800m
                        },
                        new
                        {
                            Id = 4,
                            ActivityTicketId = 1,
                            ActivityTicketOrderId = 5,
                            CreatedDate = new DateTime(2016, 12, 26, 6, 53, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "5fc72cd4-bead-4a14-b45c-7e2bee5a517e",
                            CreatedIPAddress = "211.180.238.78",
                            Discount = 0.1440009325696540m,
                            Guid = "1028a9d1-d6c5-462b-876e-7d06d359352e",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Unknown",
                            TotalCost = 404.65976158000054313111273912m,
                            UnitPrice = 472.733881351954100m
                        },
                        new
                        {
                            Id = 5,
                            ActivityTicketId = 2,
                            ActivityTicketOrderId = 4,
                            CreatedDate = new DateTime(2001, 6, 17, 8, 29, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "ee0afb04-329f-4515-bcd8-769917363755",
                            CreatedIPAddress = "142.65.210.229",
                            Discount = 0.2597510914502160m,
                            Guid = "28dde7dc-62c5-4d60-ac8f-8aa43b4aecb0",
                            IsUpdated = "No",
                            Quantity = 3,
                            Status = "Active",
                            TotalCost = 1329.0273377918321012445777557m,
                            UnitPrice = 598.4596633383400m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 707, DateTimeKind.Local).AddTicks(9159));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1a2bf5dc-bb72-4d66-9438-d3a141a4626f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("5a8691ea-d7a9-4ed4-a1ef-279babdb679f");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = "None",
                            CountryCode = "TR",
                            CountryDescription = "Est velit iusto est fugiat assumenda.",
                            CountryName = "Turkey",
                            CountryPhone = "+90",
                            CreatedDate = new DateTime(2005, 2, 20, 11, 15, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "582cd729-0a0f-4c52-9b29-9c76d20a53c9",
                            CreatedIPAddress = "196.121.82.167",
                            Guid = "7a218c9a-f1f3-42a1-bcac-107bf84baa54",
                            IsUpdated = "No",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Continent = "Australia",
                            CountryCode = "RU",
                            CountryDescription = "Odit quibusdam impedit voluptate delectus blanditiis.",
                            CountryName = "Russia",
                            CountryPhone = "+7",
                            CreatedDate = new DateTime(2015, 4, 8, 12, 37, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "1ee4fe3f-75a8-4ed1-afc1-2911e62a5a11",
                            CreatedIPAddress = "81.218.168.184",
                            Guid = "780c7190-9992-4c9c-827a-ee2acd1e5c2e",
                            IsUpdated = "No",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Continent = "SouthAmerica",
                            CountryCode = "USA",
                            CountryDescription = "Qui ex ut ex facilis distinctio.",
                            CountryName = "United States of America",
                            CountryPhone = "+1",
                            CreatedDate = new DateTime(2008, 7, 8, 11, 28, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "901ee7e1-54b5-4115-8b9b-e9692cc08f9a",
                            CreatedIPAddress = "202.217.230.92",
                            Guid = "75ad4917-f279-46e3-9bfc-37c3492caa25",
                            IsUpdated = "No",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            Continent = "None",
                            CountryCode = "SA",
                            CountryDescription = "Sed aut ipsa ut ea incidunt.",
                            CountryName = "Kingdom of Saudi Arabia",
                            CountryPhone = "+966",
                            CreatedDate = new DateTime(2019, 6, 22, 20, 56, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "7fdd4f3b-935d-45a6-a697-c8eec39d60ad",
                            CreatedIPAddress = "56.19.18.179",
                            Guid = "5b7df9ad-5872-4ce6-ae34-782324254fbe",
                            IsUpdated = "Yes",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Continent = "Europe",
                            CountryCode = "GER",
                            CountryDescription = "Quod magnam voluptatem maxime delectus ut.",
                            CountryName = "Germany",
                            CountryPhone = "+49",
                            CreatedDate = new DateTime(2000, 5, 15, 13, 21, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "1c86401c-3d86-457d-b34d-4efc33de9524",
                            CreatedIPAddress = "19.12.217.184",
                            Guid = "fee49919-d30a-4af9-8072-21312b7c8fde",
                            IsUpdated = "No",
                            Status = "Unknown"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 719, DateTimeKind.Local).AddTicks(4914));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7f229be3-69f4-49a4-b1da-9f9ce9738d91");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("05a51ba7-1d9b-4920-85a1-4c5baf73502f");

                    b.Property<string>("HasAirport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasHotelFacility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TouristPopulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportVehicle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new TimeSpan(0, 1, 24, 0, 0),
                            CreatedDate = new DateTime(2019, 4, 9, 14, 16, 52, 0, DateTimeKind.Unspecified),
                            CreatedID = "b6b4b9e4-ff3e-49e8-bd71-5fe3dbcf284d",
                            CreatedIPAddress = "96.234.105.75",
                            DistrictName = "fuga",
                            Guid = "effce242-feed-4977-a26b-5d28620b0dfe",
                            HasAirport = "Yes",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "No",
                            TransportVehicle = 7
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new TimeSpan(0, 2, 36, 0, 0),
                            CreatedDate = new DateTime(2016, 3, 1, 10, 37, 27, 0, DateTimeKind.Unspecified),
                            CreatedID = "8babeead-35dd-4e49-a866-9f24049c2328",
                            CreatedIPAddress = "111.112.26.209",
                            DistrictName = "sint",
                            Guid = "c9ec0eaf-130c-404d-b818-7dbb8b6eab3b",
                            HasAirport = "Yes",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "No",
                            TransportVehicle = 4
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new TimeSpan(0, 1, 39, 0, 0),
                            CreatedDate = new DateTime(2013, 11, 22, 9, 43, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "f351aa3a-1adf-4a4f-b6aa-57dc4e1863f3",
                            CreatedIPAddress = "228.49.187.227",
                            DistrictName = "in",
                            Guid = "efa4e1fc-1bca-47ca-b7d2-288d2ece5788",
                            HasAirport = "Yes",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "Yes",
                            TransportVehicle = 3
                        },
                        new
                        {
                            Id = 4,
                            ArrivalTime = new TimeSpan(0, 1, 55, 0, 0),
                            CreatedDate = new DateTime(2014, 2, 20, 4, 39, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "9880d9f7-d7d6-48bd-ab3b-6b8a7a4f1959",
                            CreatedIPAddress = "92.212.141.94",
                            DistrictName = "quaerat",
                            Guid = "90af5d3d-c256-497b-b715-aa73bf809e23",
                            HasAirport = "No",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "Yes",
                            TransportVehicle = 4
                        },
                        new
                        {
                            Id = 5,
                            ArrivalTime = new TimeSpan(0, 0, 52, 0, 0),
                            CreatedDate = new DateTime(2011, 3, 7, 17, 32, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "8cc79c38-c9cf-4bd8-b4a4-31db381e58b8",
                            CreatedIPAddress = "241.183.36.245",
                            DistrictName = "earum",
                            Guid = "9ecc6849-8006-471e-ac4f-06981af8886a",
                            HasAirport = "Yes",
                            HasHotelFacility = "No",
                            IsUpdated = "Yes",
                            Status = "Unknown",
                            TouristPopulation = "Yes",
                            TransportVehicle = 4
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityPassTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 718, DateTimeKind.Local).AddTicks(2713));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c4206e1b-b1d2-4ef4-8e31-2f0322338c32");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0e1a7850-0e5b-4fa6-99ff-0721761c05ba");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("ActivityPassTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionRate = (byte)13,
                            CreatedDate = new DateTime(2012, 5, 12, 14, 35, 3, 0, DateTimeKind.Unspecified),
                            CreatedID = "4aab7013-0fdf-468a-aa2c-d00254a27263",
                            CreatedIPAddress = "181.2.128.110",
                            Guid = "a2097548-f2e7-40d6-813d-c88f2bf28f22",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 1,
                            Price = 123.0233681841856640m,
                            Status = "Passive",
                            TotalCostwithCommission = 139.01640604812980032m
                        },
                        new
                        {
                            Id = 2,
                            CommissionRate = (byte)17,
                            CreatedDate = new DateTime(2015, 6, 15, 17, 36, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "5046fa62-b4ef-4fff-b75a-5486c26dbcdc",
                            CreatedIPAddress = "238.12.27.146",
                            Guid = "a0977485-466c-42c0-8099-361f0e72632f",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 2,
                            Price = 169.210042636789760m,
                            Status = "Unknown",
                            TotalCostwithCommission = 197.9757498850440192m
                        },
                        new
                        {
                            Id = 3,
                            CommissionRate = (byte)19,
                            CreatedDate = new DateTime(2008, 9, 18, 6, 24, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "8e8eed08-37c3-43ec-b84d-77e9b51a91d1",
                            CreatedIPAddress = "31.131.53.251",
                            Guid = "4a8cd4d1-8966-4213-bcc7-71c7ae4c994f",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 3,
                            Price = 233.808341679978560m,
                            Status = "Passive",
                            TotalCostwithCommission = 278.2319265991744864m
                        },
                        new
                        {
                            Id = 4,
                            CommissionRate = (byte)20,
                            CreatedDate = new DateTime(2010, 1, 18, 8, 56, 3, 0, DateTimeKind.Unspecified),
                            CreatedID = "b9bafc42-b742-4a57-a85d-cc009732f108",
                            CreatedIPAddress = "204.187.38.156",
                            Guid = "741d9faa-121e-4e10-a99d-e5d7201f9b61",
                            IsUpdated = "Yes",
                            PartnerCompanyTransactionId = 3,
                            Price = 170.455054497899840m,
                            Status = "Unknown",
                            TotalCostwithCommission = 204.546065397479808m
                        },
                        new
                        {
                            Id = 5,
                            CommissionRate = (byte)18,
                            CreatedDate = new DateTime(2019, 3, 1, 2, 37, 15, 0, DateTimeKind.Unspecified),
                            CreatedID = "4f396c5b-483e-4ee4-9d4b-aab9d359616e",
                            CreatedIPAddress = "230.229.86.160",
                            Guid = "f7c2b86a-9a61-4e72-bc2b-ed3a0fe25348",
                            IsUpdated = "Yes",
                            PartnerCompanyTransactionId = 2,
                            Price = 202.636047775639040m,
                            Status = "Unknown",
                            TotalCostwithCommission = 239.1105363752540672m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 720, DateTimeKind.Local).AddTicks(9598));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a6361d83-9d42-4949-90ea-85cc177ca98c");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte?>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("25f7ce7b-4262-43d8-889c-12ca6fdf4f5a");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            ArrivalDate = new DateTime(2015, 3, 7, 15, 36, 44, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2000, 6, 19, 5, 40, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "12439c15-06b9-4029-9f2b-69fd623d1916",
                            CreatedIPAddress = "153.20.38.27",
                            Currency = "CNY",
                            DepartureAdress = "Rustic Soft Sausages Planner",
                            DepartureDate = new DateTime(2015, 3, 7, 12, 36, 44, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "bypassing viral",
                            DiscountRate = (byte)15,
                            Guid = "45c875dc-395a-4c81-af3a-49ae55715844",
                            IsUpdated = "Yes",
                            NetCost = 154.185789532028752m,
                            PaymentStatus = "FullyPaid",
                            Price = 181.395046508269120m,
                            SeatNumber = "A147",
                            Status = "Active",
                            TicketHolderName = "Everette Runolfsson"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 3,
                            ArrivalDate = new DateTime(2014, 9, 2, 18, 23, 41, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2016, 8, 15, 6, 11, 44, 0, DateTimeKind.Unspecified),
                            CreatedID = "a39cd7ec-a58b-44c3-900e-1a2ac2e70354",
                            CreatedIPAddress = "43.198.93.132",
                            Currency = "TRY",
                            DepartureAdress = "Handmade Granite Sausages Investment Account",
                            DepartureDate = new DateTime(2014, 9, 2, 15, 23, 41, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Tasty Rubber Soap deposit",
                            DiscountRate = (byte)11,
                            Guid = "44f743d5-4e6c-4ab9-a627-9d5dd394e5b1",
                            IsUpdated = "No",
                            NetCost = 275.1905955557751328m,
                            PaymentStatus = "PartialPaid",
                            Price = 309.202916354803520m,
                            SeatNumber = "D138",
                            Status = "Passive",
                            TicketHolderName = "Oswald Bahringer"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2009, 5, 27, 15, 19, 36, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2010, 4, 18, 19, 39, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "c53c2986-4fad-4434-b2f7-c9565eab7328",
                            CreatedIPAddress = "105.9.36.205",
                            Currency = "EUR",
                            DepartureAdress = "visionary Tunnel",
                            DepartureDate = new DateTime(2009, 5, 27, 12, 19, 36, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "incentivize Poland",
                            DiscountRate = (byte)15,
                            Guid = "07eb9efb-05a5-4283-93d8-19875f7c0a51",
                            IsUpdated = "Yes",
                            NetCost = 293.453515603010208m,
                            PaymentStatus = "Pending",
                            Price = 345.239430121188480m,
                            SeatNumber = "B161",
                            Status = "Passive",
                            TicketHolderName = "Torrance Luettgen"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 2,
                            ArrivalDate = new DateTime(2019, 3, 27, 12, 26, 4, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2006, 11, 27, 16, 44, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "592905a3-b458-42c6-83ea-1c4c7ba9f9c0",
                            CreatedIPAddress = "13.11.209.81",
                            Currency = "AED",
                            DepartureAdress = "Handmade Fresh Hat microchip",
                            DepartureDate = new DateTime(2019, 3, 27, 9, 26, 4, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "interactive transitional",
                            DiscountRate = (byte)12,
                            Guid = "510464e5-f736-4672-8165-1881f54a8129",
                            IsUpdated = "No",
                            NetCost = 334.8592265635550208m,
                            PaymentStatus = "FullyPaid",
                            Price = 380.521848367676160m,
                            SeatNumber = "B40",
                            Status = "Unknown",
                            TicketHolderName = "Estell Ankunding"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2021, 1, 5, 16, 25, 28, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2002, 12, 20, 11, 8, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "f570242f-7dca-4f83-a1c3-c9734aafaf7f",
                            CreatedIPAddress = "106.145.190.82",
                            Currency = "USD",
                            DepartureAdress = "Argentine Peso best-of-breed",
                            DepartureDate = new DateTime(2021, 1, 5, 13, 25, 28, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "system Communications",
                            DiscountRate = (byte)15,
                            Guid = "ffa8be87-5c25-4779-a21e-a3b62009114f",
                            IsUpdated = "Yes",
                            NetCost = 204.44367886929104m,
                            PaymentStatus = "Pending",
                            Price = 240.52197514034240m,
                            SeatNumber = "C80",
                            Status = "Passive",
                            TicketHolderName = "Arturo Jaskolski"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 728, DateTimeKind.Local).AddTicks(9828));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("15e94cf2-9c85-4087-8f07-6ff4199c229a");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DailyRentalFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c8cc423e-8063-4738-b264-31abd984e44a");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalVehicleSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TotalRentalDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RentalVehicleSupplierId");

                    b.ToTable("RentalVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 5,
                            Age = 1,
                            Capacity = (short)84,
                            CreatedDate = new DateTime(2008, 8, 4, 6, 33, 23, 0, DateTimeKind.Unspecified),
                            CreatedID = "e6cc7177-eb20-4a71-9694-bbd5ff7191a1",
                            CreatedIPAddress = "83.79.255.38",
                            DailyRentalFee = 13661m,
                            ExpireDate = new DateTime(2008, 2, 7, 16, 19, 30, 0, DateTimeKind.Unspecified),
                            Guid = "264f8117-f766-49a5-ad87-6466c1fcdfbe",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 95043,
                            LicensePlate = "48 nz 2680",
                            Model = "Accord",
                            RentalVehicleSupplierId = 3,
                            StartDate = new DateTime(2008, 2, 6, 16, 19, 30, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            TotalPrice = 13661m,
                            TotalRentalDay = 1,
                            VehicleType = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 5,
                            Age = 12,
                            Capacity = (short)87,
                            CreatedDate = new DateTime(2002, 1, 18, 19, 15, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "c88088cc-6615-4155-927b-39eff2ea4756",
                            CreatedIPAddress = "123.61.254.25",
                            DailyRentalFee = 11112m,
                            ExpireDate = new DateTime(2020, 12, 26, 9, 50, 6, 0, DateTimeKind.Unspecified),
                            Guid = "f3abb81f-b28d-408e-88ef-f5b838b10463",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 162736,
                            LicensePlate = "35 zg 4948",
                            Model = "Altima",
                            RentalVehicleSupplierId = 1,
                            StartDate = new DateTime(2020, 12, 21, 9, 50, 6, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 55560m,
                            TotalRentalDay = 5,
                            VehicleType = "Minibus"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 4,
                            Age = 6,
                            Capacity = (short)62,
                            CreatedDate = new DateTime(2014, 2, 26, 12, 51, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "d0a8a4f9-2683-43e6-91bf-fda8421a8454",
                            CreatedIPAddress = "22.49.102.207",
                            DailyRentalFee = 7341m,
                            ExpireDate = new DateTime(2014, 8, 11, 11, 47, 14, 0, DateTimeKind.Unspecified),
                            Guid = "ead72648-9610-4df8-bd7a-04aef22afd67",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 597771,
                            LicensePlate = "26 bt 4229",
                            Model = "XTS",
                            RentalVehicleSupplierId = 3,
                            StartDate = new DateTime(2014, 8, 8, 11, 47, 14, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            TotalPrice = 22023m,
                            TotalRentalDay = 3,
                            VehicleType = "None"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 4,
                            Age = 11,
                            Capacity = (short)20,
                            CreatedDate = new DateTime(2000, 2, 10, 15, 33, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "301b1453-a81e-4d0c-9ef9-a3eb85096792",
                            CreatedIPAddress = "214.32.174.59",
                            DailyRentalFee = 18364m,
                            ExpireDate = new DateTime(2003, 11, 20, 8, 29, 19, 0, DateTimeKind.Unspecified),
                            Guid = "fef29759-cfa8-4ea2-93f3-4f6b9b62be2c",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 197996,
                            LicensePlate = "65 aw 9210",
                            Model = "Model 3",
                            RentalVehicleSupplierId = 5,
                            StartDate = new DateTime(2003, 11, 16, 8, 29, 19, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            TotalPrice = 73456m,
                            TotalRentalDay = 4,
                            VehicleType = "Yacht"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 5,
                            Age = 15,
                            Capacity = (short)31,
                            CreatedDate = new DateTime(2018, 6, 19, 10, 9, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "196ffa75-79c8-437c-a5d0-d9717fe4cfa2",
                            CreatedIPAddress = "35.158.167.81",
                            DailyRentalFee = 10535m,
                            ExpireDate = new DateTime(2010, 6, 7, 11, 50, 43, 0, DateTimeKind.Unspecified),
                            Guid = "255cd897-a7c6-4377-aa8a-5ace26330972",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 82020,
                            LicensePlate = "1 ny 2451",
                            Model = "PT Cruiser",
                            RentalVehicleSupplierId = 5,
                            StartDate = new DateTime(2010, 6, 3, 11, 50, 43, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            TotalPrice = 42140m,
                            TotalRentalDay = 4,
                            VehicleType = "Yacht"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 730, DateTimeKind.Local).AddTicks(4618));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("921fbc20-f113-4e4e-8ad7-8493f832937e");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("963bff28-9248-4b7a-8038-dca8c1eb2290");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 3,
                            Age = 14,
                            Capacity = (short)77,
                            CreatedDate = new DateTime(2009, 5, 21, 21, 13, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "9d3f3dce-3ff8-4147-9f99-c722bb0a3049",
                            CreatedIPAddress = "122.13.3.56",
                            Guid = "1bd66c1e-e329-4ed2-ba18-e0b528569ade",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 306430,
                            LicensePlate = "67 qg 1337",
                            MarketValue = 13900468m,
                            Model = "Grand Caravan",
                            PurchaseDate = new DateTime(2019, 7, 2, 16, 34, 36, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            Age = 6,
                            Capacity = (short)35,
                            CreatedDate = new DateTime(2017, 6, 23, 22, 33, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "c8cabdb4-a863-4b70-8478-75130f5c8265",
                            CreatedIPAddress = "135.166.149.217",
                            Guid = "5015b653-6514-4fbb-9ff2-15e50b82671c",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 681447,
                            LicensePlate = "17 xz 8711",
                            MarketValue = 21090236m,
                            Model = "Colorado",
                            PurchaseDate = new DateTime(2013, 8, 24, 5, 52, 26, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            VehicleType = "Boat"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 2,
                            Age = 4,
                            Capacity = (short)86,
                            CreatedDate = new DateTime(2001, 9, 10, 7, 47, 29, 0, DateTimeKind.Unspecified),
                            CreatedID = "7f41e00c-750f-468e-8671-8b911452b2e9",
                            CreatedIPAddress = "85.48.157.147",
                            Guid = "21f319f6-fc96-4784-b005-a1d1b609011a",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 877274,
                            LicensePlate = "77 lm 7562",
                            MarketValue = 14016766m,
                            Model = "Model T",
                            PurchaseDate = new DateTime(2002, 1, 15, 6, 20, 48, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            VehicleType = "Sedan"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 2,
                            Age = 7,
                            Capacity = (short)63,
                            CreatedDate = new DateTime(2000, 6, 23, 16, 37, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "9848a3c2-cff2-40c4-8e80-4f3fd41ddb9f",
                            CreatedIPAddress = "255.204.90.233",
                            Guid = "954a3f0e-f1c8-44ca-bb50-ac1b5534d227",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 606395,
                            LicensePlate = "46 te 6490",
                            MarketValue = 14044364m,
                            Model = "Beetle",
                            PurchaseDate = new DateTime(2020, 10, 27, 4, 42, 48, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Bus"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 5,
                            Age = 13,
                            Capacity = (short)60,
                            CreatedDate = new DateTime(2014, 7, 14, 4, 55, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "1785d0d5-1739-4de3-b6eb-4b638168c47a",
                            CreatedIPAddress = "21.160.8.137",
                            Guid = "dad6a68f-2cb9-47dd-9ece-27de6b342325",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 608793,
                            LicensePlate = "47 pc 5888",
                            MarketValue = 10641282m,
                            Model = "Beetle",
                            PurchaseDate = new DateTime(2021, 6, 9, 20, 38, 11, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Boat"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 30, 733, DateTimeKind.Local).AddTicks(710));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a2d13a4-7416-4ba6-a914-6e5d9f699ec2",
                            CountryId = 1,
                            CreatedDate = new DateTime(2021, 10, 21, 14, 56, 33, 0, DateTimeKind.Unspecified),
                            CreatedID = "ae9d7c29-b4fa-466e-ab96-6b33c65276cb",
                            CreatedIPAddress = "24.95.229.172",
                            Email = "Riley.Swaniawski25@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "3b60110f-e179-48cd-a378-247ca982efa1",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 31, 9, 56, 30, 856, DateTimeKind.Unspecified).AddTicks(6645), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "RİLEY.SWANİAWSKİ25@YAHOO.COM",
                            NormalizedUserName = "EMİLİANO",
                            PasswordHash = "$2a$11$YWzGZMIJbKr/48KHwxa1l.jKfvIuF9I2lyeUytCPK1ILsic3hJ4Em",
                            PhoneNumber = "05269116670",
                            PhoneNumberConfirmed = false,
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Emiliano"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3595bdbe-e04f-4446-9749-15e78ca14aa9",
                            CountryId = 4,
                            CreatedDate = new DateTime(2021, 5, 7, 12, 16, 52, 0, DateTimeKind.Unspecified),
                            CreatedID = "4840edd3-513a-46a1-830e-5d2ff68f9c7c",
                            CreatedIPAddress = "216.215.243.121",
                            Email = "Justina_Emmerich56@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "c65c266e-6ccc-4422-9e84-99dd98a4f36f",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 31, 9, 56, 30, 979, DateTimeKind.Unspecified).AddTicks(4957), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "JUSTİNA_EMMERİCH56@HOTMAİL.COM",
                            NormalizedUserName = "CAROLE",
                            PasswordHash = "$2a$11$zFPuGtsHRL1.E.Puu9Wc4ejqaenkj3la1dT3OisWGX8Heoono8vLe",
                            PhoneNumber = "05866281339",
                            PhoneNumberConfirmed = false,
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Carole"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20f19c84-6fed-40eb-b822-65a042c4ccc6",
                            CountryId = 5,
                            CreatedDate = new DateTime(2011, 1, 3, 2, 20, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "64bf711c-7676-48a3-9280-9d5b5010cd2c",
                            CreatedIPAddress = "1.109.71.171",
                            Email = "Madaline.Skiles@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "28ee6286-46e6-415c-956a-465c25ed7f34",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 31, 9, 56, 31, 103, DateTimeKind.Unspecified).AddTicks(5370), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "MADALİNE.SKİLES@YAHOO.COM",
                            NormalizedUserName = "WİNNİFRED",
                            PasswordHash = "$2a$11$AouaPzlhZ0t1JY51IfD/qO/bag/w7SqNfsv7liaKoV9mU.OJFEMpi",
                            PhoneNumber = "05968716777",
                            PhoneNumberConfirmed = false,
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Winnifred"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a9c6bb6-ecd2-47e0-b9d8-5661c3824ce5",
                            CountryId = 5,
                            CreatedDate = new DateTime(2007, 6, 4, 3, 39, 43, 0, DateTimeKind.Unspecified),
                            CreatedID = "f7a41cd1-71d7-4bf7-bbbe-72ee90b5b099",
                            CreatedIPAddress = "254.209.105.213",
                            Email = "Nannie_Konopelski61@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "3c100f18-9bca-4f1e-9249-bec0df72fa51",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 31, 9, 56, 31, 229, DateTimeKind.Unspecified).AddTicks(185), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "NANNİE_KONOPELSKİ61@HOTMAİL.COM",
                            NormalizedUserName = "JANET",
                            PasswordHash = "$2a$11$4AaHOy97NSopTJeS.NhUbeZuZEFzd1Q/YtYGOMkkJP.0mYnc8myW.",
                            PhoneNumber = "05652338139",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Janet"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19ae802c-1e8d-4fb0-aa63-e3b7f467ea8d",
                            CountryId = 2,
                            CreatedDate = new DateTime(2015, 7, 15, 8, 35, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "b858cbce-d13f-49b3-9770-e945e2a359d9",
                            CreatedIPAddress = "151.220.217.7",
                            Email = "Bernie_Willms@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "1e2b5bb0-01e1-46f9-977d-a158a19a9ccb",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 5, 31, 9, 56, 31, 353, DateTimeKind.Unspecified).AddTicks(3237), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "BERNİE_WİLLMS@HOTMAİL.COM",
                            NormalizedUserName = "MADDİSON",
                            PasswordHash = "$2a$11$lF0vopbDwGJZlm0bxWM50eQi2mspbbRT1sZ33zFx7K/796gDuxwsC",
                            PhoneNumber = "05289779450",
                            PhoneNumberConfirmed = false,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Maddison"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 24, 9, 56, 31, 354, DateTimeKind.Local).AddTicks(1899));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WebUserAccountId");

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            WebUserAccountId = 1,
                            Address = "876 Runolfsdottir Land, East Nelsonbury, Serbia",
                            Age = (byte)45,
                            BirthDate = new DateTime(1979, 12, 10, 12, 21, 14, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2019, 12, 18, 15, 29, 23, 0, DateTimeKind.Unspecified),
                            CreatedID = "29fb7efc-6975-4a6a-a068-75fd66c57a2b",
                            CreatedIPAddress = "8.113.34.169",
                            FirstName = "Marques",
                            Gender = "Unknown",
                            IsUpdated = "No",
                            LastName = "Cummings",
                            PhotoPath = "muhammad.name",
                            Status = "Unknown",
                            TCN_Passport = "09915286962",
                            UpdatedDate = new DateTime(2023, 8, 1, 15, 59, 47, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 2,
                            Address = "055 Batz Route, Spencerstad, Norfolk Island",
                            Age = (byte)41,
                            BirthDate = new DateTime(1983, 12, 4, 21, 17, 8, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2006, 4, 18, 10, 27, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "08bb611b-f8fa-40c7-8b79-c117adf726d6",
                            CreatedIPAddress = "62.42.108.168",
                            FirstName = "Trystan",
                            Gender = "Male",
                            IsUpdated = "No",
                            LastName = "Doyle",
                            PhotoPath = "mercedes.biz",
                            Status = "Unknown",
                            TCN_Passport = "25582161580",
                            UpdatedDate = new DateTime(2023, 10, 6, 14, 24, 43, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 3,
                            Address = "079 Xzavier Manors, Lake Jamarcus, Bosnia and Herzegovina",
                            Age = (byte)57,
                            BirthDate = new DateTime(1967, 12, 13, 16, 44, 48, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2005, 8, 27, 12, 14, 9, 0, DateTimeKind.Unspecified),
                            CreatedID = "b45e6952-3837-404f-93d1-be9362890cdc",
                            CreatedIPAddress = "146.188.9.167",
                            FirstName = "Cali",
                            Gender = "Male",
                            IsUpdated = "No",
                            LastName = "Wiegand",
                            PhotoPath = "jesse.biz",
                            Status = "Active",
                            TCN_Passport = "97729284503",
                            UpdatedDate = new DateTime(2024, 5, 21, 1, 29, 23, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 4,
                            Address = "28404 Deontae Parkway, South Waylonmouth, Jordan",
                            Age = (byte)71,
                            BirthDate = new DateTime(1954, 1, 1, 19, 45, 40, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2017, 5, 24, 9, 13, 22, 0, DateTimeKind.Unspecified),
                            CreatedID = "97acf6e3-6941-4dbe-860c-9908c539c280",
                            CreatedIPAddress = "118.211.101.65",
                            FirstName = "Amely",
                            Gender = "Unknown",
                            IsUpdated = "No",
                            LastName = "Stoltenberg",
                            PhotoPath = "carlee.biz",
                            Status = "Unknown",
                            TCN_Passport = "47080792891",
                            UpdatedDate = new DateTime(2024, 6, 14, 4, 33, 8, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 5,
                            Address = "10294 Bo Gardens, Elimouth, Peru",
                            Age = (byte)36,
                            BirthDate = new DateTime(1989, 5, 17, 17, 40, 20, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2020, 10, 21, 18, 45, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "217acd0c-d4d9-4e27-8768-3b309734e07b",
                            CreatedIPAddress = "214.71.70.93",
                            FirstName = "Bret",
                            Gender = "Unknown",
                            IsUpdated = "No",
                            LastName = "Tromp",
                            PhotoPath = "hilario.biz",
                            Status = "Unknown",
                            TCN_Passport = "08387800694",
                            UpdatedDate = new DateTime(2022, 2, 23, 6, 23, 3, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Activities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", "PartnerCompany")
                        .WithMany("PartnerCompanyTransactions")
                        .HasForeignKey("PartnerCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractEmployees")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.ActivityTicket", "ActivityTicket")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.ActivityTicketOrder", "ActivityTicketOrder")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActivityTicket");

                    b.Navigation("ActivityTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityPassTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("ActivityPassTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("ActivityTickets")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", "RentalVehicleSupplier")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("RentalVehicleSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("RentalVehicleSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("Vehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.Country", "Country")
                        .WithMany("WebUserAccounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithOne("WebUserProfile")
                        .HasForeignKey("DataAccess.Entities.Models.WebUsers.WebUserProfile", "WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Navigation("ActivityTickets");

                    b.Navigation("RentalVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Navigation("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Navigation("ActivityPassTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Navigation("ContractEmployees");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Navigation("ActivityTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WebUserAccounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Navigation("ActivityTicketOrders");

                    b.Navigation("WebUserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
