// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GezTurizmContext))]
    partial class GezTurizmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_RentalVehicle", b =>
                {
                    b.Property<int>("ContactDriverId")
                        .HasColumnType("int");

                    b.Property<int>("RentalVehicleId")
                        .HasColumnType("int");

                    b.HasKey("ContactDriverId", "RentalVehicleId");

                    b.HasIndex("RentalVehicleId");

                    b.ToTable("ContractDrivers_RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_Vehicle", b =>
                {
                    b.Property<int>("ContractDriverId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("ContractDriverId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_ServiceRegion", b =>
                {
                    b.Property<int?>("ContractTourGuideId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRegionId")
                        .HasColumnType("int");

                    b.HasKey("ContractTourGuideId", "ServiceRegionId");

                    b.HasIndex("ServiceRegionId");

                    b.ToTable("ContractTourGuides_ServiceRegions");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_Tour", b =>
                {
                    b.Property<int?>("ContractTourGuideId")
                        .HasColumnType("int");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("ContractTourGuideId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("ContractTourGuide_Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 375, DateTimeKind.Local).AddTicks(1308));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4bca15e2-fb52-4570-ae5f-bef32a1ab002");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("75c4da58-4a60-4433-b885-35927487e651");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 375, DateTimeKind.Local).AddTicks(7826));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0a750d89-0db7-4eb2-8006-664529727e44");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c25923aa-9db6-46a3-984a-3a62571ddbcc");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TourCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptTickets")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 376, DateTimeKind.Local).AddTicks(4256));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("94d86e07-6ea6-49bb-a5ab-263e52cbf3c9");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("360355d4-d898-4e84-9303-9a7d15b4b799");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PartnerCompanies");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 376, DateTimeKind.Local).AddTicks(8380));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("7b7b1d8b-e7f4-4cd4-859c-fbf3e797b423");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a87879cd-3abe-460b-87f6-92e96490d7c8");

                    b.Property<int?>("PartnerCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Receive")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyId");

                    b.ToTable("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 377, DateTimeKind.Local).AddTicks(1839));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("02701569-e44a-4772-be95-20a071178143");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("dbb22484-f6e8-429a-a85c-6a789f357734");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 377, DateTimeKind.Local).AddTicks(5829));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("faae95a4-272d-4801-af74-6291083ef44b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b137304e-9e2e-4987-b90b-826029a765eb");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RentalVehicleSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 377, DateTimeKind.Local).AddTicks(9695));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("cccd22c8-940d-4a97-8736-8ebdff7c2b0e");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4b052ca8-e4c5-4033-b4bf-90abccfcf24e");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SubContractWorkerSuppliers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(190)
                        .HasColumnType("nvarchar(190)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 378, DateTimeKind.Local).AddTicks(3916));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("6029b8bf-c04f-4c62-a3b4-e228e344b57c");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("18f6d9bd-56f6-4bd9-96fd-5b537d714139");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = "Australia",
                            CountryCode = "X 0",
                            CountryDescription = "CountryDescription 0",
                            CountryName = "CountryName 0",
                            CountryPhone = "Cphone 0",
                            CreatedDate = new DateTime(2002, 5, 23, 10, 39, 3, 0, DateTimeKind.Unspecified),
                            CreatedID = "30b8305a-140e-44c4-83be-2152e99339ca",
                            CreatedIPAddress = "CreatedIPAdress 0",
                            Guid = "ff9904d2-8e38-43f1-9f0c-9f8709f885b8",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Continent = "Asia",
                            CountryCode = "X 1",
                            CountryDescription = "CountryDescription 1",
                            CountryName = "CountryName 1",
                            CountryPhone = "Cphone 1",
                            CreatedDate = new DateTime(2016, 11, 9, 2, 18, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "bd6fef1d-d59a-489c-85fa-db45be1a5dc1",
                            CreatedIPAddress = "CreatedIPAdress 1",
                            Guid = "e16090ce-4268-40db-bfc1-5c5c433446f3",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Continent = "Africa",
                            CountryCode = "X 2",
                            CountryDescription = "CountryDescription 2",
                            CountryName = "CountryName 2",
                            CountryPhone = "Cphone 2",
                            CreatedDate = new DateTime(2018, 3, 10, 23, 52, 33, 0, DateTimeKind.Unspecified),
                            CreatedID = "299dd26e-4f3f-4ea6-adb7-bcde5b3cf833",
                            CreatedIPAddress = "CreatedIPAdress 2",
                            Guid = "99324bf2-4fbf-4c87-af31-c235e6fad73f",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            Continent = "Australia",
                            CountryCode = "X 3",
                            CountryDescription = "CountryDescription 3",
                            CountryName = "CountryName 3",
                            CountryPhone = "Cphone 3",
                            CreatedDate = new DateTime(2005, 4, 1, 16, 28, 41, 0, DateTimeKind.Unspecified),
                            CreatedID = "298526df-e7fe-45b6-9098-3fa76c4c7b92",
                            CreatedIPAddress = "CreatedIPAdress 3",
                            Guid = "ccc27cae-4827-49c4-aabc-21575e03c642",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            Continent = "NorthAmerica",
                            CountryCode = "X 4",
                            CountryDescription = "CountryDescription 4",
                            CountryName = "CountryName 4",
                            CountryPhone = "Cphone 4",
                            CreatedDate = new DateTime(2020, 12, 12, 17, 18, 29, 0, DateTimeKind.Unspecified),
                            CreatedID = "792e025b-c17f-44a9-b33f-59db2a16e0cf",
                            CreatedIPAddress = "CreatedIPAdress 4",
                            Guid = "5e1c80ac-fe3b-47ff-aac6-3c2e3ce276d2",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 6,
                            Continent = "None",
                            CountryCode = "X 5",
                            CountryDescription = "CountryDescription 5",
                            CountryName = "CountryName 5",
                            CountryPhone = "Cphone 5",
                            CreatedDate = new DateTime(2001, 2, 16, 9, 50, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "3a2970ba-5d62-457d-ba43-fdcedcef54a0",
                            CreatedIPAddress = "CreatedIPAdress 5",
                            Guid = "7e0e1015-352e-4162-8f9d-70cbce10cfbe",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 7,
                            Continent = "NorthAmerica",
                            CountryCode = "X 6",
                            CountryDescription = "CountryDescription 6",
                            CountryName = "CountryName 6",
                            CountryPhone = "Cphone 6",
                            CreatedDate = new DateTime(2013, 5, 24, 3, 47, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "b9324d88-3d37-4340-b717-7a1abfef2faa",
                            CreatedIPAddress = "CreatedIPAdress 6",
                            Guid = "ca58a458-a25b-4291-8a09-285683566490",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 8,
                            Continent = "NorthAmerica",
                            CountryCode = "X 7",
                            CountryDescription = "CountryDescription 7",
                            CountryName = "CountryName 7",
                            CountryPhone = "Cphone 7",
                            CreatedDate = new DateTime(2013, 6, 16, 14, 43, 22, 0, DateTimeKind.Unspecified),
                            CreatedID = "4f662fdf-bbd9-4d67-9e71-65caa5453db3",
                            CreatedIPAddress = "CreatedIPAdress 7",
                            Guid = "f410eec5-ff57-431b-839a-bc25786710bb",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 9,
                            Continent = "NorthAmerica",
                            CountryCode = "X 8",
                            CountryDescription = "CountryDescription 8",
                            CountryName = "CountryName 8",
                            CountryPhone = "Cphone 8",
                            CreatedDate = new DateTime(2013, 1, 16, 11, 47, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "22a01582-e733-4a52-875f-fcf043d0757a",
                            CreatedIPAddress = "CreatedIPAdress 8",
                            Guid = "5552897f-218e-44e4-8905-d473ea5aba7d",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 10,
                            Continent = "NorthAmerica",
                            CountryCode = "X 9",
                            CountryDescription = "CountryDescription 9",
                            CountryName = "CountryName 9",
                            CountryPhone = "Cphone 9",
                            CreatedDate = new DateTime(2000, 11, 23, 13, 28, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "54c38a20-56d3-4b2e-bab7-a25f04914312",
                            CreatedIPAddress = "CreatedIPAdress 9",
                            Guid = "6a0df0f5-ee9f-4409-8fa2-3effb130eedf",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 11,
                            Continent = "Africa",
                            CountryCode = "X 10",
                            CountryDescription = "CountryDescription 10",
                            CountryName = "CountryName 10",
                            CountryPhone = "Cphone 10",
                            CreatedDate = new DateTime(2013, 6, 3, 23, 42, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "39739f1c-8e32-42dd-8266-b7c052b7aa73",
                            CreatedIPAddress = "CreatedIPAdress 10",
                            Guid = "26155b80-4a34-45f4-abb0-a922f98fc151",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 12,
                            Continent = "Australia",
                            CountryCode = "X 11",
                            CountryDescription = "CountryDescription 11",
                            CountryName = "CountryName 11",
                            CountryPhone = "Cphone 11",
                            CreatedDate = new DateTime(2014, 12, 16, 22, 19, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "9ceede82-ba8d-4c6b-9d4f-dde32df8b233",
                            CreatedIPAddress = "CreatedIPAdress 11",
                            Guid = "3b7de206-ef11-49f3-bae3-7821c120d50e",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 13,
                            Continent = "Europe",
                            CountryCode = "X 12",
                            CountryDescription = "CountryDescription 12",
                            CountryName = "CountryName 12",
                            CountryPhone = "Cphone 12",
                            CreatedDate = new DateTime(2021, 4, 24, 3, 12, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "bc9bef29-69c1-4a64-8fa5-70f4b35bae38",
                            CreatedIPAddress = "CreatedIPAdress 12",
                            Guid = "b0efad4d-7249-401c-840b-81970d6eba04",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 14,
                            Continent = "NorthAmerica",
                            CountryCode = "X 13",
                            CountryDescription = "CountryDescription 13",
                            CountryName = "CountryName 13",
                            CountryPhone = "Cphone 13",
                            CreatedDate = new DateTime(2003, 9, 16, 13, 26, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "5326138d-1a07-4cd9-99e8-0a6968253b52",
                            CreatedIPAddress = "CreatedIPAdress 13",
                            Guid = "a216b16a-896e-4c32-8613-684836d7cb6c",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 15,
                            Continent = "Africa",
                            CountryCode = "X 14",
                            CountryDescription = "CountryDescription 14",
                            CountryName = "CountryName 14",
                            CountryPhone = "Cphone 14",
                            CreatedDate = new DateTime(2002, 12, 15, 4, 27, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "52c3fe13-8495-4219-9c3d-d4902101ba6f",
                            CreatedIPAddress = "CreatedIPAdress 14",
                            Guid = "82791ed4-bfb9-49e8-8681-0172dd386a96",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 378, DateTimeKind.Local).AddTicks(7618));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("99e59d2e-f4d4-45a6-ab1e-095501f38012");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("None");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1dd50b8d-e6d3-4a46-937a-2d9cb2d92d46");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SubContractWorkerSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubContractWorkerSupplierId");

                    b.ToTable("ContractDrivers");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 379, DateTimeKind.Local).AddTicks(5105));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1a5cc952-05ec-4f77-9a63-2ede41b39fb2");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0647fda9-27d3-4fa2-90eb-949cecd86af3");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("None");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SubContractWorkerSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SubContractWorkerSupplierId");

                    b.ToTable("ContractTourGuides");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("ContractCount")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 380, DateTimeKind.Local).AddTicks(812));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c7cc9243-bb54-4242-b5f3-ac2ef6ac8c9b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("DaysWorked")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("f073d4fc-12c6-43de-95c3-d05639c4f968");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ResidenceRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ResidenceRegionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Adress 0",
                            Age = (byte)30,
                            BirthDate = new DateTime(1994, 9, 23, 22, 8, 36, 0, DateTimeKind.Unspecified),
                            ContractCount = 6,
                            CountryId = 2,
                            CreatedDate = new DateTime(2000, 6, 12, 2, 43, 7, 0, DateTimeKind.Unspecified),
                            CreatedID = "132ee9b6-2bb0-48e6-8734-35575f484754",
                            CreatedIPAddress = "CreatedIPAdress 0",
                            CurrentPosition = "Marketing",
                            DaysWorked = 5987,
                            Email = "Email 0",
                            EndContract = new DateTime(2026, 11, 2, 23, 20, 45, 0, DateTimeKind.Unspecified),
                            Experience = 2,
                            FirstName = "FirstName 0",
                            Gender = "Unknown",
                            Guid = "c6eac58a-ed7b-4210-a058-3c8b74b940e0",
                            HireDate = new DateTime(2008, 11, 2, 23, 20, 45, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 0",
                            PhoneNumber = "PNumber 0",
                            PhotoPath = "PhotoPath 0",
                            Status = "Unknown",
                            TCN_Passport = "TCN 0"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Adress 1",
                            Age = (byte)56,
                            BirthDate = new DateTime(1969, 3, 20, 18, 29, 40, 0, DateTimeKind.Unspecified),
                            ContractCount = 8,
                            CountryId = 4,
                            CreatedDate = new DateTime(2012, 9, 2, 5, 10, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "c39b4b17-a352-4bac-80e8-38ae4fbb23da",
                            CreatedIPAddress = "CreatedIPAdress 1",
                            CurrentPosition = "Administrative",
                            DaysWorked = 7418,
                            Email = "Email 1",
                            EndContract = new DateTime(2028, 12, 3, 4, 14, 10, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "FirstName 1",
                            Gender = "Male",
                            Guid = "fcf42990-4c20-4ecd-a63f-790082f21946",
                            HireDate = new DateTime(2004, 12, 3, 4, 14, 10, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 1",
                            PhoneNumber = "PNumber 1",
                            PhotoPath = "PhotoPath 1",
                            Status = "Unknown",
                            TCN_Passport = "TCN 1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Adress 2",
                            Age = (byte)52,
                            BirthDate = new DateTime(1972, 8, 1, 20, 14, 47, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 5,
                            CreatedDate = new DateTime(2021, 7, 26, 11, 23, 43, 0, DateTimeKind.Unspecified),
                            CreatedID = "bef9010b-e7a6-4add-8bb0-7b0f50d27aa4",
                            CreatedIPAddress = "CreatedIPAdress 2",
                            CurrentPosition = "Administrative",
                            DaysWorked = 3362,
                            Email = "Email 2",
                            EndContract = new DateTime(2028, 1, 10, 13, 8, 49, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "FirstName 2",
                            Gender = "Unknown",
                            Guid = "482f335a-20cf-4156-8bae-336ae62f0cf9",
                            HireDate = new DateTime(2016, 1, 10, 13, 8, 49, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 2",
                            PhoneNumber = "PNumber 2",
                            PhotoPath = "PhotoPath 2",
                            Status = "Unknown",
                            TCN_Passport = "TCN 2"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Adress 3",
                            Age = (byte)59,
                            BirthDate = new DateTime(1965, 8, 11, 12, 50, 53, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 7,
                            CreatedDate = new DateTime(2000, 11, 10, 10, 35, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "37152d11-ccb4-4c22-8c5b-e61921d6f1e4",
                            CreatedIPAddress = "CreatedIPAdress 3",
                            CurrentPosition = "IT",
                            DaysWorked = 3912,
                            Email = "Email 3",
                            EndContract = new DateTime(2026, 7, 9, 12, 14, 33, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "FirstName 3",
                            Gender = "Unknown",
                            Guid = "02ed7bf8-cdfd-47bc-a48f-30ce26681449",
                            HireDate = new DateTime(2014, 7, 9, 12, 14, 33, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 3",
                            PhoneNumber = "PNumber 3",
                            PhotoPath = "PhotoPath 3",
                            Status = "Passive",
                            TCN_Passport = "TCN 3"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Adress 4",
                            Age = (byte)57,
                            BirthDate = new DateTime(1967, 4, 23, 23, 48, 3, 0, DateTimeKind.Unspecified),
                            ContractCount = 6,
                            CountryId = 3,
                            CreatedDate = new DateTime(2004, 12, 21, 20, 37, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "8b3a2a67-7770-4a2b-b303-18f9184e5cdd",
                            CreatedIPAddress = "CreatedIPAdress 4",
                            CurrentPosition = "Administrative",
                            DaysWorked = 6044,
                            Email = "Email 4",
                            EndContract = new DateTime(2026, 9, 6, 15, 27, 23, 0, DateTimeKind.Unspecified),
                            Experience = 6,
                            FirstName = "FirstName 4",
                            Gender = "Male",
                            Guid = "1060f500-5ecc-4bbd-97a1-587f2a3377e6",
                            HireDate = new DateTime(2008, 9, 6, 15, 27, 23, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 4",
                            PhoneNumber = "PNumber 4",
                            PhotoPath = "PhotoPath 4",
                            Status = "Active",
                            TCN_Passport = "TCN 4"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Adress 5",
                            Age = (byte)58,
                            BirthDate = new DateTime(1967, 1, 24, 18, 22, 10, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 8,
                            CreatedDate = new DateTime(2015, 12, 9, 19, 14, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "89e4ca11-472a-46f1-8f03-f236f5f41010",
                            CreatedIPAddress = "CreatedIPAdress 5",
                            CurrentPosition = "Marketing",
                            DaysWorked = 3600,
                            Email = "Email 5",
                            EndContract = new DateTime(2027, 5, 17, 11, 19, 50, 0, DateTimeKind.Unspecified),
                            Experience = 7,
                            FirstName = "FirstName 5",
                            Gender = "Female",
                            Guid = "e0e5d83c-e72f-463a-97c9-166c5273f9a7",
                            HireDate = new DateTime(2015, 5, 17, 11, 19, 50, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 5",
                            PhoneNumber = "PNumber 5",
                            PhotoPath = "PhotoPath 5",
                            Status = "Unknown",
                            TCN_Passport = "TCN 5"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Adress 6",
                            Age = (byte)51,
                            BirthDate = new DateTime(1973, 8, 9, 22, 16, 32, 0, DateTimeKind.Unspecified),
                            ContractCount = 3,
                            CountryId = 4,
                            CreatedDate = new DateTime(2018, 3, 14, 10, 26, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "7c758e99-c571-488b-be35-bffdb5670d91",
                            CreatedIPAddress = "CreatedIPAdress 6",
                            CurrentPosition = "Operations",
                            DaysWorked = 2997,
                            Email = "Email 6",
                            EndContract = new DateTime(2026, 1, 9, 12, 33, 13, 0, DateTimeKind.Unspecified),
                            Experience = 8,
                            FirstName = "FirstName 6",
                            Gender = "Male",
                            Guid = "2101d0ab-3251-4c8c-8d76-5eecad2959fc",
                            HireDate = new DateTime(2017, 1, 9, 12, 33, 13, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 6",
                            PhoneNumber = "PNumber 6",
                            PhotoPath = "PhotoPath 6",
                            Status = "Passive",
                            TCN_Passport = "TCN 6"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Adress 7",
                            Age = (byte)64,
                            BirthDate = new DateTime(1960, 8, 21, 10, 29, 24, 0, DateTimeKind.Unspecified),
                            ContractCount = 9,
                            CountryId = 8,
                            CreatedDate = new DateTime(2018, 10, 22, 7, 10, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "fc32ea57-f8c3-43da-9e58-108e81e85969",
                            CreatedIPAddress = "CreatedIPAdress 7",
                            CurrentPosition = "Accounting",
                            DaysWorked = 8710,
                            Email = "Email 7",
                            EndContract = new DateTime(2028, 5, 21, 3, 28, 43, 0, DateTimeKind.Unspecified),
                            Experience = 9,
                            FirstName = "FirstName 7",
                            Gender = "Unknown",
                            Guid = "550eb782-1afe-41d7-9fa4-c863e87810af",
                            HireDate = new DateTime(2001, 5, 21, 3, 28, 43, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 7",
                            PhoneNumber = "PNumber 7",
                            PhotoPath = "PhotoPath 7",
                            Status = "Passive",
                            TCN_Passport = "TCN 7"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Adress 8",
                            Age = (byte)57,
                            BirthDate = new DateTime(1967, 9, 1, 4, 45, 34, 0, DateTimeKind.Unspecified),
                            ContractCount = 5,
                            CountryId = 2,
                            CreatedDate = new DateTime(2010, 8, 5, 23, 33, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "5c19988b-6385-4a6e-972a-9f70c4686d2a",
                            CreatedIPAddress = "CreatedIPAdress 8",
                            CurrentPosition = "IT",
                            DaysWorked = 4584,
                            Email = "Email 8",
                            EndContract = new DateTime(2027, 9, 5, 12, 30, 23, 0, DateTimeKind.Unspecified),
                            Experience = 10,
                            FirstName = "FirstName 8",
                            Gender = "Unknown",
                            Guid = "ed28b428-71a9-4d6d-b5b1-9cd55b1eba74",
                            HireDate = new DateTime(2012, 9, 5, 12, 30, 23, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 8",
                            PhoneNumber = "PNumber 8",
                            PhotoPath = "PhotoPath 8",
                            Status = "Active",
                            TCN_Passport = "TCN 8"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Adress 9",
                            Age = (byte)31,
                            BirthDate = new DateTime(1994, 2, 26, 6, 28, 6, 0, DateTimeKind.Unspecified),
                            ContractCount = 2,
                            CountryId = 6,
                            CreatedDate = new DateTime(2004, 10, 10, 14, 25, 35, 0, DateTimeKind.Unspecified),
                            CreatedID = "772ed110-08cb-4aae-ba92-29bc5c769b31",
                            CreatedIPAddress = "CreatedIPAdress 9",
                            CurrentPosition = "Consulting",
                            DaysWorked = 1906,
                            Email = "Email 9",
                            EndContract = new DateTime(2026, 1, 5, 9, 49, 23, 0, DateTimeKind.Unspecified),
                            Experience = 11,
                            FirstName = "FirstName 9",
                            Gender = "Female",
                            Guid = "eddb7f52-0c4d-45f6-85bc-94cda3c1a4f4",
                            HireDate = new DateTime(2020, 1, 5, 9, 49, 23, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 9",
                            PhoneNumber = "PNumber 9",
                            PhotoPath = "PhotoPath 9",
                            Status = "Active",
                            TCN_Passport = "TCN 9"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Adress 10",
                            Age = (byte)42,
                            BirthDate = new DateTime(1982, 12, 9, 17, 16, 52, 0, DateTimeKind.Unspecified),
                            ContractCount = 7,
                            CountryId = 10,
                            CreatedDate = new DateTime(2004, 2, 22, 18, 10, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "b7b36f63-45cd-424d-afdf-d7ea3727271b",
                            CreatedIPAddress = "CreatedIPAdress 10",
                            CurrentPosition = "IT",
                            DaysWorked = 6697,
                            Email = "Email 10",
                            EndContract = new DateTime(2027, 11, 23, 7, 55, 38, 0, DateTimeKind.Unspecified),
                            Experience = 12,
                            FirstName = "FirstName 10",
                            Gender = "Male",
                            Guid = "2f295fb9-d361-43c7-8e5f-7bcb44dfdb4e",
                            HireDate = new DateTime(2006, 11, 23, 7, 55, 38, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 10",
                            PhoneNumber = "PNumber 10",
                            PhotoPath = "PhotoPath 10",
                            Status = "Active",
                            TCN_Passport = "TCN 10"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Adress 11",
                            Age = (byte)55,
                            BirthDate = new DateTime(1969, 7, 23, 5, 42, 33, 0, DateTimeKind.Unspecified),
                            ContractCount = 4,
                            CountryId = 8,
                            CreatedDate = new DateTime(2006, 7, 16, 14, 52, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "a19795d9-7fbf-4790-81c7-e4597da2ea19",
                            CreatedIPAddress = "CreatedIPAdress 11",
                            CurrentPosition = "Operations",
                            DaysWorked = 3172,
                            Email = "Email 11",
                            EndContract = new DateTime(2028, 7, 18, 5, 47, 5, 0, DateTimeKind.Unspecified),
                            Experience = 13,
                            FirstName = "FirstName 11",
                            Gender = "Female",
                            Guid = "65f34fb4-b275-40f3-8c45-1d5eda7e9e2d",
                            HireDate = new DateTime(2016, 7, 18, 5, 47, 5, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 11",
                            PhoneNumber = "PNumber 11",
                            PhotoPath = "PhotoPath 11",
                            Status = "Passive",
                            TCN_Passport = "TCN 11"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Adress 12",
                            Age = (byte)37,
                            BirthDate = new DateTime(1987, 9, 8, 12, 29, 7, 0, DateTimeKind.Unspecified),
                            ContractCount = 2,
                            CountryId = 8,
                            CreatedDate = new DateTime(2019, 1, 21, 18, 8, 37, 0, DateTimeKind.Unspecified),
                            CreatedID = "9c0458eb-6873-4a10-b2e4-87993ebf322a",
                            CreatedIPAddress = "CreatedIPAdress 12",
                            CurrentPosition = "Operations",
                            DaysWorked = 1842,
                            Email = "Email 12",
                            EndContract = new DateTime(2026, 3, 9, 13, 58, 46, 0, DateTimeKind.Unspecified),
                            Experience = 14,
                            FirstName = "FirstName 12",
                            Gender = "Unknown",
                            Guid = "b2254a52-fe65-4f47-98d4-f5cbf1b54dfd",
                            HireDate = new DateTime(2020, 3, 9, 13, 58, 46, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 12",
                            PhoneNumber = "PNumber 12",
                            PhotoPath = "PhotoPath 12",
                            Status = "Active",
                            TCN_Passport = "TCN 12"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Adress 13",
                            Age = (byte)38,
                            BirthDate = new DateTime(1986, 5, 15, 4, 54, 22, 0, DateTimeKind.Unspecified),
                            ContractCount = 9,
                            CountryId = 9,
                            CreatedDate = new DateTime(2015, 3, 2, 7, 52, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "a0c47f71-50d3-4769-af56-b5529a8b049f",
                            CreatedIPAddress = "CreatedIPAdress 13",
                            CurrentPosition = "Marketing",
                            DaysWorked = 8528,
                            Email = "Email 13",
                            EndContract = new DateTime(2028, 11, 18, 10, 55, 39, 0, DateTimeKind.Unspecified),
                            Experience = 15,
                            FirstName = "FirstName 13",
                            Gender = "Female",
                            Guid = "850a19b7-0016-4a4d-86df-4580df98623d",
                            HireDate = new DateTime(2001, 11, 18, 10, 55, 39, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 13",
                            PhoneNumber = "PNumber 13",
                            PhotoPath = "PhotoPath 13",
                            Status = "Unknown",
                            TCN_Passport = "TCN 13"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Adress 14",
                            Age = (byte)37,
                            BirthDate = new DateTime(1987, 6, 10, 20, 14, 34, 0, DateTimeKind.Unspecified),
                            ContractCount = 8,
                            CountryId = 2,
                            CreatedDate = new DateTime(2009, 6, 17, 9, 46, 52, 0, DateTimeKind.Unspecified),
                            CreatedID = "24967eff-927c-4ad9-9636-c75258b7c60b",
                            CreatedIPAddress = "CreatedIPAdress 14",
                            CurrentPosition = "Operations",
                            DaysWorked = 7579,
                            Email = "Email 14",
                            EndContract = new DateTime(2028, 6, 24, 9, 38, 31, 0, DateTimeKind.Unspecified),
                            Experience = 16,
                            FirstName = "FirstName 14",
                            Gender = "Female",
                            Guid = "462224e5-8159-4894-93e6-67496483a1fd",
                            HireDate = new DateTime(2004, 6, 24, 9, 38, 31, 0, DateTimeKind.Unspecified),
                            LastName = "LastName 14",
                            PhoneNumber = "PNumber 14",
                            PhotoPath = "PhotoPath 14",
                            Status = "Passive",
                            TCN_Passport = "TCN 14"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.EventTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 382, DateTimeKind.Local).AddTicks(317));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b53e9814-df0f-4776-87b1-b7c3d507c86e");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("EventTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTicketOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2be557e2-9710-4184-86bf-ec02a55943cf");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventTicketId");

                    b.HasIndex("EventTicketOrderId");

                    b.ToTable("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ProductOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 382, DateTimeKind.Local).AddTicks(4896));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("9a16466f-de8f-47ba-a9aa-549a9227d4da");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("da33c2ce-2a30-4df4-95df-a7ca5670d745");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.TourTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 382, DateTimeKind.Local).AddTicks(9844));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0040877c-0869-4867-b728-74d08177da78");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0d8ca37e-679b-463e-9271-849e0e1ae2fa");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("TourTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TourTicketOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TourTicketId");

                    b.HasIndex("TourTicketOrderId");

                    b.ToTable("TourTicketOrderDetail");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 383, DateTimeKind.Local).AddTicks(4672));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("681029f1-95f6-45dd-b9e7-1c33fea186a3");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("052a6160-e18e-44ca-b58f-70836798a78c");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("EventTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 383, DateTimeKind.Local).AddTicks(8845));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("0ed29365-f77f-41b7-878e-dbf9b6518c2f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c5c56012-1ad2-4686-a3e5-2974c9db44e8");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 384, DateTimeKind.Local).AddTicks(3182));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b0863706-a3c9-432c-92b6-5d2f86e7c75c");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b6db8268-8b0e-4d95-8e76-04b8349bb304");

                    b.Property<string>("Note")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("TourTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassEventTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 384, DateTimeKind.Local).AddTicks(7414));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c0ef5483-abee-4131-9397-93035e3ecffa");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("edd5e415-bac9-4fe7-a613-eff7734ff357");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("PassEventTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassTourTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 385, DateTimeKind.Local).AddTicks(2744));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("288fe930-2970-48f7-9c4c-7e8a2822b642");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("b69b4d8b-d900-47b3-acb3-6e4d2952496a");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("PassTourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 386, DateTimeKind.Local).AddTicks(2983));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("13bd2640-8cd9-43d5-ab0a-48525694ce30");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1d426c03-abc4-4a53-a0c3-8fc41f925796");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int?>("ProductSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 385, DateTimeKind.Local).AddTicks(7550));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("ff3fdb15-3ce6-4cd9-bac4-88f36d8461f6");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("4ee1493e-6cd4-4157-8ac5-f9c2c8374555");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ResidenceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 386, DateTimeKind.Local).AddTicks(6311));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("85135bd8-31c8-4267-8d55-3b3b245d6533");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("eeeb7b03-8c85-4b72-93ff-fafdae9dd8fb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TransportVehicle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ResidenceRegions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("TIME");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 387, DateTimeKind.Local).AddTicks(2731));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("6f7c4442-30e4-4d12-a18e-20bfb2960eb9");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("92274ba5-5bc8-4144-919c-b7ce649aa532");

                    b.Property<bool>("HasAirport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHotelFacility")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TouristPopulation")
                        .HasColumnType("bit");

                    b.Property<string>("TransportVehicle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 387, DateTimeKind.Local).AddTicks(6446));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("1f6b6df2-c03c-4c30-ba96-91e5d3ad321f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("53a7937f-a75b-4130-a57e-356ecb49ec77");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 388, DateTimeKind.Local).AddTicks(152));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("03e8d41f-da30-433f-b41f-2b252ee782d6");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("078451a7-6020-468e-b1aa-9954a1c2e27f");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 388, DateTimeKind.Local).AddTicks(3753));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2087acf8-65cf-421d-8145-c7c7ef6dcf5f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DailyRentalFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3976ff22-e4f9-49ed-b6e1-ad45d0bc2a26");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalVehicleSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TotalRentalDay")
                        .HasColumnType("int");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RentalVehicleSupplierId");

                    b.HasIndex("TourId");

                    b.ToTable("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 388, DateTimeKind.Local).AddTicks(9752));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("e32134e2-3520-422b-a803-d2d35c6dc5c5");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("d29423b3-e828-4819-b5d3-9a7b8c6ff00e");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TourId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 391, DateTimeKind.Local).AddTicks(3396));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "175d0a82-f5ee-46db-8c43-24ea296c3afc",
                            CountryId = 4,
                            CreatedDate = new DateTime(2007, 4, 10, 20, 44, 29, 0, DateTimeKind.Unspecified),
                            CreatedID = "d8776844-4d3c-4875-9167-ad0b7dd5460b",
                            CreatedIPAddress = "CreatedIPAdress 0",
                            Email = "Email 0",
                            EmailConfirmed = false,
                            Guid = "43ba0b84-5a55-478e-b36b-9114203eff0b",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 0",
                            NormalizedUserName = "USERNAME 0",
                            PasswordHash = "$2a$11$VFkIDHfJScqtdUlRPYfVvOe7auc5YDlchtQcgysbas1aVn75BAcPe",
                            PhoneNumber = "PNumber 0",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ea82d85-23f2-43f4-875d-acd30652f8f8",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 0"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17941a9a-a51c-411f-8121-c071ac024b2e",
                            CountryId = 5,
                            CreatedDate = new DateTime(2001, 3, 11, 17, 26, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "328f3fc5-00e0-4cb8-bac5-d5ce04ad1d65",
                            CreatedIPAddress = "CreatedIPAdress 1",
                            Email = "Email 1",
                            EmailConfirmed = false,
                            Guid = "663b39fb-2e57-42a8-a5a4-d6dd9e60f7aa",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 1",
                            NormalizedUserName = "USERNAME 1",
                            PasswordHash = "$2a$11$t4nm0fYMzxG0Pqa3pPttN.PN7gbhy2txi27tEAOaEnNXQQy33ScEW",
                            PhoneNumber = "PNumber 1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e65612b5-8244-475a-9c3a-49cbc6303921",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bdd77a1-20e7-4ecc-99e3-a0e2075e8172",
                            CountryId = 1,
                            CreatedDate = new DateTime(2009, 9, 24, 13, 53, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "ca11cd61-dece-4f86-80d0-f25a2b89a213",
                            CreatedIPAddress = "CreatedIPAdress 2",
                            Email = "Email 2",
                            EmailConfirmed = false,
                            Guid = "6ed4341d-1c0c-470a-bcc8-564e7f58b555",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 2",
                            NormalizedUserName = "USERNAME 2",
                            PasswordHash = "$2a$11$JUikYvo.nXBvFVDXjNRR3ua.UJzikHsSnsw7tpKG.eNSwxcashsD2",
                            PhoneNumber = "PNumber 2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa1ffc7b-8694-4948-8ef4-81e636612206",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9cbc646-0209-4546-b12f-835d956089b5",
                            CountryId = 2,
                            CreatedDate = new DateTime(2006, 4, 9, 2, 23, 37, 0, DateTimeKind.Unspecified),
                            CreatedID = "0e7beb06-7767-42ca-9f41-abe60f9d811a",
                            CreatedIPAddress = "CreatedIPAdress 3",
                            Email = "Email 3",
                            EmailConfirmed = false,
                            Guid = "639a0470-3db3-40d6-91aa-7fab12057f94",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 3",
                            NormalizedUserName = "USERNAME 3",
                            PasswordHash = "$2a$11$qENvFRFGJFhQED7n7I33U.h.jsHwdY01EgEkuseIt6MHQiMVZ8D3O",
                            PhoneNumber = "PNumber 3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "094083b3-bb54-4d8d-95db-ede168679b0a",
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "UserName 3"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6314fbd4-cec5-4879-9a60-bf5818aa324f",
                            CountryId = 6,
                            CreatedDate = new DateTime(2013, 8, 13, 15, 34, 3, 0, DateTimeKind.Unspecified),
                            CreatedID = "25ea0337-b7df-4e36-a141-2f433b80ef80",
                            CreatedIPAddress = "CreatedIPAdress 4",
                            Email = "Email 4",
                            EmailConfirmed = false,
                            Guid = "439ac808-589d-43d6-81ed-a9403de53ef1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 4",
                            NormalizedUserName = "USERNAME 4",
                            PasswordHash = "$2a$11$fcMurih.Vt.QnWGiuozqdeRHR/vLJXoKRRohnNPczubxJEgKVM5.m",
                            PhoneNumber = "PNumber 4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f31ddac2-33a4-4b36-803f-eeedfb817f59",
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "UserName 4"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d57eb99-e0e6-47ae-8413-7c4ffa1562bd",
                            CountryId = 8,
                            CreatedDate = new DateTime(2021, 2, 10, 11, 38, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "6d1a73f7-2f0d-44c6-a9f7-750b1dd7c213",
                            CreatedIPAddress = "CreatedIPAdress 5",
                            Email = "Email 5",
                            EmailConfirmed = false,
                            Guid = "d6c1bd01-7565-4028-b824-24091a121018",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 5",
                            NormalizedUserName = "USERNAME 5",
                            PasswordHash = "$2a$11$tZj8s/j1Th9p7NWyEbIkS.X1UzEC5aeT.YCsYxe3mtESrBy/XNGWC",
                            PhoneNumber = "PNumber 5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b75989-da5c-4f4d-82e1-3ae701a0685d",
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "UserName 5"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "511869b6-d6a4-438a-805a-b71b9408b178",
                            CountryId = 4,
                            CreatedDate = new DateTime(2014, 7, 25, 4, 17, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "239db730-c52c-4479-9adf-7d229fbd4abc",
                            CreatedIPAddress = "CreatedIPAdress 6",
                            Email = "Email 6",
                            EmailConfirmed = false,
                            Guid = "dd8bde81-dffd-4098-b0cb-e5ebafc576b4",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 6",
                            NormalizedUserName = "USERNAME 6",
                            PasswordHash = "$2a$11$BqhQ6tTrUJyMXTKx.yvV6OQl1qBu3ygZki.F9u0.85qRm.0oMRlxK",
                            PhoneNumber = "PNumber 6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeafaffb-ea17-4db0-81b3-353041fedce1",
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "UserName 6"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a41df2aa-8aac-4bbc-8f2e-e03faff86748",
                            CountryId = 10,
                            CreatedDate = new DateTime(2007, 9, 16, 8, 57, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "31a261de-8e9b-404d-8223-4deac1c25e49",
                            CreatedIPAddress = "CreatedIPAdress 7",
                            Email = "Email 7",
                            EmailConfirmed = false,
                            Guid = "48ff22b4-57e0-4cfd-b98f-1019c647eed2",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 7",
                            NormalizedUserName = "USERNAME 7",
                            PasswordHash = "$2a$11$Rcb.xE/0Cc7uGq.zGpUM7uVsOFQ9aqXx2PlXlxK7VQo6M4/CnkOme",
                            PhoneNumber = "PNumber 7",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9659661-22f8-4f3c-a58b-7c33c451f051",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 7"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41150d06-38de-4ff9-83c4-980be23e1df5",
                            CountryId = 6,
                            CreatedDate = new DateTime(2020, 9, 6, 14, 54, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "6240a421-3d67-4257-9ca6-d03a1df79c5e",
                            CreatedIPAddress = "CreatedIPAdress 8",
                            Email = "Email 8",
                            EmailConfirmed = false,
                            Guid = "9e9de176-9607-4979-a2db-4a7941fbd0c1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 8",
                            NormalizedUserName = "USERNAME 8",
                            PasswordHash = "$2a$11$wmaqumeW1XjFcDTv299GlOISGKSQVBS5lfRgYQyarUdeGwg.vj4JW",
                            PhoneNumber = "PNumber 8",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29c8da50-1e40-4c6a-a8fa-bfbd5a8332c4",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 8"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8a39d24-70f7-4d76-b6e7-ebdc0435338f",
                            CountryId = 10,
                            CreatedDate = new DateTime(2018, 12, 6, 12, 28, 31, 0, DateTimeKind.Unspecified),
                            CreatedID = "89661828-3772-4f62-b04d-837180a2356f",
                            CreatedIPAddress = "CreatedIPAdress 9",
                            Email = "Email 9",
                            EmailConfirmed = false,
                            Guid = "f55d67f0-b063-4ee5-acf2-67ebcdaa8e86",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMAİL 9",
                            NormalizedUserName = "USERNAME 9",
                            PasswordHash = "$2a$11$/NEQ1zs4w8P8NdKGmfqzreacS927kmEvGVzSWtUVNkzSO0vWIxnma",
                            PhoneNumber = "PNumber 9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "079a9a27-de7b-48ab-a636-dc8a2faf0ec5",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "UserName 9"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 26, 4, 39, 28, 391, DateTimeKind.Local).AddTicks(8525));

                    b.HasKey("WebUserAccountId");

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            WebUserAccountId = 1,
                            Address = "Adress 0",
                            Age = (byte)33,
                            BirthDate = new DateTime(1991, 9, 15, 9, 17, 3, 0, DateTimeKind.Unspecified),
                            Email = "Email 0",
                            FirstName = "FirstName 0",
                            Gender = "Male",
                            LastName = "LastName 0",
                            PhoneNumber = "PNumber 0",
                            PhotoPath = "PhotoPath 0",
                            TCN_Passport = "TCN 0",
                            UpdatedDate = new DateTime(2007, 4, 2, 10, 27, 3, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 2,
                            Address = "Adress 1",
                            Age = (byte)54,
                            BirthDate = new DateTime(1970, 6, 12, 4, 46, 35, 0, DateTimeKind.Unspecified),
                            Email = "Email 1",
                            FirstName = "FirstName 1",
                            Gender = "Male",
                            LastName = "LastName 1",
                            PhoneNumber = "PNumber 1",
                            PhotoPath = "PhotoPath 1",
                            TCN_Passport = "TCN 1",
                            UpdatedDate = new DateTime(2010, 8, 6, 7, 44, 26, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 3,
                            Address = "Adress 2",
                            Age = (byte)34,
                            BirthDate = new DateTime(1990, 11, 4, 14, 10, 27, 0, DateTimeKind.Unspecified),
                            Email = "Email 2",
                            FirstName = "FirstName 2",
                            Gender = "Male",
                            LastName = "LastName 2",
                            PhoneNumber = "PNumber 2",
                            PhotoPath = "PhotoPath 2",
                            TCN_Passport = "TCN 2",
                            UpdatedDate = new DateTime(2014, 6, 19, 2, 36, 20, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 4,
                            Address = "Adress 3",
                            Age = (byte)32,
                            BirthDate = new DateTime(1992, 5, 2, 16, 26, 34, 0, DateTimeKind.Unspecified),
                            Email = "Email 3",
                            FirstName = "FirstName 3",
                            Gender = "Male",
                            LastName = "LastName 3",
                            PhoneNumber = "PNumber 3",
                            PhotoPath = "PhotoPath 3",
                            TCN_Passport = "TCN 3",
                            UpdatedDate = new DateTime(2021, 11, 4, 4, 55, 39, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 5,
                            Address = "Adress 4",
                            Age = (byte)51,
                            BirthDate = new DateTime(1973, 9, 8, 17, 49, 48, 0, DateTimeKind.Unspecified),
                            Email = "Email 4",
                            FirstName = "FirstName 4",
                            Gender = "Male",
                            LastName = "LastName 4",
                            PhoneNumber = "PNumber 4",
                            PhotoPath = "PhotoPath 4",
                            TCN_Passport = "TCN 4",
                            UpdatedDate = new DateTime(2010, 12, 2, 3, 8, 34, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 6,
                            Address = "Adress 5",
                            Age = (byte)45,
                            BirthDate = new DateTime(1979, 9, 6, 3, 48, 25, 0, DateTimeKind.Unspecified),
                            Email = "Email 5",
                            FirstName = "FirstName 5",
                            Gender = "Female",
                            LastName = "LastName 5",
                            PhoneNumber = "PNumber 5",
                            PhotoPath = "PhotoPath 5",
                            TCN_Passport = "TCN 5",
                            UpdatedDate = new DateTime(2019, 7, 4, 9, 12, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 7,
                            Address = "Adress 6",
                            Age = (byte)24,
                            BirthDate = new DateTime(2001, 3, 14, 16, 35, 5, 0, DateTimeKind.Unspecified),
                            Email = "Email 6",
                            FirstName = "FirstName 6",
                            Gender = "Female",
                            LastName = "LastName 6",
                            PhoneNumber = "PNumber 6",
                            PhotoPath = "PhotoPath 6",
                            TCN_Passport = "TCN 6",
                            UpdatedDate = new DateTime(2014, 1, 24, 4, 25, 36, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 8,
                            Address = "Adress 7",
                            Age = (byte)58,
                            BirthDate = new DateTime(1966, 8, 9, 2, 26, 2, 0, DateTimeKind.Unspecified),
                            Email = "Email 7",
                            FirstName = "FirstName 7",
                            Gender = "Male",
                            LastName = "LastName 7",
                            PhoneNumber = "PNumber 7",
                            PhotoPath = "PhotoPath 7",
                            TCN_Passport = "TCN 7",
                            UpdatedDate = new DateTime(2016, 6, 16, 4, 50, 16, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractDriver", "ContractDriver")
                        .WithMany("ContractDrivers_RentalVehicles")
                        .HasForeignKey("ContactDriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Vehicles.RentalVehicle", "RentalVehicle")
                        .WithMany("ContractDrivers_RentalVehicles")
                        .HasForeignKey("RentalVehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractDriver");

                    b.Navigation("RentalVehicle");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractDriver_Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractDriver", "ContractDriver")
                        .WithMany("ContractDrivers_Vehicles")
                        .HasForeignKey("ContractDriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Vehicles.Vehicle", "Vehicle")
                        .WithMany("ContractDrivers_Vehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractDriver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_ServiceRegion", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractTourGuide", "ContractTourGuide")
                        .WithMany("ContractTourGuides_ServiceRegions")
                        .HasForeignKey("ContractTourGuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("ContractTourGuides_ServiceRegions")
                        .HasForeignKey("ServiceRegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractTourGuide");

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Mappings.ContractTourGuide_Tour", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.ContractTourGuide", "ContractTourGuide")
                        .WithMany("ContractTourGuides_Tours")
                        .HasForeignKey("ContractTourGuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("ContractTourGuides_Tours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractTourGuide");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Events")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Tours")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", "PartnerCompany")
                        .WithMany("PartnerCompanyTransactions")
                        .HasForeignKey("PartnerCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractDrivers")
                        .HasForeignKey("SubContractWorkerSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractTourGuides")
                        .HasForeignKey("SubContractWorkerSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Regions.ResidenceRegion", "ResidenceRegion")
                        .WithMany("Employees")
                        .HasForeignKey("ResidenceRegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");

                    b.Navigation("ResidenceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.EventTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.EventTicket", "EventTicket")
                        .WithMany("EventTicketOrderDetails")
                        .HasForeignKey("EventTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.EventTicketOrder", "EventTicketOrder")
                        .WithMany("EventTicketOrderDetails")
                        .HasForeignKey("EventTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EventTicket");

                    b.Navigation("EventTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ProductOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Products.Product", "Product")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.ProductOrder", "ProductOrder")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.TourTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.TourTicket", "TourTicket")
                        .WithMany("TourTicketOrderDetails")
                        .HasForeignKey("TourTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.TourTicketOrder", "TourTicketOrder")
                        .WithMany("TourTicketOrderDetails")
                        .HasForeignKey("TourTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TourTicket");

                    b.Navigation("TourTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("EventTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("EventTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("ProductOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("ProductOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("TourTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("TourTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassEventTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("PassEventTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.PassTourTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("PassTourTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", "ProductSupplier")
                        .WithMany("Products")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("EventTickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("TourTickets")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", "RentalVehicleSupplier")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("RentalVehicleSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("RentalVehicleSupplier");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Event", "Event")
                        .WithMany("Vehicles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Activities.Tour", "Tour")
                        .WithMany("Vehicles")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("WebUserAccounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithOne("WebUserProfile")
                        .HasForeignKey("DataAccess.Entities.Models.WebUsers.WebUserProfile", "WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Event", b =>
                {
                    b.Navigation("EventTickets");

                    b.Navigation("RentalVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Tour", b =>
                {
                    b.Navigation("ContractTourGuides_Tours");

                    b.Navigation("RentalVehicles");

                    b.Navigation("TourTickets");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Navigation("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Navigation("PassEventTickets");

                    b.Navigation("PassTourTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.ProductSupplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Navigation("ContractDrivers");

                    b.Navigation("ContractTourGuides");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WebUserAccounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractDriver", b =>
                {
                    b.Navigation("ContractDrivers_RentalVehicles");

                    b.Navigation("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractTourGuide", b =>
                {
                    b.Navigation("ContractTourGuides_ServiceRegions");

                    b.Navigation("ContractTourGuides_Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Navigation("EventTicketOrders");

                    b.Navigation("ProductOrders");

                    b.Navigation("TourTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.EventTicketOrder", b =>
                {
                    b.Navigation("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ProductOrder", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.TourTicketOrder", b =>
                {
                    b.Navigation("TourTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.Product", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ResidenceRegion", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Navigation("ContractTourGuides_ServiceRegions");

                    b.Navigation("Events");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.EventTicket", b =>
                {
                    b.Navigation("EventTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.TourTicket", b =>
                {
                    b.Navigation("TourTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Navigation("ContractDrivers_RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Navigation("ContractDrivers_Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Navigation("EventTicketOrders");

                    b.Navigation("ProductOrders");

                    b.Navigation("TourTicketOrders");

                    b.Navigation("WebUserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
