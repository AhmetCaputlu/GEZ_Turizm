// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GezTurizmContext))]
    [Migration("20250417132632_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 828, DateTimeKind.Local).AddTicks(6866));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("ff337525-f9b1-4b98-9fe6-e236196caf4d");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("58a3cf7e-c346-4749-814a-bb1fc61d68c7");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityCategory = "BBQ_Camping",
                            ActivityName = "quod",
                            CreatedDate = new DateTime(2014, 9, 5, 19, 47, 15, 0, DateTimeKind.Unspecified),
                            CreatedID = "789ee129-9c88-44b6-a333-f1d62856a205",
                            CreatedIPAddress = "164.59.201.62",
                            Description = "Handmade Plastic Shoes Cotton e-tailers Awesome Metal Hat firmware parsing Intelligent Tactics",
                            EndDate = new DateTime(2019, 2, 17, 17, 21, 10, 0, DateTimeKind.Unspecified),
                            Guid = "4e40c2e8-0b0e-43de-adb8-9f9bfbc83a46",
                            IsUpdated = "Yes",
                            RegionId = 1,
                            StartDate = new DateTime(2019, 2, 17, 6, 21, 10, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 2,
                            ActivityCategory = "AncientCity",
                            ActivityName = "cumque",
                            CreatedDate = new DateTime(2017, 10, 20, 14, 31, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "89c70fbc-32d4-470d-95fc-eb6977625b1b",
                            CreatedIPAddress = "126.114.175.136",
                            Description = "Frozen Nebraska National Tanzanian Shilling Granite Tunisian Dinar Rapids payment",
                            EndDate = new DateTime(2008, 5, 2, 12, 24, 34, 0, DateTimeKind.Unspecified),
                            Guid = "fbcac298-ad12-4db8-8165-e63b8b5a2559",
                            IsUpdated = "No",
                            RegionId = 4,
                            StartDate = new DateTime(2008, 5, 2, 5, 24, 34, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            ActivityCategory = "WayTrek",
                            ActivityName = "possimus",
                            CreatedDate = new DateTime(2006, 11, 5, 16, 31, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "e040f2d4-a557-4827-9a7a-8b3eabb13d2a",
                            CreatedIPAddress = "81.217.242.119",
                            Description = "frame Rwanda Franc cross-platform Metal Intelligent Paradigm brand Home Loan Account",
                            EndDate = new DateTime(2010, 9, 25, 2, 15, 27, 0, DateTimeKind.Unspecified),
                            Guid = "837263ab-228e-46ed-9c04-78ba5e0e9e6c",
                            IsUpdated = "Yes",
                            RegionId = 3,
                            StartDate = new DateTime(2010, 9, 24, 14, 15, 27, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            ActivityCategory = "Theater",
                            ActivityName = "sed",
                            CreatedDate = new DateTime(2003, 11, 13, 8, 43, 51, 0, DateTimeKind.Unspecified),
                            CreatedID = "e8fc4c18-d561-4bc1-8c8c-7d1668e84c25",
                            CreatedIPAddress = "102.239.184.233",
                            Description = "Virginia Generic e-tailers Music, Jewelery & Industrial Savings Account sky blue generate circuit",
                            EndDate = new DateTime(2016, 10, 15, 4, 37, 34, 0, DateTimeKind.Unspecified),
                            Guid = "e8c24d8e-9ddc-432d-8bd0-fe8011ee981b",
                            IsUpdated = "No",
                            RegionId = 1,
                            StartDate = new DateTime(2016, 10, 14, 19, 37, 34, 0, DateTimeKind.Unspecified),
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            ActivityCategory = "Canyon",
                            ActivityName = "et",
                            CreatedDate = new DateTime(2006, 12, 27, 23, 24, 19, 0, DateTimeKind.Unspecified),
                            CreatedID = "1537857c-fb71-408e-8020-62d2737f963e",
                            CreatedIPAddress = "87.193.105.111",
                            Description = "Ramp Proactive extranet invoice Borders Realigned Awesome Wooden Table Barbados",
                            EndDate = new DateTime(2013, 2, 9, 14, 51, 53, 0, DateTimeKind.Unspecified),
                            Guid = "64bc0032-3502-41f5-bd22-713dca4629af",
                            IsUpdated = "No",
                            RegionId = 4,
                            StartDate = new DateTime(2013, 2, 9, 3, 51, 53, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcceptTickets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 830, DateTimeKind.Local).AddTicks(3338));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3b04c4e1-ffed-481f-b37c-b940ce5961a7");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("d429e193-fb0a-4212-a6e6-ea0b879c7a73");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PartnerCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptTickets = "Yes",
                            Address = "95708 Jaida Lakes, East Sylviamouth, Austria",
                            Balance = 7596.582791103990000m,
                            CompanyName = "Gibson, Little and Stracke LLC",
                            ContactName = "Brenden Marvin",
                            ContactTitle = "Human Configuration Architect",
                            CreatedDate = new DateTime(2015, 8, 1, 19, 30, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "522f291b-cd4d-4f4e-8c1c-df4a3cac09a5",
                            CreatedIPAddress = "196.218.71.157",
                            Credit = 40810.286186332570000m,
                            Debit = 48406.868977436560000m,
                            Email = "Duane97@hotmail.com",
                            Guid = "b8820587-1936-408b-9a13-18ca99653dd9",
                            IsUpdated = "No",
                            PhoneNumber = "02134156202",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            AcceptTickets = "Yes",
                            Address = "2290 Amir Corners, Andersontown, Kiribati",
                            Balance = 31673.061953346420000m,
                            CompanyName = "Rau, O'Reilly and Bernier LLC",
                            ContactName = "Anabel Hoppe",
                            ContactTitle = "Product Interactions Coordinator",
                            CreatedDate = new DateTime(2015, 9, 5, 20, 30, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "465b2666-338e-41f5-b368-ece66bfe75d3",
                            CreatedIPAddress = "228.208.76.199",
                            Credit = 46688.05143174250000m,
                            Debit = 78361.113385088920000m,
                            Email = "Yvonne.Gerhold72@yahoo.com",
                            Guid = "6e08b735-c743-47aa-9bb7-b49d3066b828",
                            IsUpdated = "No",
                            PhoneNumber = "02168364046",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            AcceptTickets = "Yes",
                            Address = "332 Edwina Shoal, North Rosie, Samoa",
                            Balance = 64860.893956536480000m,
                            CompanyName = "DuBuque, Cormier and Leannon and Sons",
                            ContactName = "Eliseo Jaskolski",
                            ContactTitle = "International Directives Supervisor",
                            CreatedDate = new DateTime(2018, 6, 19, 9, 13, 33, 0, DateTimeKind.Unspecified),
                            CreatedID = "78ff5ad8-5bd2-4e87-89fd-d5f621494f7b",
                            CreatedIPAddress = "138.219.128.131",
                            Credit = 27596.371776563080000m,
                            Debit = 92457.265733099560000m,
                            Email = "Novella_Goldner@gmail.com",
                            Guid = "eae2af80-9501-46f7-b6b3-feb985eac26b",
                            IsUpdated = "No",
                            PhoneNumber = "02176806595",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            AcceptTickets = "No",
                            Address = "1826 Hahn Plain, South Marcellaburgh, Samoa",
                            Balance = 27339.343459854750000m,
                            CompanyName = "Stoltenberg, Parker and Hagenes and Sons",
                            ContactName = "Brigitte Windler",
                            ContactTitle = "Forward Solutions Consultant",
                            CreatedDate = new DateTime(2003, 9, 5, 22, 59, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "9d967eb1-29e0-4f44-a8e1-5a8b8f399ad8",
                            CreatedIPAddress = "105.43.235.116",
                            Credit = 43265.777391173440000m,
                            Debit = 70605.120851028190000m,
                            Email = "Toby60@gmail.com",
                            Guid = "3b84fc99-285b-479d-9de3-6ba7932b0aeb",
                            IsUpdated = "Yes",
                            PhoneNumber = "02147003476",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            AcceptTickets = "Yes",
                            Address = "985 Jacobi Wall, South Mortimer, Bermuda",
                            Balance = -4928.0955794841510000m,
                            CompanyName = "Crooks, Medhurst and Witting Inc",
                            ContactName = "Shyanne Witting",
                            ContactTitle = "Central Markets Engineer",
                            CreatedDate = new DateTime(2020, 3, 15, 21, 28, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "bbf1c8e5-54ab-44e5-9a50-bbc900bbba6d",
                            CreatedIPAddress = "74.236.55.80",
                            Credit = 20111.720646627280000m,
                            Debit = 15183.6250671431290000m,
                            Email = "Wayne_Paucek@gmail.com",
                            Guid = "880ec792-e175-4691-81e6-d34d8f74f71c",
                            IsUpdated = "No",
                            PhoneNumber = "02169564642",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 831, DateTimeKind.Local).AddTicks(8831));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("058668eb-b5f0-4595-b362-b789e2f3a873");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("cac16d0b-72a6-48b2-8b5d-eb77aef1bf28");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyId");

                    b.ToTable("PartnerCompanyTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2006, 1, 25, 9, 15, 3, 0, DateTimeKind.Unspecified),
                            CreatedID = "8415781c-9daa-4a83-bd86-47dcff21a2cf",
                            CreatedIPAddress = "66.187.244.254",
                            Guid = "c846fdc5-d0c3-4d5c-8bd3-38b53231e81d",
                            IsUpdated = "No",
                            PartnerCompanyId = 2,
                            Status = "Unknown",
                            TotalCost = 7688.61419264150000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2015, 6, 1, 14, 47, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "f21fa599-88a9-4b15-954e-4dac1e7cd493",
                            CreatedIPAddress = "249.200.45.22",
                            Guid = "2b372b22-2fbd-4ada-ad60-c2b10fa12eb2",
                            IsUpdated = "Yes",
                            PartnerCompanyId = 1,
                            Status = "Passive",
                            TotalCost = 13990.106166410044000m,
                            Type = "Purchase"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2000, 4, 23, 11, 46, 44, 0, DateTimeKind.Unspecified),
                            CreatedID = "ed9ff8c2-9232-4cfe-b10e-1041747f9f58",
                            CreatedIPAddress = "230.207.124.92",
                            Guid = "e4cafd17-44b8-4e44-b7da-5f3011bf0568",
                            IsUpdated = "No",
                            PartnerCompanyId = 1,
                            Status = "Active",
                            TotalCost = 3898.668758746236000m,
                            Type = "Purchase"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2004, 4, 17, 3, 10, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "9b2676b9-41e0-4a91-95df-1062855bde3c",
                            CreatedIPAddress = "165.176.242.61",
                            Guid = "4dd468bc-b7d6-49e6-bfe3-517bb4946ccd",
                            IsUpdated = "Yes",
                            PartnerCompanyId = 1,
                            Status = "Passive",
                            TotalCost = 8720.100764284734000m,
                            Type = "Sale"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2001, 2, 2, 22, 13, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "acc8ea46-1a93-45fe-8069-7ad3e82e4f77",
                            CreatedIPAddress = "225.114.235.242",
                            Guid = "3224d704-8d0d-4fa0-9ac1-a359311ae1f2",
                            IsUpdated = "No",
                            PartnerCompanyId = 5,
                            Status = "Unknown",
                            TotalCost = 12039.459857420666000m,
                            Type = "Purchase"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 835, DateTimeKind.Local).AddTicks(9045));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("363424f3-9de5-4b79-8a1d-4fdf16b76fcb");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("32525b8a-b8bd-4568-b862-1bd3b7c88b45");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RentalVehicleSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "354 Luettgen Mews, Port Manuelton, Gambia",
                            CompanyName = "Kirlin, Kshlerin and Corwin Group",
                            ContactName = "Elbert Turner",
                            ContactTitle = "Direct Marketing Architect",
                            CreatedDate = new DateTime(2007, 10, 18, 11, 38, 14, 0, DateTimeKind.Unspecified),
                            CreatedID = "726cf753-ba24-4161-acba-f69bad8e0d4a",
                            CreatedIPAddress = "255.3.7.179",
                            Email = "Antwon1@gmail.com",
                            Guid = "a22043e2-c050-4e3c-8506-79597a6269a4",
                            IsUpdated = "No",
                            PhoneNumber = "02175633488",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Address = "3189 Gleason Bypass, Majorfort, Kazakhstan",
                            CompanyName = "Crooks Group Group",
                            ContactName = "Barbara Rippin",
                            ContactTitle = "National Group Technician",
                            CreatedDate = new DateTime(2006, 3, 20, 1, 56, 9, 0, DateTimeKind.Unspecified),
                            CreatedID = "b2210fe6-3a92-4828-bed0-751d820ccb67",
                            CreatedIPAddress = "208.77.67.151",
                            Email = "Taryn52@hotmail.com",
                            Guid = "7b402976-fd37-4ccc-9758-182e39de267c",
                            IsUpdated = "No",
                            PhoneNumber = "02156790268",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Address = "18394 Alana Mount, New Adalbertohaven, Mongolia",
                            CompanyName = "Swift - Goyette Group",
                            ContactName = "Fay Harber",
                            ContactTitle = "Global Optimization Liaison",
                            CreatedDate = new DateTime(2000, 9, 18, 22, 13, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "2d50d8bb-647c-4c8f-8c98-0c98131dd58d",
                            CreatedIPAddress = "114.238.104.21",
                            Email = "Edna_Bartell85@gmail.com",
                            Guid = "05da5a97-2a95-4dc5-804d-8a6831184837",
                            IsUpdated = "No",
                            PhoneNumber = "02194225082",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            Address = "5078 Glover Mountains, Maxieport, Virgin Islands, British",
                            CompanyName = "Beer - Barrows LLC",
                            ContactName = "Charlotte Turcotte",
                            ContactTitle = "Customer Program Facilitator",
                            CreatedDate = new DateTime(2006, 7, 18, 4, 38, 17, 0, DateTimeKind.Unspecified),
                            CreatedID = "3c9442d3-ff56-4723-8afe-59eed0104c4d",
                            CreatedIPAddress = "17.82.202.70",
                            Email = "Verner.Marks@yahoo.com",
                            Guid = "74b57350-5f64-47ae-971e-23f92c6735ae",
                            IsUpdated = "No",
                            PhoneNumber = "02172857826",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 5,
                            Address = "57314 Fritsch Curve, Idellmouth, Iceland",
                            CompanyName = "Christiansen - Hettinger and Sons",
                            ContactName = "Bell Fritsch",
                            ContactTitle = "Internal Group Analyst",
                            CreatedDate = new DateTime(2020, 4, 27, 2, 57, 41, 0, DateTimeKind.Unspecified),
                            CreatedID = "d8fe8275-1a2b-4ffa-91c2-da24511d2c6f",
                            CreatedIPAddress = "206.40.103.129",
                            Email = "Herminio.Ebert0@gmail.com",
                            Guid = "5a7d0e3d-eac9-4f5e-9e84-323af51320bb",
                            IsUpdated = "No",
                            PhoneNumber = "02159467733",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 837, DateTimeKind.Local).AddTicks(3216));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("bd4fc2fb-d474-47c2-997c-c35365da04c4");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("2af9df39-3433-4706-9c69-9369fc4ede64");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SubContractWorkerSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "41882 Fadel Mountains, Port Hilario, Saint Vincent and the Grenadines",
                            CompanyName = "Greenfelder and Sons Group",
                            ContactName = "Rita Kilback",
                            ContactTitle = "Regional Interactions Facilitator",
                            CreatedDate = new DateTime(2015, 7, 14, 13, 47, 34, 0, DateTimeKind.Unspecified),
                            CreatedID = "36b83ebe-91fc-41b6-9c23-8188dd2324a1",
                            CreatedIPAddress = "139.12.108.182",
                            Email = "Scotty.Haley@gmail.com",
                            Guid = "7c97b498-b020-4e90-9040-8137082eb5ce",
                            IsUpdated = "No",
                            PhoneNumber = "02130086167",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Address = "158 Marisa Manors, New Cathyville, Bulgaria",
                            CompanyName = "Wisozk, Shields and Schaefer LLC",
                            ContactName = "Herbert Mitchell",
                            ContactTitle = "Human Communications Representative",
                            CreatedDate = new DateTime(2003, 1, 16, 14, 22, 8, 0, DateTimeKind.Unspecified),
                            CreatedID = "9ffd4590-1a51-46ad-923e-68237e27971c",
                            CreatedIPAddress = "252.220.26.180",
                            Email = "Marcellus_Brekke60@gmail.com",
                            Guid = "c5a97d01-663b-487f-85ba-9ef24c5fa694",
                            IsUpdated = "Yes",
                            PhoneNumber = "02142640631",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            Address = "820 Reed Ford, North Jaquan, Guernsey",
                            CompanyName = "Bruen, Rau and Gibson Inc",
                            ContactName = "Ali White",
                            ContactTitle = "District Branding Associate",
                            CreatedDate = new DateTime(2013, 11, 27, 20, 24, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "788a6b89-2136-49b4-9c42-4ce3cbdcf711",
                            CreatedIPAddress = "91.39.106.182",
                            Email = "Maybell_Mayer91@hotmail.com",
                            Guid = "45d743d7-6a16-4d75-bbfb-e3241b8bde41",
                            IsUpdated = "No",
                            PhoneNumber = "02141205996",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Address = "969 Treva Trail, Altenwerthtown, Cyprus",
                            CompanyName = "Blanda LLC Inc",
                            ContactName = "Keven Stiedemann",
                            ContactTitle = "Global Division Developer",
                            CreatedDate = new DateTime(2002, 8, 20, 16, 13, 4, 0, DateTimeKind.Unspecified),
                            CreatedID = "84387538-5f7c-4609-8b9e-d8a4590dfc35",
                            CreatedIPAddress = "215.182.179.194",
                            Email = "Angel.Dooley57@gmail.com",
                            Guid = "27f3d4ee-5d54-4ca2-8db2-deec9251b8d8",
                            IsUpdated = "No",
                            PhoneNumber = "02165308557",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Address = "3356 Murphy Locks, New Angelburgh, Liechtenstein",
                            CompanyName = "O'Keefe - Maggio and Sons",
                            ContactName = "Stephanie Klocko",
                            ContactTitle = "Legacy Security Executive",
                            CreatedDate = new DateTime(2015, 9, 3, 10, 27, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "10ba55fe-4f0d-4027-8c3b-5f7e99d13698",
                            CreatedIPAddress = "4.197.17.106",
                            Email = "Connie98@hotmail.com",
                            Guid = "bb823185-fd74-418c-840f-61522af5f00f",
                            IsUpdated = "No",
                            PhoneNumber = "02140545025",
                            Status = "Passive"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 838, DateTimeKind.Local).AddTicks(8682));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("6fe0d1f8-cc6a-4245-a4f8-d8bc2a468579");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("81e4597a-f451-4f40-849a-67321f2c3b2b");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Continent = "NorthAmerica",
                            CountryCode = "TR",
                            CountryDescription = "Ut molestiae ad incidunt voluptatibus fuga.",
                            CountryName = "Turkey",
                            CountryPhone = "+90",
                            CreatedDate = new DateTime(2017, 4, 19, 2, 55, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "5ba44a3a-23ae-4cf5-a01f-079282197099",
                            CreatedIPAddress = "47.180.117.87",
                            Guid = "a2ab280f-018c-44d9-b3b7-f28341b06e9c",
                            IsUpdated = "No",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 2,
                            Continent = "NorthAmerica",
                            CountryCode = "RU",
                            CountryDescription = "Odit minus culpa est quod qui.",
                            CountryName = "Russia",
                            CountryPhone = "+7",
                            CreatedDate = new DateTime(2005, 2, 7, 15, 27, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "dfaceef4-6346-40a3-b680-7c6fad1e84db",
                            CreatedIPAddress = "190.110.119.55",
                            Guid = "f96f8c9d-739b-4f56-be04-5cd7caba49b7",
                            IsUpdated = "No",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Continent = "Africa",
                            CountryCode = "USA",
                            CountryDescription = "Dignissimos commodi aliquid est placeat harum.",
                            CountryName = "United States of America",
                            CountryPhone = "+1",
                            CreatedDate = new DateTime(2012, 6, 27, 2, 27, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "ad71928b-f0fb-4afa-a2d6-e1cf80bb5806",
                            CreatedIPAddress = "47.27.165.166",
                            Guid = "36fbadce-4929-4f1a-9128-eb354f66c9f1",
                            IsUpdated = "No",
                            Status = "Unknown"
                        },
                        new
                        {
                            Id = 4,
                            Continent = "SouthAmerica",
                            CountryCode = "SA",
                            CountryDescription = "Nihil quae explicabo et ad adipisci.",
                            CountryName = "Kingdom of Saudi Arabia",
                            CountryPhone = "+966",
                            CreatedDate = new DateTime(2013, 5, 4, 14, 15, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "2491bcac-ce3b-4d3d-ad8a-a4c932beab7a",
                            CreatedIPAddress = "251.127.247.188",
                            Guid = "6df44975-f768-4b1d-bba6-74a0fc6466f6",
                            IsUpdated = "No",
                            Status = "Passive"
                        },
                        new
                        {
                            Id = 5,
                            Continent = "NorthAmerica",
                            CountryCode = "GER",
                            CountryDescription = "Dolorem officiis voluptatem sint est dignissimos.",
                            CountryName = "Germany",
                            CountryPhone = "+49",
                            CreatedDate = new DateTime(2009, 2, 3, 14, 50, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "89b0f472-89eb-4d3f-bdf5-d6b75819bea5",
                            CreatedIPAddress = "209.50.171.91",
                            Guid = "5174840d-1c6f-45e9-8405-ec3f5681d93a",
                            IsUpdated = "No",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 840, DateTimeKind.Local).AddTicks(1414));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("ceea44a6-a202-4a39-a381-6fa88f8fd7b1");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DriverLicense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8566329a-4262-45ee-804f-748742a388b3");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TCN_Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("ContractEmployees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Northern Ireland",
                            Age = (byte)37,
                            BirthDate = new DateTime(1988, 1, 11, 7, 40, 52, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2017, 12, 3, 19, 31, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "4514e170-4ebd-4b2e-b5a6-9438e9fbb433",
                            CreatedIPAddress = "243.232.188.80",
                            DriverLicense = "B",
                            Email = "Jaeden_Green@gmail.com",
                            EndContract = new DateTime(2013, 6, 17, 2, 12, 41, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Jacques",
                            FullName = "JacquesMayer",
                            Gender = 1,
                            Guid = "fa64abe0-dd77-41df-b611-4ca45bdd4888",
                            HireDate = new DateTime(2012, 6, 17, 2, 12, 41, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Italian",
                            LastName = "Mayer",
                            PhoneNumber = "05540426632",
                            PhotoPath = "https://lexi.biz/georgia/quality/dynamic",
                            Status = "Unknown",
                            SupplierId = 1,
                            TCN_Passport = "03585983355"
                        },
                        new
                        {
                            Id = 2,
                            Address = "England",
                            Age = (byte)59,
                            BirthDate = new DateTime(1965, 11, 11, 2, 14, 35, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2012, 3, 2, 17, 9, 14, 0, DateTimeKind.Unspecified),
                            CreatedID = "9d35c6f2-9c34-4e4a-807c-fdde0fa1165f",
                            CreatedIPAddress = "33.35.136.87",
                            DriverLicense = "D",
                            Email = "Declan.Schmidt75@gmail.com",
                            EndContract = new DateTime(2001, 6, 26, 10, 23, 43, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Ericka",
                            FullName = "ErickaPrice",
                            Gender = 1,
                            Guid = "22b4a29e-7b70-4659-9703-702c7a43e9d0",
                            HireDate = new DateTime(2000, 6, 26, 10, 23, 43, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "English",
                            LastName = "Price",
                            PhoneNumber = "05992554552",
                            PhotoPath = "https://bertrand.net/colorado/ssl/granite",
                            Status = "Passive",
                            SupplierId = 5,
                            TCN_Passport = "23302816133"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Wales",
                            Age = (byte)64,
                            BirthDate = new DateTime(1960, 6, 21, 17, 32, 17, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2006, 10, 3, 2, 24, 53, 0, DateTimeKind.Unspecified),
                            CreatedID = "57b1b286-5bf1-408c-89a6-c7481f1fb532",
                            CreatedIPAddress = "45.234.211.78",
                            DriverLicense = "B",
                            Email = "Maye42@gmail.com",
                            EndContract = new DateTime(2020, 4, 26, 6, 32, 41, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Edythe",
                            FullName = "EdytheSchinner",
                            Gender = 2,
                            Guid = "8fbfbaba-d892-4339-ba9d-2e2c5af433dd",
                            HireDate = new DateTime(2019, 4, 26, 6, 32, 41, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Spanish",
                            LastName = "Schinner",
                            PhoneNumber = "05413627085",
                            PhotoPath = "https://max.org/1080p/haptic",
                            Status = "Unknown",
                            SupplierId = 1,
                            TCN_Passport = "59166975502"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Wales",
                            Age = (byte)45,
                            BirthDate = new DateTime(1980, 2, 7, 6, 54, 25, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2014, 11, 16, 9, 15, 27, 0, DateTimeKind.Unspecified),
                            CreatedID = "884fad6d-b6f5-4bb0-a1f3-c93730f60088",
                            CreatedIPAddress = "36.150.119.143",
                            DriverLicense = "B",
                            Email = "Sasha_Bergnaum@hotmail.com",
                            EndContract = new DateTime(2007, 1, 3, 21, 14, 40, 0, DateTimeKind.Unspecified),
                            Experience = 3,
                            FirstName = "Naomie",
                            FullName = "NaomieJohns",
                            Gender = 2,
                            Guid = "6e69c2da-d918-4406-be78-988e240f2a73",
                            HireDate = new DateTime(2006, 1, 3, 21, 14, 40, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "French",
                            LastName = "Johns",
                            PhoneNumber = "05453502488",
                            PhotoPath = "http://pearlie.org/plastic/asymmetric/tangible",
                            Status = "Active",
                            SupplierId = 2,
                            TCN_Passport = "81096665658"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Wales",
                            Age = (byte)45,
                            BirthDate = new DateTime(1980, 3, 20, 17, 13, 7, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2001, 11, 20, 13, 8, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "5f80baf6-a958-4a7d-8b76-e904de3ba154",
                            CreatedIPAddress = "104.166.81.35",
                            DriverLicense = "B",
                            Email = "Lula_Morar14@hotmail.com",
                            EndContract = new DateTime(2004, 5, 26, 15, 20, 9, 0, DateTimeKind.Unspecified),
                            Experience = 4,
                            FirstName = "Elisabeth",
                            FullName = "ElisabethEmmerich",
                            Gender = 0,
                            Guid = "9761e668-a8ee-4f95-9b2d-8d2e7cd7d8f9",
                            HireDate = new DateTime(2003, 5, 26, 15, 20, 9, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            Language = "Italian",
                            LastName = "Emmerich",
                            PhoneNumber = "05702684351",
                            PhotoPath = "https://margret.name/quantifying/ftp",
                            Status = "Active",
                            SupplierId = 3,
                            TCN_Passport = "42716919198"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("ContractCount")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 841, DateTimeKind.Local).AddTicks(4243));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8fb198ff-5a48-48cc-9a3d-79788d87025b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("CurrentPosition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("DaysWorked")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("d7096914-76e9-4475-9e68-2e09110bbf78");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Scotland",
                            Age = (byte)51,
                            BirthDate = new DateTime(1973, 5, 2, 11, 28, 46, 0, DateTimeKind.Unspecified),
                            ContractCount = 5,
                            CountryId = 1,
                            CreatedDate = new DateTime(2013, 6, 19, 19, 18, 36, 0, DateTimeKind.Unspecified),
                            CreatedID = "4642fc15-11e1-42ab-af6c-15d0fddcac03",
                            CreatedIPAddress = "101.146.108.159",
                            CurrentPosition = "Consulting",
                            DaysWorked = 4438,
                            Email = "Franz12@hotmail.com",
                            EndContract = new DateTime(2028, 2, 20, 17, 57, 29, 0, DateTimeKind.Unspecified),
                            Experience = 15,
                            FirstName = "Gerry",
                            FullName = "GerryThiel",
                            Gender = "Male",
                            Guid = "15692b42-92e2-4aa6-83e6-9c1cd60b64f7",
                            HireDate = new DateTime(2013, 2, 20, 17, 57, 29, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Thiel",
                            PhoneNumber = "05325060539",
                            PhotoPath = "http://zack.org/hub/deposit/neural",
                            Status = "Unknown",
                            TCN_Passport = "39209293183"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Wales",
                            Age = (byte)32,
                            BirthDate = new DateTime(1992, 8, 8, 11, 37, 46, 0, DateTimeKind.Unspecified),
                            ContractCount = 7,
                            CountryId = 1,
                            CreatedDate = new DateTime(2009, 9, 9, 21, 46, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "6a38a55a-8607-4399-9fe7-19dde79087ee",
                            CreatedIPAddress = "51.151.2.7",
                            CurrentPosition = "Marketing",
                            DaysWorked = 6407,
                            Email = "Noemie52@yahoo.com",
                            EndContract = new DateTime(2028, 10, 2, 1, 58, 45, 0, DateTimeKind.Unspecified),
                            Experience = 19,
                            FirstName = "Caleb",
                            FullName = "CalebRutherford",
                            Gender = "Female",
                            Guid = "33a422c1-e660-456c-9606-7af8f4f44f0a",
                            HireDate = new DateTime(2007, 10, 2, 1, 58, 45, 0, DateTimeKind.Unspecified),
                            IsUpdated = "Yes",
                            LastName = "Rutherford",
                            PhoneNumber = "05437071807",
                            PhotoPath = "https://prudence.net/fantastic-fresh-car",
                            Status = "Active",
                            TCN_Passport = "41533871309"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Wales",
                            Age = (byte)49,
                            BirthDate = new DateTime(1975, 9, 18, 15, 40, 43, 0, DateTimeKind.Unspecified),
                            ContractCount = 5,
                            CountryId = 3,
                            CreatedDate = new DateTime(2011, 1, 2, 2, 12, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "ac71831a-b0c1-4dda-894d-7fa2cb8acd8e",
                            CreatedIPAddress = "136.39.119.107",
                            CurrentPosition = "Consulting",
                            DaysWorked = 4547,
                            Email = "Julius.Stiedemann3@yahoo.com",
                            EndContract = new DateTime(2027, 11, 4, 3, 22, 32, 0, DateTimeKind.Unspecified),
                            Experience = 19,
                            FirstName = "Jada",
                            FullName = "JadaDavis",
                            Gender = "Male",
                            Guid = "84559cee-cb40-4595-b7fd-150354337ead",
                            HireDate = new DateTime(2012, 11, 4, 3, 22, 32, 0, DateTimeKind.Unspecified),
                            IsUpdated = "Yes",
                            LastName = "Davis",
                            PhoneNumber = "05225034338",
                            PhotoPath = "http://brandi.name/object-oriented",
                            Status = "Active",
                            TCN_Passport = "90968527503"
                        },
                        new
                        {
                            Id = 4,
                            Address = "England",
                            Age = (byte)65,
                            BirthDate = new DateTime(1960, 3, 9, 5, 10, 16, 0, DateTimeKind.Unspecified),
                            ContractCount = 6,
                            CountryId = 5,
                            CreatedDate = new DateTime(2021, 11, 21, 14, 23, 4, 0, DateTimeKind.Unspecified),
                            CreatedID = "c90696fb-7932-4b0a-95d7-027939df80ff",
                            CreatedIPAddress = "160.128.110.80",
                            CurrentPosition = "Consulting",
                            DaysWorked = 5459,
                            Email = "Jackeline97@yahoo.com",
                            EndContract = new DateTime(2028, 5, 7, 4, 52, 12, 0, DateTimeKind.Unspecified),
                            Experience = 14,
                            FirstName = "Meggie",
                            FullName = "MeggieBruen",
                            Gender = "Female",
                            Guid = "2ebe12e8-614e-4948-a971-0fa668dea79a",
                            HireDate = new DateTime(2010, 5, 7, 4, 52, 12, 0, DateTimeKind.Unspecified),
                            IsUpdated = "Yes",
                            LastName = "Bruen",
                            PhoneNumber = "05956077998",
                            PhotoPath = "http://alison.com/automotive--movies/multi-channelled",
                            Status = "Passive",
                            TCN_Passport = "74542806200"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Wales",
                            Age = (byte)54,
                            BirthDate = new DateTime(1970, 12, 14, 11, 21, 21, 0, DateTimeKind.Unspecified),
                            ContractCount = 7,
                            CountryId = 5,
                            CreatedDate = new DateTime(2003, 3, 1, 4, 9, 46, 0, DateTimeKind.Unspecified),
                            CreatedID = "3e01c598-6d48-4f5f-9c97-edd124e12925",
                            CreatedIPAddress = "104.197.110.96",
                            CurrentPosition = "Marketing",
                            DaysWorked = 6747,
                            Email = "Samara.Schoen@gmail.com",
                            EndContract = new DateTime(2027, 10, 27, 2, 58, 43, 0, DateTimeKind.Unspecified),
                            Experience = 23,
                            FirstName = "Eldora",
                            FullName = "EldoraHermann",
                            Gender = "Male",
                            Guid = "23caec90-2471-4d20-b715-91d45bc7eff2",
                            HireDate = new DateTime(2006, 10, 27, 2, 58, 43, 0, DateTimeKind.Unspecified),
                            IsUpdated = "No",
                            LastName = "Hermann",
                            PhoneNumber = "05492572316",
                            PhotoPath = "https://edwardo.net/circuit/central/copying",
                            Status = "Active",
                            TCN_Passport = "27981274371"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ActivityTicketOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityTicketOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 845, DateTimeKind.Local).AddTicks(9819));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3a3ec3d8-d016-416b-905d-702393cdf77a");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3257238f-2a14-442b-959e-a9da8271d45d");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTicketId");

                    b.HasIndex("ActivityTicketOrderId");

                    b.ToTable("ActivityTicketOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTicketId = 5,
                            ActivityTicketOrderId = 3,
                            CreatedDate = new DateTime(2017, 9, 18, 19, 26, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "b9aafebd-7a7b-4845-a369-b76944992e2d",
                            CreatedIPAddress = "15.206.248.13",
                            Discount = 0.4800361953999940m,
                            Guid = "b9753312-051d-416c-aab8-fc4de6676eea",
                            IsUpdated = "No",
                            Quantity = 4,
                            Status = "Active",
                            TotalCost = 1484.2799992075548980331972223m,
                            UnitPrice = 713.645827880928700m
                        },
                        new
                        {
                            Id = 2,
                            ActivityTicketId = 3,
                            ActivityTicketOrderId = 5,
                            CreatedDate = new DateTime(2004, 5, 8, 5, 32, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "60c48f63-c6d4-4ba6-a998-a7ec5642c6c8",
                            CreatedIPAddress = "218.28.41.134",
                            Discount = 0.1963128773413240m,
                            Guid = "181a89cd-a525-40d1-93a9-2f12e3e48a61",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Passive",
                            TotalCost = 596.91710245460485062252250713m,
                            UnitPrice = 742.723238466163800m
                        },
                        new
                        {
                            Id = 3,
                            ActivityTicketId = 2,
                            ActivityTicketOrderId = 3,
                            CreatedDate = new DateTime(2010, 10, 9, 18, 44, 45, 0, DateTimeKind.Unspecified),
                            CreatedID = "74961e58-28a2-4d8c-9aa1-b00f2b60d5fc",
                            CreatedIPAddress = "222.105.169.91",
                            Discount = 0.3560518107906130m,
                            Guid = "60fff5b2-c142-453e-90ff-8dac2230db5b",
                            IsUpdated = "No",
                            Quantity = 2,
                            Status = "Passive",
                            TotalCost = 726.61555026364047897880471858m,
                            UnitPrice = 564.187897752883700m
                        },
                        new
                        {
                            Id = 4,
                            ActivityTicketId = 4,
                            ActivityTicketOrderId = 1,
                            CreatedDate = new DateTime(2002, 2, 18, 22, 46, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "7ddc0d24-04bf-4b83-9340-bae2c0ec2ee6",
                            CreatedIPAddress = "103.174.48.213",
                            Discount = 0.1411787578237905m,
                            Guid = "d637ba0b-5779-47a1-9375-e2687e19c54f",
                            IsUpdated = "No",
                            Quantity = 1,
                            Status = "Unknown",
                            TotalCost = 98.68019800485039830542087729m,
                            UnitPrice = 114.9019064256023500m
                        },
                        new
                        {
                            Id = 5,
                            ActivityTicketId = 1,
                            ActivityTicketOrderId = 5,
                            CreatedDate = new DateTime(2017, 1, 9, 18, 39, 42, 0, DateTimeKind.Unspecified),
                            CreatedID = "7b2d822c-9fb9-42a5-8fd7-387811581f67",
                            CreatedIPAddress = "226.73.167.24",
                            Discount = 0.341885920412660m,
                            Guid = "0d2cd2c5-2484-4062-8287-3b0d60b87464",
                            IsUpdated = "No",
                            Quantity = 4,
                            Status = "Unknown",
                            TotalCost = 1959.9420199250070702203456880m,
                            UnitPrice = 744.529740631729700m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 847, DateTimeKind.Local).AddTicks(3872));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("a98d8f6c-3b2c-4a1e-95de-2a81c9e5ea4b");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c8582fc6-8311-4b3e-9f71-532e2a92a147");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("WebUserEmail")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebUserAccountId");

                    b.ToTable("ActivityTicketOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2005, 1, 4, 2, 24, 37, 0, DateTimeKind.Unspecified),
                            CreatedID = "3541bb02-2279-49da-8737-ebef44cfdcc7",
                            CreatedIPAddress = "181.126.230.112",
                            EmployeeId = 3,
                            Guid = "2568ecf1-9197-4582-81de-e54532a477ea",
                            IsUpdated = "No",
                            Note = "Handcrafted Plastic Chair Nauru Danish Krone 1080p",
                            Status = "Active",
                            WebUserAccountId = 5,
                            WebUserEmail = "Lewis.Farrell81@hotmail.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2016, 5, 18, 2, 53, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "4918d5c2-99d5-4f57-b70b-d689895a3a76",
                            CreatedIPAddress = "98.204.143.78",
                            EmployeeId = 3,
                            Guid = "15f602c4-ddff-403f-ba4f-69bd4f6fdc24",
                            IsUpdated = "No",
                            Note = "Sao Tome and Principe Movies & Garden Intelligent Manor",
                            Status = "Active",
                            WebUserAccountId = 2,
                            WebUserEmail = "Dagmar.Heidenreich@yahoo.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2014, 12, 1, 23, 56, 4, 0, DateTimeKind.Unspecified),
                            CreatedID = "ea6eb9e3-6a7b-4893-b5fd-08dee3c28b87",
                            CreatedIPAddress = "51.254.125.6",
                            EmployeeId = 4,
                            Guid = "eca3bbef-1ed7-4c79-93c0-58e277e0bd35",
                            IsUpdated = "No",
                            Note = "1080p Sleek copy Granite",
                            Status = "Active",
                            WebUserAccountId = 2,
                            WebUserEmail = "Philip53@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2015, 6, 18, 23, 49, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "bf09d24a-85db-4a92-aaad-91a15736963d",
                            CreatedIPAddress = "97.17.249.115",
                            EmployeeId = 4,
                            Guid = "1024a01c-7592-40ec-8aab-dea1cfd6c27c",
                            IsUpdated = "Yes",
                            Note = "Assurance Tasty Investor navigating",
                            Status = "Active",
                            WebUserAccountId = 3,
                            WebUserEmail = "Jovani29@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2017, 8, 2, 6, 30, 20, 0, DateTimeKind.Unspecified),
                            CreatedID = "4903603a-5eb7-406a-a4d5-c08d9aa452ab",
                            CreatedIPAddress = "242.249.21.211",
                            EmployeeId = 4,
                            Guid = "8a1ce2ae-d84e-4c4d-b7f6-a0aad8e12ca6",
                            IsUpdated = "No",
                            Note = "Buckinghamshire content-based invoice Books & Games",
                            Status = "Active",
                            WebUserAccountId = 3,
                            WebUserEmail = "Garrett.Kohler1@hotmail.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.ActivityPassTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CommissionRate")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 849, DateTimeKind.Local).AddTicks(2259));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("33405c96-e4c2-438e-b77e-fa262834b97f");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("74fdf448-ea68-421f-9218-548aa95a0043");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerCompanyTransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal?>("TotalCostwithCommission")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerCompanyTransactionId");

                    b.ToTable("ActivityPassTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionRate = (byte)11,
                            CreatedDate = new DateTime(2011, 12, 12, 11, 12, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "3bb256d5-3c95-4d0a-852c-6b6ab60486a4",
                            CreatedIPAddress = "88.0.202.163",
                            Guid = "510a2eca-998c-4abe-84da-5347d79cd3c1",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 2,
                            Price = 139.969996709981760m,
                            Status = "Passive",
                            TotalCostwithCommission = 155.3666963480797536m
                        },
                        new
                        {
                            Id = 2,
                            CommissionRate = (byte)8,
                            CreatedDate = new DateTime(2010, 4, 8, 7, 20, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "fab0163c-f233-4499-84ea-e5d3fd65d6b0",
                            CreatedIPAddress = "74.182.14.146",
                            Guid = "a3171f3a-5d72-4d6c-a578-ddb765a139b1",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 1,
                            Price = 330.933166558937280m,
                            Status = "Passive",
                            TotalCostwithCommission = 357.4078198836522624m
                        },
                        new
                        {
                            Id = 3,
                            CommissionRate = (byte)18,
                            CreatedDate = new DateTime(2006, 5, 11, 8, 39, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "0b7a24d2-2b63-416b-9248-e9be197aa589",
                            CreatedIPAddress = "57.185.123.223",
                            Guid = "addf427f-3e1a-4e4a-b6ed-9f7f052eaa87",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 2,
                            Price = 297.146132896583680m,
                            Status = "Passive",
                            TotalCostwithCommission = 350.6324368179687424m
                        },
                        new
                        {
                            Id = 4,
                            CommissionRate = (byte)9,
                            CreatedDate = new DateTime(2011, 7, 17, 22, 57, 2, 0, DateTimeKind.Unspecified),
                            CreatedID = "07d51307-c83f-404f-83bb-a02d937e77a3",
                            CreatedIPAddress = "199.175.226.182",
                            Guid = "05bcc263-9a42-4772-ae67-8ef14c1684c3",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 5,
                            Price = 158.964389795940800m,
                            Status = "Unknown",
                            TotalCostwithCommission = 173.271184877575472m
                        },
                        new
                        {
                            Id = 5,
                            CommissionRate = (byte)18,
                            CreatedDate = new DateTime(2018, 9, 11, 9, 33, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "bcf45486-6d45-4dba-aeb0-bddcd71e6a55",
                            CreatedIPAddress = "206.47.179.118",
                            Guid = "eb33c851-c020-4368-b39d-8c0dcff36523",
                            IsUpdated = "No",
                            PartnerCompanyTransactionId = 5,
                            Price = 218.669969224690880m,
                            Status = "Unknown",
                            TotalCostwithCommission = 258.0305636851352384m
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 850, DateTimeKind.Local).AddTicks(4288));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("5d3dfced-3e83-4225-ad8d-ff5742950fc4");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("c02b9de0-aa18-422a-8d31-69ba43844d4c");

                    b.Property<string>("HasAirport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasHotelFacility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TouristPopulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportVehicle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new TimeSpan(0, 2, 56, 0, 0),
                            CreatedDate = new DateTime(2018, 10, 26, 6, 19, 18, 0, DateTimeKind.Unspecified),
                            CreatedID = "3d57b73a-91cd-4a4f-9e8f-92fc0196784f",
                            CreatedIPAddress = "33.209.164.174",
                            DistrictName = "explicabo",
                            Guid = "4f2aabaf-8128-4788-a7f6-d1db8afe84c5",
                            HasAirport = "No",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Passive",
                            TouristPopulation = "No",
                            TransportVehicle = 2
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new TimeSpan(0, 2, 37, 0, 0),
                            CreatedDate = new DateTime(2011, 7, 11, 17, 55, 25, 0, DateTimeKind.Unspecified),
                            CreatedID = "001dc8ec-f8e2-4798-acb6-070cddd05f8e",
                            CreatedIPAddress = "10.108.37.234",
                            DistrictName = "perferendis",
                            Guid = "6520f86b-0db2-4d24-9fa0-97af5d4abb61",
                            HasAirport = "No",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "No",
                            TransportVehicle = 7
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new TimeSpan(0, 1, 15, 0, 0),
                            CreatedDate = new DateTime(2006, 8, 16, 3, 56, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "0ae01e4f-e974-488b-939a-5d463c3a2182",
                            CreatedIPAddress = "106.42.56.232",
                            DistrictName = "quia",
                            Guid = "0c3d6579-74aa-448f-96d1-87efe0f5b356",
                            HasAirport = "No",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Unknown",
                            TouristPopulation = "No",
                            TransportVehicle = 2
                        },
                        new
                        {
                            Id = 4,
                            ArrivalTime = new TimeSpan(0, 1, 21, 0, 0),
                            CreatedDate = new DateTime(2008, 5, 4, 16, 33, 10, 0, DateTimeKind.Unspecified),
                            CreatedID = "19bf7e82-7770-4c58-9dac-55d387be6c0f",
                            CreatedIPAddress = "145.252.32.98",
                            DistrictName = "culpa",
                            Guid = "3dc81783-1dc1-4304-9f16-ff5f4745b2a5",
                            HasAirport = "Yes",
                            HasHotelFacility = "Yes",
                            IsUpdated = "No",
                            Status = "Unknown",
                            TouristPopulation = "No",
                            TransportVehicle = 4
                        },
                        new
                        {
                            Id = 5,
                            ArrivalTime = new TimeSpan(0, 1, 31, 0, 0),
                            CreatedDate = new DateTime(2019, 5, 27, 17, 20, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "494177f5-a711-4a4c-b329-ca0e6065e211",
                            CreatedIPAddress = "113.61.231.87",
                            DistrictName = "tenetur",
                            Guid = "7bdf4552-751f-469e-b556-a7cfd20ee59c",
                            HasAirport = "No",
                            HasHotelFacility = "No",
                            IsUpdated = "No",
                            Status = "Active",
                            TouristPopulation = "Yes",
                            TransportVehicle = 6
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 851, DateTimeKind.Local).AddTicks(8018));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("72c147a2-f1f5-4fee-a004-448ff868a094");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte?>("DiscountRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("64271c53-155e-44c4-8ce6-ad62bb75203f");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TicketHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            ArrivalDate = new DateTime(2012, 12, 4, 2, 28, 20, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2004, 9, 23, 1, 17, 6, 0, DateTimeKind.Unspecified),
                            CreatedID = "56af52f0-555f-4b5f-8b8b-c7f90be3d793",
                            CreatedIPAddress = "96.254.255.4",
                            Currency = "TRY",
                            DepartureAdress = "Light payment",
                            DepartureDate = new DateTime(2012, 12, 3, 23, 28, 20, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Re-contextualized pixel",
                            DiscountRate = (byte)17,
                            Guid = "6a6926ed-7b53-4ae4-8ca8-e60de7c6bd66",
                            IsUpdated = "Yes",
                            NetCost = 310.422148248626144m,
                            PaymentStatus = "PartialPaid",
                            Price = 374.00258825135680m,
                            SeatNumber = "C89",
                            Status = "Passive",
                            TicketHolderName = "Rickie Rowe"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            ArrivalDate = new DateTime(2000, 5, 7, 22, 35, 11, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2005, 4, 7, 7, 22, 39, 0, DateTimeKind.Unspecified),
                            CreatedID = "c23b1401-4571-4fb6-8114-68544ad4e7e2",
                            CreatedIPAddress = "104.22.178.146",
                            Currency = "EUR",
                            DepartureAdress = "payment SAS",
                            DepartureDate = new DateTime(2000, 5, 7, 19, 35, 11, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Plastic Prairie",
                            DiscountRate = (byte)15,
                            Guid = "2d464c33-ce3b-43c9-876e-e3879207ebf2",
                            IsUpdated = "No",
                            NetCost = 321.308744150873632m,
                            PaymentStatus = "PartialPaid",
                            Price = 378.010287236321920m,
                            SeatNumber = "A172",
                            Status = "Passive",
                            TicketHolderName = "Francesco Yundt"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2015, 3, 1, 13, 28, 28, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2006, 9, 20, 14, 20, 40, 0, DateTimeKind.Unspecified),
                            CreatedID = "d8781b48-ccfd-4db4-a50a-091ce4683237",
                            CreatedIPAddress = "154.193.205.25",
                            Currency = "TRY",
                            DepartureAdress = "non-volatile Profound",
                            DepartureDate = new DateTime(2015, 3, 1, 10, 28, 28, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "Director Global",
                            DiscountRate = (byte)19,
                            Guid = "6165a699-4140-41ee-bf73-5466a859af31",
                            IsUpdated = "No",
                            NetCost = 181.2559458302139456m,
                            PaymentStatus = "PartialPaid",
                            Price = 223.772772629893760m,
                            SeatNumber = "B58",
                            Status = "Passive",
                            TicketHolderName = "Itzel Rath"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 4,
                            ArrivalDate = new DateTime(2010, 11, 10, 22, 59, 29, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2013, 3, 3, 14, 37, 22, 0, DateTimeKind.Unspecified),
                            CreatedID = "92a455ca-ab70-408e-82e9-488597a2faf7",
                            CreatedIPAddress = "27.112.17.55",
                            Currency = "CNY",
                            DepartureAdress = "channels invoice",
                            DepartureDate = new DateTime(2010, 11, 10, 19, 59, 29, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "leverage Practical Metal Computer",
                            DiscountRate = (byte)13,
                            Guid = "51418d8a-4771-4093-975b-391c56f1c252",
                            IsUpdated = "Yes",
                            NetCost = 207.2548947726233856m,
                            PaymentStatus = "Pending",
                            Price = 238.224016980026880m,
                            SeatNumber = "A31",
                            Status = "Passive",
                            TicketHolderName = "Chelsea Herman"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 5,
                            ArrivalDate = new DateTime(2018, 10, 8, 0, 49, 30, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 8, 4, 17, 45, 54, 0, DateTimeKind.Unspecified),
                            CreatedID = "bd968ab1-b94d-4665-8807-20577e6030fd",
                            CreatedIPAddress = "1.155.23.231",
                            Currency = "JPY",
                            DepartureAdress = "Bangladesh Tasty",
                            DepartureDate = new DateTime(2018, 10, 7, 21, 49, 30, 0, DateTimeKind.Unspecified),
                            DestinationAdress = "neural Auto Loan Account",
                            DiscountRate = (byte)19,
                            Guid = "805caf60-af2f-4e4f-85c1-205fd45c15a9",
                            IsUpdated = "No",
                            NetCost = 271.9420075892274912m,
                            PaymentStatus = "Pending",
                            Price = 335.730873566947520m,
                            SeatNumber = "C170",
                            Status = "Active",
                            TicketHolderName = "Jaida Emard"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 860, DateTimeKind.Local).AddTicks(4243));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("ccd6c3fd-3a09-4049-bfcc-b85b58016d45");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<decimal>("DailyRentalFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("8d1ccb47-37ea-4d9c-8c90-c8b454bac6ca");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RentalVehicleSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TotalRentalDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RentalVehicleSupplierId");

                    b.ToTable("RentalVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 3,
                            Age = 13,
                            Capacity = (short)38,
                            CreatedDate = new DateTime(2002, 7, 12, 17, 23, 12, 0, DateTimeKind.Unspecified),
                            CreatedID = "ae70ab07-3e16-4a00-8617-a5ec93142fe7",
                            CreatedIPAddress = "164.139.4.94",
                            DailyRentalFee = 13222m,
                            ExpireDate = new DateTime(2020, 10, 16, 12, 14, 50, 0, DateTimeKind.Unspecified),
                            Guid = "990078c5-61c7-43ab-94f2-5b642dbc8c71",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 983909,
                            LicensePlate = "67 uq 8191",
                            Model = "Fiesta",
                            RentalVehicleSupplierId = 4,
                            StartDate = new DateTime(2020, 10, 12, 12, 14, 50, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 52888m,
                            TotalRentalDay = 4,
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 1,
                            Age = 2,
                            Capacity = (short)40,
                            CreatedDate = new DateTime(2012, 2, 20, 21, 51, 17, 0, DateTimeKind.Unspecified),
                            CreatedID = "3479b8b4-bcee-412a-92ae-3d3295a9b9a7",
                            CreatedIPAddress = "190.224.169.166",
                            DailyRentalFee = 20183m,
                            ExpireDate = new DateTime(2019, 10, 15, 17, 23, 8, 0, DateTimeKind.Unspecified),
                            Guid = "e680ca9c-a150-4dfe-ac53-ae40647f3990",
                            IsAvailable = "Available",
                            IsUpdated = "No",
                            Kilometer = 898647,
                            LicensePlate = "32 lz 3759",
                            Model = "Silverado",
                            RentalVehicleSupplierId = 4,
                            StartDate = new DateTime(2019, 10, 11, 17, 23, 8, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 80732m,
                            TotalRentalDay = 4,
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 1,
                            Age = 5,
                            Capacity = (short)72,
                            CreatedDate = new DateTime(2016, 12, 9, 11, 47, 16, 0, DateTimeKind.Unspecified),
                            CreatedID = "fc1ce96d-22a5-425f-9217-ce380c036654",
                            CreatedIPAddress = "241.240.234.220",
                            DailyRentalFee = 15475m,
                            ExpireDate = new DateTime(2015, 4, 18, 21, 37, 8, 0, DateTimeKind.Unspecified),
                            Guid = "b7ffeb95-93b9-400d-ab00-30af2380cafb",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 67936,
                            LicensePlate = "26 ga 2762",
                            Model = "Element",
                            RentalVehicleSupplierId = 2,
                            StartDate = new DateTime(2015, 4, 13, 21, 37, 8, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 77375m,
                            TotalRentalDay = 5,
                            VehicleType = "Motorbike"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 3,
                            Age = 14,
                            Capacity = (short)94,
                            CreatedDate = new DateTime(2014, 10, 18, 22, 44, 28, 0, DateTimeKind.Unspecified),
                            CreatedID = "ff66427d-16e0-4520-a785-389d1e49b566",
                            CreatedIPAddress = "170.88.41.22",
                            DailyRentalFee = 19270m,
                            ExpireDate = new DateTime(2020, 12, 21, 20, 24, 52, 0, DateTimeKind.Unspecified),
                            Guid = "b34b97dd-ae62-4b93-bdb8-a94eeb5966e9",
                            IsAvailable = "Available",
                            IsUpdated = "Yes",
                            Kilometer = 757554,
                            LicensePlate = "57 pf 9599",
                            Model = "Spyder",
                            RentalVehicleSupplierId = 1,
                            StartDate = new DateTime(2020, 12, 16, 20, 24, 52, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            TotalPrice = 96350m,
                            TotalRentalDay = 5,
                            VehicleType = "Bus"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 1,
                            Age = 8,
                            Capacity = (short)84,
                            CreatedDate = new DateTime(2009, 9, 26, 7, 51, 24, 0, DateTimeKind.Unspecified),
                            CreatedID = "c655e979-2b3d-41fd-b0d4-154ad59b4521",
                            CreatedIPAddress = "28.60.218.49",
                            DailyRentalFee = 21932m,
                            ExpireDate = new DateTime(2008, 9, 23, 19, 25, 9, 0, DateTimeKind.Unspecified),
                            Guid = "515ad794-56f7-48db-aa85-11bb49787f4a",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 622205,
                            LicensePlate = "55 hj 7455",
                            Model = "Prius",
                            RentalVehicleSupplierId = 4,
                            StartDate = new DateTime(2008, 9, 22, 19, 25, 9, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TotalPrice = 21932m,
                            TotalRentalDay = 1,
                            VehicleType = "Minibus"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<short>("Capacity")
                        .HasMaxLength(2)
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 861, DateTimeKind.Local).AddTicks(8548));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("511751ac-b7b1-433c-911a-c8dd317792e1");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValue("3b5fe694-c53e-4670-b2fb-8363197e0a8a");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometer")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 5,
                            Age = 7,
                            Capacity = (short)82,
                            CreatedDate = new DateTime(2007, 3, 19, 3, 25, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "3357308c-6870-424f-ad6f-0ece6f034d69",
                            CreatedIPAddress = "109.207.106.109",
                            Guid = "f2df94c4-aee1-4eb8-87bf-8bd98a5ad357",
                            IsAvailable = "Busy",
                            IsUpdated = "Yes",
                            Kilometer = 148342,
                            LicensePlate = "47 yr 1495",
                            MarketValue = 17177848m,
                            Model = "CTS",
                            PurchaseDate = new DateTime(2005, 6, 13, 5, 11, 31, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Jeep"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            Age = 12,
                            Capacity = (short)33,
                            CreatedDate = new DateTime(2004, 10, 7, 11, 31, 26, 0, DateTimeKind.Unspecified),
                            CreatedID = "790a286e-456c-46ea-ae54-666023c62e34",
                            CreatedIPAddress = "169.106.77.118",
                            Guid = "d011a69a-19a2-4154-b4ab-27e09a5f0de4",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 6414,
                            LicensePlate = "12 im 1632",
                            MarketValue = 20208650m,
                            Model = "Altima",
                            PurchaseDate = new DateTime(2016, 11, 11, 16, 16, 43, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            VehicleType = "Yacht"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 4,
                            Age = 7,
                            Capacity = (short)3,
                            CreatedDate = new DateTime(2012, 5, 2, 14, 46, 2, 0, DateTimeKind.Unspecified),
                            CreatedID = "1187d115-a27f-498c-9668-2bed07e44e17",
                            CreatedIPAddress = "98.102.64.16",
                            Guid = "ea597ce8-89a7-4333-8550-7818a8352424",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 44403,
                            LicensePlate = "80 hx 8415",
                            MarketValue = 20328187m,
                            Model = "Alpine",
                            PurchaseDate = new DateTime(2009, 5, 13, 22, 28, 23, 0, DateTimeKind.Unspecified),
                            Status = "Passive",
                            VehicleType = "Motorbike"
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 4,
                            Age = 11,
                            Capacity = (short)30,
                            CreatedDate = new DateTime(2019, 8, 11, 15, 28, 7, 0, DateTimeKind.Unspecified),
                            CreatedID = "8a6511f3-b07e-47de-b5db-b24f845a1fcb",
                            CreatedIPAddress = "215.134.192.209",
                            Guid = "782fed40-11c3-427b-ac8d-2d89fc819f62",
                            IsAvailable = "Available",
                            IsUpdated = "No",
                            Kilometer = 781087,
                            LicensePlate = "57 qk 3403",
                            MarketValue = 8577622m,
                            Model = "CX-9",
                            PurchaseDate = new DateTime(2001, 5, 8, 18, 29, 12, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            VehicleType = "Bus"
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 2,
                            Age = 5,
                            Capacity = (short)47,
                            CreatedDate = new DateTime(2015, 1, 20, 20, 25, 21, 0, DateTimeKind.Unspecified),
                            CreatedID = "fe3aac8d-84b8-440f-9877-aae98ba0bf52",
                            CreatedIPAddress = "64.11.86.41",
                            Guid = "22bc95c1-bf1e-4f84-9071-463b58971bf6",
                            IsAvailable = "Busy",
                            IsUpdated = "No",
                            Kilometer = 718849,
                            LicensePlate = "11 ei 2095",
                            MarketValue = 9194070m,
                            Model = "Expedition",
                            PurchaseDate = new DateTime(2009, 4, 3, 21, 44, 33, 0, DateTimeKind.Unspecified),
                            Status = "Unknown",
                            VehicleType = "Motorbike"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 31, 864, DateTimeKind.Local).AddTicks(3917));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fc61ba3-050b-4cca-ba66-ef9160b8b053",
                            CountryId = 5,
                            CreatedDate = new DateTime(2010, 4, 21, 21, 50, 47, 0, DateTimeKind.Unspecified),
                            CreatedID = "eaf0220d-a33c-4c2a-ab52-757994b5513d",
                            CreatedIPAddress = "101.87.159.213",
                            Email = "Myrtle_Walker@gmail.com",
                            EmailConfirmed = false,
                            Guid = "ec52acec-a001-4782-b1a6-db7c5b4c0f52",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 4, 24, 16, 26, 31, 986, DateTimeKind.Unspecified).AddTicks(3984), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "MYRTLE_WALKER@GMAİL.COM",
                            NormalizedUserName = "ORLANDO",
                            PasswordHash = "$2a$11$Tj3rN0S0hUHPfKSlw3tfSeqEu1vS1Vb0LtW7HfXfdF6wbKtpDhoSS",
                            PhoneNumber = "05840848208",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Orlando"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6166f4c4-2bf4-4176-acaf-025cbe85e015",
                            CountryId = 4,
                            CreatedDate = new DateTime(2003, 9, 25, 22, 17, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "cdf312f6-e980-4edf-acb7-5d1cf69922a4",
                            CreatedIPAddress = "6.202.27.176",
                            Email = "Terrence45@hotmail.com",
                            EmailConfirmed = false,
                            Guid = "9421f383-c262-4a52-b3e7-f5873b4af77a",
                            IsUpdated = "Yes",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 4, 24, 16, 26, 32, 109, DateTimeKind.Unspecified).AddTicks(8876), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "TERRENCE45@HOTMAİL.COM",
                            NormalizedUserName = "QUİNCY",
                            PasswordHash = "$2a$11$1j2BV5JamAEidlKQGorgFebe/ypW69wuciS0MCB6.bfnXH7GyOI2u",
                            PhoneNumber = "05228399274",
                            PhoneNumberConfirmed = false,
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Quincy"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26715e22-e0af-4d31-ac6e-920fd801a469",
                            CountryId = 4,
                            CreatedDate = new DateTime(2007, 4, 27, 8, 34, 48, 0, DateTimeKind.Unspecified),
                            CreatedID = "68a9878c-cd22-4ac7-921e-2aa7e135eecc",
                            CreatedIPAddress = "5.158.217.176",
                            Email = "Althea.Dickinson72@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "c3879779-62d6-4723-bfe0-ad93e7b08987",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 4, 24, 16, 26, 32, 231, DateTimeKind.Unspecified).AddTicks(5095), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "ALTHEA.DİCKİNSON72@YAHOO.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "$2a$11$W.N3ueT1NSR0xYqlxxoD/e0S2EpnM96LB1UaCKiaQyYGFOjBnQqhq",
                            PhoneNumber = "05791921456",
                            PhoneNumberConfirmed = false,
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "Jack"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62dc063f-9213-451d-8c89-1fe38880a332",
                            CountryId = 5,
                            CreatedDate = new DateTime(2017, 9, 8, 23, 15, 5, 0, DateTimeKind.Unspecified),
                            CreatedID = "573cd583-1fd6-4878-bbd1-aa340c42629e",
                            CreatedIPAddress = "12.1.166.160",
                            Email = "Gussie.Weissnat@yahoo.com",
                            EmailConfirmed = false,
                            Guid = "02c9523c-57d5-4b6a-beaf-72edbc371b26",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 4, 24, 16, 26, 32, 354, DateTimeKind.Unspecified).AddTicks(3883), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "GUSSİE.WEİSSNAT@YAHOO.COM",
                            NormalizedUserName = "SCARLETT",
                            PasswordHash = "$2a$11$vqASKuTeYG/7S8PotLzDgurDzyFMGKt57D2dbFbIdfKXUY4TQjfdy",
                            PhoneNumber = "05733996090",
                            PhoneNumberConfirmed = false,
                            Status = "Passive",
                            TwoFactorEnabled = false,
                            UserName = "Scarlett"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e094a0f-46cc-4149-9e4d-45acdd7a3cec",
                            CountryId = 2,
                            CreatedDate = new DateTime(2017, 8, 19, 3, 35, 53, 0, DateTimeKind.Unspecified),
                            CreatedID = "6158f234-9f23-4519-9042-633c54a4e497",
                            CreatedIPAddress = "15.230.45.67",
                            Email = "Syble_Crooks1@gmail.com",
                            EmailConfirmed = false,
                            Guid = "d187f43b-2475-4bc2-b19b-0614ed44ed26",
                            IsUpdated = "No",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2025, 4, 24, 16, 26, 32, 476, DateTimeKind.Unspecified).AddTicks(1649), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "SYBLE_CROOKS1@GMAİL.COM",
                            NormalizedUserName = "JESSİKA",
                            PasswordHash = "$2a$11$/i5XV5DoLYk2OGiZsQZsFeO6WXVxj1TnzqtCiBG.8nDtJttmw8Ioq",
                            PhoneNumber = "05571440242",
                            PhoneNumberConfirmed = false,
                            Status = "Unknown",
                            TwoFactorEnabled = false,
                            UserName = "Jessika"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.Property<int?>("WebUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<byte?>("Age")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 17, 16, 26, 32, 477, DateTimeKind.Local).AddTicks(140));

                    b.Property<string>("CreatedID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedIPAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("IP verilmedi");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("IsUpdated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unknown");

                    b.Property<string>("TCN_Passport")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedIPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WebUserAccountId");

                    b.ToTable("AspNetUserProfiles");

                    b.HasData(
                        new
                        {
                            WebUserAccountId = 1,
                            Address = "4866 Fredrick Streets, New Eula, Democratic People's Republic of Korea",
                            Age = (byte)69,
                            BirthDate = new DateTime(1956, 2, 10, 3, 27, 33, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2003, 4, 23, 12, 48, 38, 0, DateTimeKind.Unspecified),
                            CreatedID = "dd0eedbf-3b42-4223-87c4-5f978abbcd3b",
                            CreatedIPAddress = "66.186.189.165",
                            FirstName = "Jade",
                            Gender = "Female",
                            IsUpdated = "No",
                            LastName = "Turcotte",
                            PhotoPath = "riley.info",
                            Status = "Unknown",
                            TCN_Passport = "89056655421",
                            UpdatedDate = new DateTime(2022, 1, 20, 20, 37, 36, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 2,
                            Address = "0472 Shanel Shoals, Chaddfort, Mali",
                            Age = (byte)25,
                            BirthDate = new DateTime(1999, 12, 12, 15, 18, 22, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 4, 14, 8, 35, 49, 0, DateTimeKind.Unspecified),
                            CreatedID = "32bbf0fe-9b8f-4263-994c-87a31a22904f",
                            CreatedIPAddress = "39.117.126.32",
                            FirstName = "Benny",
                            Gender = "Male",
                            IsUpdated = "Yes",
                            LastName = "Wisozk",
                            PhotoPath = "brandyn.name",
                            Status = "Passive",
                            TCN_Passport = "91578846122",
                            UpdatedDate = new DateTime(2023, 12, 22, 18, 39, 46, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 3,
                            Address = "41181 Yasmin Place, Bayerton, Myanmar",
                            Age = (byte)21,
                            BirthDate = new DateTime(2004, 2, 18, 3, 38, 20, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2008, 1, 13, 8, 44, 30, 0, DateTimeKind.Unspecified),
                            CreatedID = "e2e26704-5579-41b8-8030-cfda88d2063e",
                            CreatedIPAddress = "242.159.167.0",
                            FirstName = "Alexys",
                            Gender = "Male",
                            IsUpdated = "No",
                            LastName = "Sporer",
                            PhotoPath = "frederik.com",
                            Status = "Unknown",
                            TCN_Passport = "13381191120",
                            UpdatedDate = new DateTime(2022, 9, 5, 23, 52, 50, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 4,
                            Address = "6373 Reece Heights, West Megane, Iceland",
                            Age = (byte)23,
                            BirthDate = new DateTime(2001, 8, 13, 14, 36, 40, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2009, 9, 2, 14, 22, 11, 0, DateTimeKind.Unspecified),
                            CreatedID = "4444e4f6-474d-4f81-80cf-d13ef210aeca",
                            CreatedIPAddress = "94.6.239.105",
                            FirstName = "Patsy",
                            Gender = "Female",
                            IsUpdated = "No",
                            LastName = "Labadie",
                            PhotoPath = "ayana.org",
                            Status = "Unknown",
                            TCN_Passport = "30544883057",
                            UpdatedDate = new DateTime(2024, 6, 5, 17, 39, 6, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            WebUserAccountId = 5,
                            Address = "882 Edna Fields, Kuhnhaven, Netherlands Antilles",
                            Age = (byte)49,
                            BirthDate = new DateTime(1976, 2, 16, 18, 8, 49, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2007, 6, 8, 23, 57, 50, 0, DateTimeKind.Unspecified),
                            CreatedID = "72b645d2-99d5-4832-a8dc-bf4daf931e6b",
                            CreatedIPAddress = "201.66.64.197",
                            FirstName = "Chloe",
                            Gender = "Male",
                            IsUpdated = "Yes",
                            LastName = "Heidenreich",
                            PhotoPath = "johnson.biz",
                            Status = "Unknown",
                            TCN_Passport = "84472456655",
                            UpdatedDate = new DateTime(2022, 6, 10, 13, 14, 11, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Regions.ServiceRegion", "ServiceRegion")
                        .WithMany("Activities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ServiceRegion");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", "PartnerCompany")
                        .WithMany("PartnerCompanyTransactions")
                        .HasForeignKey("PartnerCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.ContractEmployee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", "SubContractWorkerSupplier")
                        .WithMany("ContractEmployees")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubContractWorkerSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.OrderDetails.ActivityTicketOrderDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Tickets.ActivityTicket", "ActivityTicket")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Orders.ActivityTicketOrder", "ActivityTicketOrder")
                        .WithMany("ActivityTicketOrderDetails")
                        .HasForeignKey("ActivityTicketOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActivityTicket");

                    b.Navigation("ActivityTicketOrder");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Employees.Employee", "Employee")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithMany("ActivityTicketOrders")
                        .HasForeignKey("WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.PassTickets.ActivityPassTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", "PartnerCompanyTransaction")
                        .WithMany("ActivityPassTickets")
                        .HasForeignKey("PartnerCompanyTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PartnerCompanyTransaction");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("ActivityTickets")
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.RentalVehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", "RentalVehicleSupplier")
                        .WithMany("RentalVehicles")
                        .HasForeignKey("RentalVehicleSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("RentalVehicleSupplier");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Activities.Activity", "Activity")
                        .WithMany("Vehicles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.Countries.Country", "Country")
                        .WithMany("WebUserAccounts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", "WebUserAccount")
                        .WithOne("WebUserProfile")
                        .HasForeignKey("DataAccess.Entities.Models.WebUsers.WebUserProfile", "WebUserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebUserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Entities.Models.WebUsers.WebUserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Activities.Activity", b =>
                {
                    b.Navigation("ActivityTickets");

                    b.Navigation("RentalVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompany", b =>
                {
                    b.Navigation("PartnerCompanyTransactions");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.PartnerCompanies.PartnerCompanyTransaction", b =>
                {
                    b.Navigation("ActivityPassTickets");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.RentalVehicleSupplier", b =>
                {
                    b.Navigation("RentalVehicles");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Companies.Suppliers.SubContractWorkerSupplier", b =>
                {
                    b.Navigation("ContractEmployees");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Countries.Country", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WebUserAccounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Employees.Employee", b =>
                {
                    b.Navigation("ActivityTicketOrders");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Orders.ActivityTicketOrder", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Regions.ServiceRegion", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.Tickets.ActivityTicket", b =>
                {
                    b.Navigation("ActivityTicketOrderDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.Models.WebUsers.WebUserAccount", b =>
                {
                    b.Navigation("ActivityTicketOrders");

                    b.Navigation("WebUserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
